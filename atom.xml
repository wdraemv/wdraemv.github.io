<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风不及你甜</title>
  
  <subtitle>迷迷糊糊才是真</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-01T02:49:37.297Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wdraemv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BUU-reverse3</title>
    <link href="http://example.com/2021/08/01/BUU-reverse3/"/>
    <id>http://example.com/2021/08/01/BUU-reverse3/</id>
    <published>2021-08-01T02:26:16.000Z</published>
    <updated>2021-08-01T02:49:37.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-BJD-hamburger-competition"><a href="#BJDCTF2020-BJD-hamburger-competition" class="headerlink" title="[BJDCTF2020]BJD hamburger competition]"></a>[BJDCTF2020]BJD hamburger competition]</h1><p><strong>识别Unity游戏</strong></p><p>Android平台的apk包可以直接解压，看是否有./assets/bin/Data/Managed目录，也可以查看lib文件夹下面包含的一些so，如果有libmono,libunity等模块，基本可以确定是unity游戏了。</p><p>Android平台中C#编写的主逻辑模块代码静态编辑之后存储于Assembly-CSharp.dll文件中。因为unity的跨平台，Android平台是unity编译的游戏，那么其对应的IOS平台上也是unity编译出来的。如果希望直接从IOS上面去看是否是unity游戏，可以提取游戏中的主模块查看是否有unity之类的函数即可。</p><p>这道题找对文件分析就行，dnSpy打开Assembly-CSharp.dll文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">1</span> <span class="keyword">using</span> System;</span><br><span class="line">  <span class="number">2</span> <span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line">  <span class="number">3</span> <span class="keyword">using</span> System.Text;</span><br><span class="line">  <span class="number">4</span> <span class="keyword">using</span> UnityEngine;</span><br><span class="line">  <span class="number">5</span> </span><br><span class="line">  <span class="number">6</span> <span class="comment">// Token: 0x02000004 RID: 4</span></span><br><span class="line">  <span class="number">7</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButtonSpawnFruit</span> :</span> MonoBehaviour</span><br><span class="line">  <span class="number">8</span> &#123;</span><br><span class="line">  <span class="number">9</span>     <span class="comment">// Token: 0x0600000A RID: 10 RVA: 0x00002110 File Offset: 0x00000310</span></span><br><span class="line"> <span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Md5</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"> 11     </span>&#123;</span><br><span class="line"> <span class="number">12</span>         byte[] bytes = Encoding.UTF8.GetBytes(str);</span><br><span class="line"> <span class="number">13</span>         byte[] <span class="built_in">array</span> = MD5.Create().ComputeHash(bytes);</span><br><span class="line"> <span class="number">14</span>         StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"> <span class="number">15</span>         foreach (byte b in <span class="built_in">array</span>)</span><br><span class="line"> <span class="number">16</span>         &#123;</span><br><span class="line"> <span class="number">17</span>             stringBuilder.Append(b.ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line"> <span class="number">18</span>         &#125;</span><br><span class="line"> <span class="number">19</span>         <span class="keyword">return</span> stringBuilder.ToString().Substring(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"> <span class="number">20</span>     &#125;</span><br><span class="line"> <span class="number">21</span> </span><br><span class="line"> <span class="number">22</span>     <span class="comment">// Token: 0x0600000B RID: 11 RVA: 0x00002170 File Offset: 0x00000370</span></span><br><span class="line"> <span class="number">23</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Sha1</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"> 24     </span>&#123;</span><br><span class="line"> <span class="number">25</span>         byte[] bytes = Encoding.UTF8.GetBytes(str);</span><br><span class="line"> <span class="number">26</span>         byte[] <span class="built_in">array</span> = SHA1.Create().ComputeHash(bytes);</span><br><span class="line"> <span class="number">27</span>         StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"> <span class="number">28</span>         foreach (byte b in <span class="built_in">array</span>)</span><br><span class="line"> <span class="number">29</span>         &#123;</span><br><span class="line"> <span class="number">30</span>             stringBuilder.Append(b.ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line"> <span class="number">31</span>         &#125;</span><br><span class="line"> <span class="number">32</span>         <span class="keyword">return</span> stringBuilder.ToString();</span><br><span class="line"> <span class="number">33</span>     &#125;</span><br><span class="line"> <span class="number">34</span> </span><br><span class="line"> <span class="number">35</span>     <span class="comment">// Token: 0x0600000C RID: 12 RVA: 0x000021C8 File Offset: 0x000003C8</span></span><br><span class="line"> <span class="number">36</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Spawn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> 37     </span>&#123;</span><br><span class="line"> <span class="number">38</span>         FruitSpawner component = GameObject.FindWithTag(<span class="string">&quot;GameController&quot;</span>).GetComponent&lt;FruitSpawner&gt;();</span><br><span class="line"> <span class="number">39</span>         <span class="keyword">if</span> (component)</span><br><span class="line"> <span class="number">40</span>         &#123;</span><br><span class="line"> <span class="number">41</span>             <span class="keyword">if</span> (<span class="keyword">this</span>.audioSources.Length != <span class="number">0</span>)</span><br><span class="line"> <span class="number">42</span>             &#123;</span><br><span class="line"> <span class="number">43</span>                 <span class="keyword">this</span>.audioSources[Random.Range(<span class="number">0</span>, <span class="keyword">this</span>.audioSources.Length)].Play();</span><br><span class="line"> <span class="number">44</span>             &#125;</span><br><span class="line"> <span class="number">45</span>             component.Spawn(<span class="keyword">this</span>.toSpawn);</span><br><span class="line"> <span class="number">46</span>             <span class="built_in">string</span> name = <span class="keyword">this</span>.toSpawn.name;</span><br><span class="line"> <span class="number">47</span>             <span class="keyword">if</span> (name == <span class="string">&quot;汉堡底&quot;</span> &amp;&amp; Init.spawnCount == <span class="number">0</span>)</span><br><span class="line"> <span class="number">48</span>             &#123;</span><br><span class="line"> <span class="number">49</span>                 Init.secret += <span class="number">997</span>;</span><br><span class="line"> <span class="number">50</span>             &#125;</span><br><span class="line"> <span class="number">51</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;鸭屁股&quot;</span>)</span><br><span class="line"> <span class="number">52</span>             &#123;</span><br><span class="line"> <span class="number">53</span>                 Init.secret -= <span class="number">127</span>;</span><br><span class="line"> <span class="number">54</span>             &#125;</span><br><span class="line"> <span class="number">55</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;胡罗贝&quot;</span>)</span><br><span class="line"> <span class="number">56</span>             &#123;</span><br><span class="line"> <span class="number">57</span>                 Init.secret *= <span class="number">3</span>;</span><br><span class="line"> <span class="number">58</span>             &#125;</span><br><span class="line"> <span class="number">59</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;臭豆腐&quot;</span>)</span><br><span class="line"> <span class="number">60</span>             &#123;</span><br><span class="line"> <span class="number">61</span>                 Init.secret ^= <span class="number">18</span>;</span><br><span class="line"> <span class="number">62</span>             &#125;</span><br><span class="line"> <span class="number">63</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;俘虏&quot;</span>)</span><br><span class="line"> <span class="number">64</span>             &#123;</span><br><span class="line"> <span class="number">65</span>                 Init.secret += <span class="number">29</span>;</span><br><span class="line"> <span class="number">66</span>             &#125;</span><br><span class="line"> <span class="number">67</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;白拆&quot;</span>)</span><br><span class="line"> <span class="number">68</span>             &#123;</span><br><span class="line"> <span class="number">69</span>                 Init.secret -= <span class="number">47</span>;</span><br><span class="line"> <span class="number">70</span>             &#125;</span><br><span class="line"> <span class="number">71</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;美汁汁&quot;</span>)</span><br><span class="line"> <span class="number">72</span>             &#123;</span><br><span class="line"> <span class="number">73</span>                 Init.secret *= <span class="number">5</span>;</span><br><span class="line"> <span class="number">74</span>             &#125;</span><br><span class="line"> <span class="number">75</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;柠檬&quot;</span>)</span><br><span class="line"> <span class="number">76</span>             &#123;</span><br><span class="line"> <span class="number">77</span>                 Init.secret ^= <span class="number">87</span>;</span><br><span class="line"> <span class="number">78</span>             &#125;</span><br><span class="line"> <span class="number">79</span>             <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;汉堡顶&quot;</span> &amp;&amp; Init.spawnCount == <span class="number">5</span>)</span><br><span class="line"> <span class="number">80</span>             &#123;</span><br><span class="line"> <span class="number">81</span>                 Init.secret ^= <span class="number">127</span>;</span><br><span class="line"> <span class="number">82</span>                 <span class="built_in">string</span> str = Init.secret.ToString();</span><br><span class="line"> <span class="number">83</span>                 <span class="keyword">if</span> (ButtonSpawnFruit.Sha1(str) == <span class="string">&quot;DD01903921EA24941C26A48F2CEC24E0BB0E8CC7&quot;</span>)</span><br><span class="line"> <span class="number">84</span>                 &#123;</span><br><span class="line"> <span class="number">85</span>                     <span class="keyword">this</span>.result = <span class="string">&quot;BJDCTF&#123;&quot;</span> + ButtonSpawnFruit.Md5(str) + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"> <span class="number">86</span>                     Debug.Log(<span class="keyword">this</span>.result);</span><br><span class="line"> <span class="number">87</span>                 &#125;</span><br><span class="line"> <span class="number">88</span>             &#125;</span><br><span class="line"> <span class="number">89</span>             Init.spawnCount++;</span><br><span class="line"> <span class="number">90</span>             Debug.Log(Init.secret);</span><br><span class="line"> <span class="number">91</span>             Debug.Log(Init.spawnCount);</span><br><span class="line"> <span class="number">92</span>         &#125;</span><br><span class="line"> <span class="number">93</span>     &#125;</span><br><span class="line"> <span class="number">94</span> </span><br><span class="line"> <span class="number">95</span>     <span class="comment">// Token: 0x04000005 RID: 5</span></span><br><span class="line"> <span class="number">96</span>     <span class="keyword">public</span> GameObject toSpawn;</span><br><span class="line"> <span class="number">97</span> </span><br><span class="line"> <span class="number">98</span>     <span class="comment">// Token: 0x04000006 RID: 6</span></span><br><span class="line"> <span class="number">99</span>     <span class="keyword">public</span> <span class="keyword">int</span> spawnCount = <span class="number">1</span>;</span><br><span class="line"><span class="number">100</span> </span><br><span class="line"><span class="number">101</span>     <span class="comment">// Token: 0x04000007 RID: 7</span></span><br><span class="line"><span class="number">102</span>     <span class="keyword">public</span> AudioSource[] audioSources;</span><br><span class="line"><span class="number">103</span> </span><br><span class="line"><span class="number">104</span>     <span class="comment">// Token: 0x04000008 RID: 8</span></span><br><span class="line"><span class="number">105</span>     <span class="keyword">public</span> <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="number">106</span> &#125;</span><br></pre></td></tr></table></figure><p>经过SHa1加密得到<strong>DD01903921EA24941C26A48F2CEC24E0BB0E8CC7</strong>，经过解密就可以知道str=1001</p><p>再用MD5加密就可以得到b8c37e33defde51cf91e1e03e51657da</p><p>19行代码只取了20位，最后就可以得出flag</p><h1 id="WUSTCTF2020-Cr0ssfun"><a href="#WUSTCTF2020-Cr0ssfun" class="headerlink" title="[WUSTCTF2020]Cr0ssfun"></a>[WUSTCTF2020]Cr0ssfun</h1><p>找到主函数</p><p><img src="/2021/08/01/BUU-reverse3/fun9.PNG" alt="fun9"></p><p>要想跳出循环就要判断check这个函数，点进去看看</p><p><img src="/2021/08/01/BUU-reverse3/fun8.PNG" alt="fun8"></p><p>都是简单的判断，直接可以得出</p><h1 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6]Overlong"></a>[FlareOn6]Overlong</h1><p>ida打开，主函数</p><p><img src="/2021/08/01/BUU-reverse3/long3.PNG" alt="long3"></p><p>第六行的函数，unk_402008的28位给Text,后面再用MessageBoxA输出text,运行试试</p><p> <img src="/2021/08/01/BUU-reverse3/long5.PNG" alt="long5"></p><p>输出中没有看到flag,看看unk_402008的数据</p><p><img src="/2021/08/01/BUU-reverse3/long4.PNG" alt="long4"></p><p>发现不止28个，有175个数据，就是AF</p><p>用OD打开</p><p><img src="/2021/08/01/BUU-reverse3/long1.PNG" alt="long1"></p><p>将压入栈的1C改为AF即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BJDCTF2020-BJD-hamburger-competition&quot;&gt;&lt;a href=&quot;#BJDCTF2020-BJD-hamburger-competition&quot; class=&quot;headerlink&quot; title=&quot;[BJDCTF2020]BJD hamb</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ReverseMe1</title>
    <link href="http://example.com/2021/07/27/ReverseMe1/"/>
    <id>http://example.com/2021/07/27/ReverseMe1/</id>
    <published>2021-07-27T04:02:07.000Z</published>
    <updated>2021-07-28T08:05:59.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析ReverseMe1"><a href="#分析ReverseMe1" class="headerlink" title="分析ReverseMe1"></a>分析ReverseMe1</h2><h2 id="一-运行"><a href="#一-运行" class="headerlink" title="一.运行"></a>一.运行</h2><p>打开程序，首先出现了一个Nag,都是废话没有什么用，点击确定，接下来是一个序列号的界面，要求我们输入Regcode。</p><p>两个目标：</p><p>1.删除消息框</p><p>2.寻找Regcode</p><p><img src="/2021/07/27/ReverseMe1/1.PNG" alt="1"></p><p><img src="/2021/07/27/ReverseMe1/2.PNG" alt="2"></p><h2 id="二-分析"><a href="#二-分析" class="headerlink" title="二.分析"></a>二.分析</h2><h3 id="1-去除消息框"><a href="#1-去除消息框" class="headerlink" title="1.去除消息框"></a>1.去除消息框</h3><p><img src="/2021/07/27/ReverseMe1/3.PNG" alt="3"></p><p>用OD打开，看一眼是非常熟悉的Visual Basic代码，猜一下，要调用消息框，要调用MtrcMsgBox函数，直接右键搜索函数</p><p><img src="/2021/07/27/ReverseMe1/4.PNG" alt="4"></p><p>找到调用函数的地方，发现一共有四处调用的地方，给他们下断点</p><p><img src="/2021/07/27/ReverseMe1/5.PNG" alt="5"></p><p>F9运行到第一个断点的地方，往上面再看看就可以看到Nag Screen的字眼，就是显示出来的消息框</p><p><img src="/2021/07/27/ReverseMe1/6.PNG" alt="6"></p><p>那我们要如何修改，才能让他不显示</p><p>本来想直接把call指令修改掉，都是栈内就乱了无法传回去</p><p>接着往上找找看看这段的首在哪里，找到了函数的开头，直接把他改成retn 0x4直接返回,不执行接下来的内容</p><p><img src="/2021/07/27/ReverseMe1/7.PNG" alt="7"></p><h3 id="2-寻找Regcode"><a href="#2-寻找Regcode" class="headerlink" title="2.寻找Regcode"></a>2.寻找Regcode</h3><p><img src="/2021/07/27/ReverseMe1/8.PNG" alt="8"></p><p>先随便输入一个看看是什么结果，看到是Sorry！、、、、通过这个字符串去寻找函数</p><p><img src="/2021/07/27/ReverseMe1/9.PNG" alt="9"></p><p><img src="/2021/07/27/ReverseMe1/10.PNG" alt="10"></p><p>这里就看到了一个I’mlena151，push到栈中，接下来调用了vbaStrCmp的函数，字面上就可以看出来这是一个比较的函数</p><p><img src="/2021/07/27/ReverseMe1/11.PNG" alt="11"></p><p>所以这就是我们要寻找的</p><p><img src="/2021/07/27/ReverseMe1/12.PNG" alt="12"></p><p>成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分析ReverseMe1&quot;&gt;&lt;a href=&quot;#分析ReverseMe1&quot; class=&quot;headerlink&quot; title=&quot;分析ReverseMe1&quot;&gt;&lt;/a&gt;分析ReverseMe1&lt;/h2&gt;&lt;h2 id=&quot;一-运行&quot;&gt;&lt;a href=&quot;#一-运行&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-reverse2</title>
    <link href="http://example.com/2021/07/25/BUU-reverse2/"/>
    <id>http://example.com/2021/07/25/BUU-reverse2/</id>
    <published>2021-07-25T02:13:49.000Z</published>
    <updated>2021-07-25T02:32:51.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDCTF2019-Maze"><a href="#HDCTF2019-Maze" class="headerlink" title="[HDCTF2019]Maze"></a>[HDCTF2019]Maze</h1><p>拖入ida后发现打不开，可能是加壳了，脱壳，成功打开。</p><p>找到main函数</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B1%E6%8C%87%E4%BB%A43.PNG" alt="花指令3"></p><p>发现没有办法反汇编，这里最后的应该jnz跳转到下面一行，就是个没有用的指令，下面一个的call明显出错了，没有这个地址，可以推断出这段代码添加了花指令，IDA分析失败了。D键转换成字节数据查看</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B1%E6%8C%87%E4%BB%A44.PNG" alt="花指令4"></p><p>发现 <code>db 0E8h</code>这条指令是添加的花指令，将其nop掉,接下来打开OD,找到要修改的地方</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B1%E6%8C%87%E4%BB%A41.PNG" alt="花指令1"></p><p>将JNZ和下面的db E8都改成NOP保存为新的程序，再打开IDA</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B1%E6%8C%87%E4%BB%A45.PNG" alt="花指令5"></p><p>可以看出这是一个迷宫题，找到存放迷宫图的地方</p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B16.PNG" alt="花6"></p><p><img src="/2021/07/25/BUU-reverse2/%E8%8A%B17.PNG" alt="花7"><br> 用wasd控制行走，dword_408078控制左右，dword_40807C控制上下。<br> s是上，w是下，a是右，d是左。<br> 行走路径为ssaaasaassdddw<br> 则flag为<code>flag&#123;ssaaasaassdddw&#125;</code></p><h1 id="MRCTF2020-Xor"><a href="#MRCTF2020-Xor" class="headerlink" title="[MRCTF2020]Xor"></a>[MRCTF2020]Xor</h1><p>用IDA打开，发现不能反汇编，不知道是什么原因</p><p>看汇编的流程图</p><p><img src="/2021/07/25/BUU-reverse2/1.PNG" alt="1"></p><p>先看到第一个<strong>call sub_401050</strong>，这里压入了一个<strong>byte_4212C0</strong>和一个**%s<strong>，说明输入的flag最终会存放到</strong>byte_4212C0<strong>，继续往下看到</strong>loc_4010B6**这个段，关注edx，edx不断的在自增，最后出循环之后，与1Bh进行比较，大概就可以猜测edx存放的就是输入的flag的长度。<br><img src="/2021/07/25/BUU-reverse2/2.PNG" alt="2"></p><p>如果最后<strong>edx</strong>的值大于<strong>0x1b</strong>，流程就会往右走，直接提示Wrong！再看左边</p><p><img src="/2021/07/25/BUU-reverse2/3.PNG" alt="3"></p><p>将<strong>byte_4212c0</strong>的数据给了cl,把cl与al异或，再与<strong>byte_41EA08</strong>比较，不相等则输出错误，EAX再+1，eax再与edx比较大小，dx可以看到是存储的flag的长度，小于则继续循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">text=<span class="string">&#x27;MSAWB~FXZ:J:`tQJ&quot;N@ bpdd&#125;8g&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">flag+=<span class="built_in">chr</span>(i^<span class="built_in">ord</span>(text[i]))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HDCTF2019-Maze&quot;&gt;&lt;a href=&quot;#HDCTF2019-Maze&quot; class=&quot;headerlink&quot; title=&quot;[HDCTF2019]Maze&quot;&gt;&lt;/a&gt;[HDCTF2019]Maze&lt;/h1&gt;&lt;p&gt;拖入ida后发现打不开，可能是加壳了，脱</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>分析abexcrackme2</title>
    <link href="http://example.com/2021/07/20/crackme2/"/>
    <id>http://example.com/2021/07/20/crackme2/</id>
    <published>2021-07-20T08:11:37.000Z</published>
    <updated>2021-07-22T12:17:57.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-abex‘crackme2"><a href="#1-abex‘crackme2" class="headerlink" title="1.abex‘crackme2"></a>1.abex‘crackme2</h1><h1 id="一-abex‘crackme2"><a href="#一-abex‘crackme2" class="headerlink" title="一.abex‘crackme2"></a>一.abex‘crackme2</h1><p>打开程序</p><p><img src="/2021/07/20/crackme2/1.PNG" alt="1"></p><p>要求我们输入名字与Serial，先随便输一个试试,点击check按钮，弹出了一个Wrong serial!的窗口，开始调试。</p><p><img src="/2021/07/20/crackme2/2.PNG" alt="2"></p><h1 id="二-VB专用引擎"><a href="#二-VB专用引擎" class="headerlink" title="二.VB专用引擎"></a>二.VB专用引擎</h1><p>VB文件使用名为MSVBVM60.dll ( Microsoft Visual Basic Virtual Machine 6.0 )的VB专用引擎(也称为The Thunder Runtime Engine )。<br>举个使用VB引擎的例子，显示消息框时，VB代码中要调用MsgBox)函数。其实，VB编辑器真正调用的是MSVBVM60.dll里的rtcMsgBox()函数，在该函数内部通过调用user32.dll里的MessageBoxW()函数(Win32 API）来工作（也可以在VB代码中直接调用user32.dll里的MessageBoxWO).</p><h1 id="三-开始调试"><a href="#三-开始调试" class="headerlink" title="三.开始调试"></a>三.开始调试</h1><p>运行OllyDbg,查看反汇编代码。</p><p><img src="/2021/07/20/crackme2/3.PNG" alt="3"></p><p>执行程序后，在EP代码中首先要做的是调用VB引擎的主函数（ThunRTMain() )。<br>EP的地址为401238。401238地址处的PUSH 401E14命令用来把RT_MainStruct结构体的地址( 401E14)压入栈。然后40123D地址处的CALL 00401232命令调用401232地址处的JMP DWORDPTR DS:[4010A0]指令。该JMP指令会跳转至VB引擎的主函数ThunRTMain()（前面压入栈的401E14的值作为ThunRTMain()的参数)。</p><h2 id="1-检索字符串"><a href="#1-检索字符串" class="headerlink" title="1.检索字符串"></a>1.检索字符串</h2><p><img src="/2021/07/20/crackme2/5.PNG" alt="5"></p><p>消息框的标题(“Wrong serial!”)、内容(“Nope，this serial is wrong!”)，还有实际调用消息框函数的代码(4034A6)都显示出来了。<br>从编程的观点来看，使用某种算法生成序列号，通过比较用户输入的序列号与字符串，代码分为TRUE(序列号相同）与FALSE(序列号不同)两大部分。换言之，上述代码的前后存在字符串比较代码,且序列号正确时程序代码会调用消息框输出成功消息.</p><p><img src="/2021/07/20/crackme2/6.PNG" alt="6"></p><p>调用403329地址的_vbaVarTstEq()函数，比较(TEST命令）返回值(AX)后，由403332地址的条件转移指令（JE指令）决定执行“真”代码还是“假”代码。</p><h2 id="2-查找字符串地址"><a href="#2-查找字符串地址" class="headerlink" title="2.查找字符串地址"></a>2.查找字符串地址</h2><p>调至403329处</p><p><img src="/2021/07/20/crackme2/7.PNG" alt="7"></p><p>有两个push，这时候我们查看栈窗口</p><p><img src="/2021/07/20/crackme2/8.PNG" alt="8"></p><p>可以看到地址0019F298，0019F288这两处。右键数据段查找</p><p><img src="/2021/07/20/crackme2/9.PNG" alt="9"></p><p>CCD8CAC8应该就是加密过的名字，sssss就是我们输入的serial，我们再用CCD8CAC8作为serial输入</p><p><img src="/2021/07/20/crackme2/11.PNG" alt="11"></p><h2 id="3-生成Serial的算法"><a href="#3-生成Serial的算法" class="headerlink" title="3.生成Serial的算法"></a>3.生成Serial的算法</h2><p>很显然,条件转移代码属于某个函数。该函数可能就是Check按钮的事件处理程序。原因在于选择Check按钮后，该函数会被调用执行，且含有用户代码来弹出成功/失败消息框。<br>最好倒着向上一点点地查找函数开始部分。向上拖动滚动条即可见到图8-14所示的代码。仔细看一下00402EDO地址处的命令。</p><p><img src="/2021/07/20/crackme2/12.PNG" alt="12"></p><p>上述代码是典型的栈帧代码，开始执行函数就会形成栈帧。由此得知该位置就是函数开始部分，即Check按钮的事件处理程序。</p><p>我们预测到程序使用VB引擎的API获取用户输入的字符串，下面以CALL指令为主进行调试(请注意观察此时传递给API的参数及返回值)。开始调试后，遇到第四条CALL指令，如下所示。</p><p><img src="/2021/07/20/crackme2/13.PNG" alt="13"></p><p>查看00402F8E地址处的代码可以看到，函数的局部对象SS:[EBP-88]地址传递(PUSH)给了函数的参数。</p><h3 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h3><p>(1)从给定的Name字符串前端逐一读取字符（共4次)。</p><p>(2)将字符转换为数字(ASCII代码)。</p><p>(3)向变换后的数字加64。</p><p>(4)再次将数字转换为字符。</p><p>(5)连接变换后的字符。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-abex‘crackme2&quot;&gt;&lt;a href=&quot;#1-abex‘crackme2&quot; class=&quot;headerlink&quot; title=&quot;1.abex‘crackme2&quot;&gt;&lt;/a&gt;1.abex‘crackme2&lt;/h1&gt;&lt;h1 id=&quot;一-abex‘crackm</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-reverse</title>
    <link href="http://example.com/2021/07/18/BUU-reverse/"/>
    <id>http://example.com/2021/07/18/BUU-reverse/</id>
    <published>2021-07-18T11:42:36.000Z</published>
    <updated>2021-07-18T13:02:43.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【2019红帽杯】easyRE"><a href="#【2019红帽杯】easyRE" class="headerlink" title="【2019红帽杯】easyRE"></a>【2019红帽杯】easyRE</h1><p>直接IDA打开，搜索字符串找到一个you found me,进入sub_4009C6函数，先看到一个加密</p><p><img src="/2021/07/18/BUU-reverse/22.PNG" alt="22"></p><p>每个字符与索引异或判断是否相等，可以写一个脚本跑一下，结果发现不是，骗人的</p><p>运行结果：Info:The first four chars are ‘flag’</p><p>接着往下面看</p><p><img src="/2021/07/18/BUU-reverse/24.PNG" alt="24"></p><p><img src="/2021/07/18/BUU-reverse/23.PNG" alt="23"></p><p>发现是base64加密10次，判断是否与off_6cc90相等，base64解密十次得到了<a href="https://bbs.pediy.com/thread-254172.htm%EF%BC%8C%E6%B2%A1%E6%9C%89flag%EF%BC%8C%E9%83%BD%E6%98%AF%E6%B7%B7%E6%B7%86%E8%A7%86%E5%90%AC%E7%9A%84%EF%BC%8C%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%97%8F%E5%9C%A8off_6cc90%E4%B8%8B%E9%9D%A2%E7%9A%84%E9%82%A3%E4%B8%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%BD%E6%95%B0">https://bbs.pediy.com/thread-254172.htm，没有flag，都是混淆视听的，真正的藏在off_6cc90下面的那个数据的函数</a></p><p><img src="/2021/07/18/BUU-reverse/25.PNG" alt="25"><img src="/2021/07/18/BUU-reverse/26.PNG" alt="26"></p><p>首先用第20行的异或，102和103对应的字符分别是”f” 和”g”，而且byte_ <em>6CC0A0[0]和byte</em> _6CC0A3刚好<br>是一个字符串的第一位和第四位。那么可以想到是”flag” 与前四位异或，然后得到一个key,再进行下面for循<br>环的异或。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">0x40</span>,<span class="number">0x35</span>,<span class="number">0x20</span>,<span class="number">0x56</span>,<span class="number">0x5D</span>,<span class="number">0x18</span>,<span class="number">0x22</span>,<span class="number">0x45</span>,<span class="number">0x17</span>,<span class="number">0x2F</span>,<span class="number">0x24</span>,<span class="number">0x6E</span>,<span class="number">0x62</span>,</span><br><span class="line">     <span class="number">0x3C</span>,<span class="number">0x27</span>,<span class="number">0x54</span>,<span class="number">0x48</span>,<span class="number">0x6C</span>,<span class="number">0x24</span>,<span class="number">0x6E</span>,<span class="number">0x72</span>,<span class="number">0x3C</span>,<span class="number">0x32</span>,<span class="number">0x45</span>,<span class="number">0x5B</span>]</span><br><span class="line">s1 = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key += <span class="built_in">chr</span>(s[k] ^ <span class="built_in">ord</span>(s1[k]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(s[i] ^ <span class="built_in">ord</span>(key[i%<span class="number">4</span>]))</span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h1><p>拖进IDA，查看main函数</p><p><img src="/2021/07/18/BUU-reverse/actf1.PNG" alt="actf1"></p><p><img src="/2021/07/18/BUU-reverse/actf2.PNG" alt="actf2"></p><p>先判断了前面几位，再判断是不是大小写，然后运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">81</span>,<span class="number">115</span>,<span class="number">119</span>,<span class="number">51</span>,<span class="number">115</span>,<span class="number">106</span>,<span class="number">95</span>,<span class="number">108</span>,<span class="number">122</span>,<span class="number">52</span>,<span class="number">95</span>,<span class="number">85</span>,<span class="number">106</span>,<span class="number">119</span>,<span class="number">64</span>,<span class="number">108</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">127</span>):  </span><br><span class="line">        z = i</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">64</span> <span class="keyword">and</span> i &lt;= <span class="number">90</span>:</span><br><span class="line">            i = (i-<span class="number">51</span>)%<span class="number">26</span> + <span class="number">65</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">96</span> <span class="keyword">and</span> i &lt;= <span class="number">122</span>:</span><br><span class="line">            i = (i-<span class="number">79</span>)%<span class="number">26</span> + <span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span>(i == x[k]):</span><br><span class="line">            flag += <span class="built_in">chr</span>(z)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h1 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h1><p>这是个前端验证flag的题目</p><p>题目给了一个提示</p><p><img src="/2021/07/18/BUU-reverse/login1.PNG" alt="login1"></p><p>直接查看源码</p><p><img src="/2021/07/18/BUU-reverse/login2.PNG" alt="login2"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);</span><br></pre></td></tr></table></figure><p>关键的函数就是这一句，先判断大小写，与对应的Z或者z比较，大于减26，小于就原来的加上13的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&#x27;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(i) &gt;= <span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &lt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i) - <span class="number">13</span> &lt; <span class="number">65</span> :</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) - <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(i) &gt;= <span class="number">97</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &lt;= <span class="number">122</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i) - <span class="number">13</span> &lt; <span class="number">97</span> :</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) - <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += i</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后的结果<a href="mailto:&#67;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#83;&#x69;&#x64;&#101;&#76;&#x6f;&#103;&#x69;&#x6e;&#115;&#x41;&#x72;&#x65;&#69;&#97;&#115;&#x79;&#x40;&#102;&#x6c;&#97;&#114;&#101;&#x2d;&#111;&#x6e;&#46;&#x63;&#111;&#109;">&#67;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#83;&#x69;&#x64;&#101;&#76;&#x6f;&#103;&#x69;&#x6e;&#115;&#x41;&#x72;&#x65;&#69;&#97;&#115;&#x79;&#x40;&#102;&#x6c;&#97;&#114;&#101;&#x2d;&#111;&#x6e;&#46;&#x63;&#111;&#109;</a>，与文件中的提示相对应</p><h1 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h1><p>查壳，发现有一个UPX壳</p><p><img src="/2021/07/18/BUU-reverse/re1.PNG" alt="re1"></p><p><img src="/2021/07/18/BUU-reverse/re2.PNG" alt="re2"></p><p><strong>代码分析</strong></p><p><img src="/2021/07/18/BUU-reverse/re3.PNG" alt="re3"></p><p>打开关键函数sub_4009AE</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">sub_4009AE</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">1629056</span> * *a1 != <span class="number">166163712</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6771600</span> * a1[<span class="number">1</span>] != <span class="number">731332800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3682944</span> * a1[<span class="number">2</span>] != <span class="number">357245568</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10431000</span> * a1[<span class="number">3</span>] != <span class="number">1074393000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3977328</span> * a1[<span class="number">4</span>] != <span class="number">489211344</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5138336</span> * a1[<span class="number">5</span>] != <span class="number">518971936</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7532250</span> * a1[<span class="number">7</span>] != <span class="number">406741500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5551632</span> * a1[<span class="number">8</span>] != <span class="number">294236496</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3409728</span> * a1[<span class="number">9</span>] != <span class="number">177305856</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13013670</span> * a1[<span class="number">10</span>] != <span class="number">650683500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6088797</span> * a1[<span class="number">11</span>] != <span class="number">298351053</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7884663</span> * a1[<span class="number">12</span>] != <span class="number">386348487</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8944053</span> * a1[<span class="number">13</span>] != <span class="number">438258597</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5198490</span> * a1[<span class="number">14</span>] != <span class="number">249527520</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4544518</span> * a1[<span class="number">15</span>] != <span class="number">445362764</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3645600</span> * a1[<span class="number">17</span>] != <span class="number">174988800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10115280</span> * a1[<span class="number">16</span>] != <span class="number">981182160</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9667504</span> * a1[<span class="number">18</span>] != <span class="number">493042704</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5364450</span> * a1[<span class="number">19</span>] != <span class="number">257493600</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13464540</span> * a1[<span class="number">20</span>] != <span class="number">767478780</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5488432</span> * a1[<span class="number">21</span>] != <span class="number">312840624</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">14479500</span> * a1[<span class="number">22</span>] != <span class="number">1404511500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6451830</span> * a1[<span class="number">23</span>] != <span class="number">316139670</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6252576</span> * a1[<span class="number">24</span>] != <span class="number">619005024</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7763364</span> * a1[<span class="number">25</span>] != <span class="number">372641472</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7327320</span> * a1[<span class="number">26</span>] != <span class="number">373693320</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8741520</span> * a1[<span class="number">27</span>] != <span class="number">498266640</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8871876</span> * a1[<span class="number">28</span>] != <span class="number">452465676</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4086720</span> * a1[<span class="number">29</span>] != <span class="number">208422720</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9374400</span> * a1[<span class="number">30</span>] == <span class="number">515592000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5759124</span> * a1[<span class="number">31</span>] == <span class="number">719890500</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a1就是我们输入的v4，反向除就行,但是这里少了一个a7，需要去猜1-f</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="built_in">chr</span>(<span class="number">166163712</span> // <span class="number">1629056</span>)</span><br><span class="line">a2 = <span class="built_in">chr</span>(<span class="number">731332800</span> // <span class="number">6771600</span>)</span><br><span class="line">a3 = <span class="built_in">chr</span>(<span class="number">357245568</span> // <span class="number">3682944</span>)</span><br><span class="line">a4 = <span class="built_in">chr</span>(<span class="number">1074393000</span> // <span class="number">10431000</span>)</span><br><span class="line">a5 = <span class="built_in">chr</span>(<span class="number">489211344</span> // <span class="number">3977328</span>)</span><br><span class="line">a6 = <span class="built_in">chr</span>(<span class="number">518971936</span> // <span class="number">5138336</span>)</span><br><span class="line">a8 = <span class="built_in">chr</span>(<span class="number">406741500</span> // <span class="number">7532250</span>)</span><br><span class="line">a9 = <span class="built_in">chr</span>(<span class="number">294236496</span> // <span class="number">5551632</span>)</span><br><span class="line">a10 = <span class="built_in">chr</span>(<span class="number">177305856</span> // <span class="number">3409728</span>)</span><br><span class="line">a11 = <span class="built_in">chr</span>(<span class="number">650683500</span> // <span class="number">13013670</span>)</span><br><span class="line">a12 = <span class="built_in">chr</span>(<span class="number">298351053</span> // <span class="number">6088797</span>)</span><br><span class="line">a13 = <span class="built_in">chr</span>(<span class="number">386348487</span> // <span class="number">7884663</span>)</span><br><span class="line">a14 = <span class="built_in">chr</span>(<span class="number">438258597</span> // <span class="number">8944053</span>)</span><br><span class="line">a15 = <span class="built_in">chr</span>(<span class="number">249527520</span> // <span class="number">5198490</span>)</span><br><span class="line">a16 = <span class="built_in">chr</span>(<span class="number">445362764</span> // <span class="number">4544518</span>)</span><br><span class="line">a17 = <span class="built_in">chr</span>(<span class="number">981182160</span> // <span class="number">10115280</span>)</span><br><span class="line">a18 = <span class="built_in">chr</span>(<span class="number">174988800</span> // <span class="number">3645600</span>)</span><br><span class="line">a19 = <span class="built_in">chr</span>(<span class="number">493042704</span> // <span class="number">9667504</span>)</span><br><span class="line">a20 = <span class="built_in">chr</span>(<span class="number">257493600</span> // <span class="number">5364450</span>)</span><br><span class="line">a21 = <span class="built_in">chr</span>(<span class="number">767478780</span> // <span class="number">13464540</span>)</span><br><span class="line">a22 = <span class="built_in">chr</span>(<span class="number">312840624</span> // <span class="number">5488432</span>)</span><br><span class="line">a23 = <span class="built_in">chr</span>(<span class="number">1404511500</span> // <span class="number">14479500</span>)</span><br><span class="line">a24 = <span class="built_in">chr</span>(<span class="number">316139670</span> // <span class="number">6451830</span>)</span><br><span class="line">a25 = <span class="built_in">chr</span>(<span class="number">619005024</span> // <span class="number">6252576</span>)</span><br><span class="line">a26 = <span class="built_in">chr</span>(<span class="number">372641472</span> // <span class="number">7763364</span>)</span><br><span class="line">a27 = <span class="built_in">chr</span>(<span class="number">373693320</span> // <span class="number">7327320</span>)</span><br><span class="line">a28 = <span class="built_in">chr</span>(<span class="number">498266640</span> // <span class="number">8741520</span>)</span><br><span class="line">a29 = <span class="built_in">chr</span>(<span class="number">452465676</span> // <span class="number">8871876</span>)</span><br><span class="line">a30 = <span class="built_in">chr</span>(<span class="number">208422720</span> // <span class="number">4086720</span>)</span><br><span class="line">a31 = <span class="built_in">chr</span>(<span class="number">515592000</span> // <span class="number">9374400</span>)</span><br><span class="line">a32 = <span class="built_in">chr</span>(<span class="number">719890500</span> // <span class="number">5759124</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (a1,a2,a3,a4,a5,a6,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【2019红帽杯】easyRE&quot;&gt;&lt;a href=&quot;#【2019红帽杯】easyRE&quot; class=&quot;headerlink&quot; title=&quot;【2019红帽杯】easyRE&quot;&gt;&lt;/a&gt;【2019红帽杯】easyRE&lt;/h1&gt;&lt;p&gt;直接IDA打开，搜索字符串找到一个y</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>分析abex&#39;crackme1</title>
    <link href="http://example.com/2021/07/16/%E5%88%86%E6%9E%90crackme1/"/>
    <id>http://example.com/2021/07/16/%E5%88%86%E6%9E%90crackme1/</id>
    <published>2021-07-16T08:30:41.000Z</published>
    <updated>2021-07-19T07:55:11.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-abex’crackme1"><a href="#一-abex’crackme1" class="headerlink" title="一.abex’crackme1"></a>一.abex’crackme1</h1><p>调试前先运行abex’crackme #1这个程序，大致了解一下它。双击运行程序后弹出一个消息窗口,显示“Make me think your HD is a CD-Rom”消息。不太理解这句英文。消息的最后部分出现了“CD-Rom”这个词，我们只能根据它大致推测出前面的HD为HDD(Hard Disk Drive)的意思。由于没有更多选择，我们继续按消息窗口中的“确定”按钮。</p><p><img src="/2021/07/16/%E5%88%86%E6%9E%90crackme1/1.PNG" alt="1"></p><p>程序弹出Error消息窗后就终止运行了。但是abex到底想要干什么（要怎样破解什么）仍然不得而知。下面直接调试分析它，把握这个小程序的意图。</p><p><img src="/2021/07/16/%E5%88%86%E6%9E%90crackme1/2.PNG" alt="2"></p><h1 id="二-开始调试"><a href="#二-开始调试" class="headerlink" title="二.开始调试"></a>二.开始调试</h1><p><img src="/2021/07/16/%E5%88%86%E6%9E%90crackme1/3.PNG" alt="3"></p><p>由于代码非常简短,我们一点点地分析,重点看右上部分关于Win32 API调用的内容。如果之前大家从事过Windows应用程序的开发，那么对以上几个函数的含义应该非常了解。从上述代码的分析中，我们能够准确把握程序制作者的真正意图。在消息窗口按“确定”后，程序会调用GetDriveType() API，获取C驱动器的类型(大部分返回的是HDD类型)，然后操作它，使之被识别为CD-ROM类型,再在消息窗口中输出“OK, I really think that your HD is a CD-ROM!:p”消息。下面逐行分析crackme的代码。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;调用NessageBoxA()函数00401000 PUSH 0</span></span><br><span class="line"><span class="number">00404000</span> PUSH <span class="number">0</span>                 <span class="comment">;Style =MB_OKIMB_APPLMODAL</span></span><br><span class="line"><span class="number">00401002</span> PUSH <span class="number">402000</span>            <span class="comment">;Title = &quot;abex1st crackme”</span></span><br><span class="line"><span class="number">00401007</span> PUSH <span class="number">402012</span>            <span class="comment">;Text =“Make me think your HD is a CD-Rom.”</span></span><br><span class="line"><span class="number">0040100</span>c PUSH <span class="number">0</span>                 <span class="comment">; hOwner - NULL</span></span><br><span class="line"><span class="number">0040100</span>E CALL <span class="number">00401061</span>          <span class="comment">; MessageBoxA</span></span><br><span class="line">:在函数肉部ESI被设置为FFFFFFFF</span><br><span class="line"><span class="comment">;调用GetDriveType()函数</span></span><br><span class="line"><span class="number">00401013</span> PUSH <span class="number">402094</span><span class="comment">;RootPathName = &quot;c: 1”</span></span><br><span class="line"><span class="number">00401018</span> CALL <span class="number">00401055</span><span class="comment">; GetDriveTypeA</span></span><br><span class="line"><span class="comment">;返回值(EAX)是3(DRIVE_FIXED)</span></span><br><span class="line"><span class="number">0040101</span>D INC ESI<span class="comment">; ESI =0</span></span><br><span class="line"><span class="number">0040101</span>E DEC EAX<span class="comment">;EAX =2</span></span><br><span class="line"><span class="number">0040101</span>F <span class="keyword">JMP </span><span class="keyword">SHORT </span><span class="number">00401021</span></span><br><span class="line"><span class="number">00401021</span> INC ESI<span class="comment">;ESI = 1</span></span><br><span class="line"><span class="number">00401022</span> INC ESI<span class="comment">;ESI =2</span></span><br><span class="line"><span class="number">00401023</span> DEC EAX<span class="comment">;EAX=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;条件分支(401028或40103D)</span></span><br><span class="line"><span class="number">00401024</span> CMP EAX,ESI<span class="comment">;比较EAX(1)与EAX(2)</span></span><br><span class="line"><span class="number">00401026</span> <span class="keyword">JE </span><span class="keyword">SHORT </span><span class="number">0040103</span>D<span class="comment">;JE (Jump if Equal)条件分支命令;若两值相等,则跳转到40103D,</span></span><br><span class="line"><span class="comment">;若两值不等,则从401028继续执行;在40103D地址为消息框输出代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;MessageBo×A()函数调用失败</span></span><br><span class="line"><span class="number">00401028</span> PUSH <span class="number">0</span><span class="comment">; Style = MB_OK|MB_APPLMODAL</span></span><br><span class="line"><span class="number">0040102</span>A PUSH <span class="number">402035</span><span class="comment">;Title = &quot;Error”</span></span><br><span class="line"><span class="number">0040102</span>F PUSH <span class="number">40203</span>B:Text -<span class="string">&quot;Nah. . . This is not a CD-ROM Drive!&quot;</span></span><br><span class="line"><span class="number">00401034</span> PUSH <span class="number">0</span><span class="comment">;hOwner - NULL</span></span><br><span class="line"><span class="number">00401036</span> CALL <span class="number">00401061</span><span class="comment">; MessageBoxA</span></span><br><span class="line"><span class="number">0040103</span>B <span class="keyword">JMP </span> <span class="keyword">SHORT </span><span class="number">00401050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;MessageBoxA(函数调用成功</span></span><br><span class="line"><span class="number">0040103</span>D PUSH <span class="number">0</span><span class="comment">;Style=MB_OKIMB_APPLMODAL</span></span><br><span class="line"><span class="number">0040103</span>F PUSH <span class="number">40205</span>E<span class="comment">; Title = &quot;YEAH!&quot;</span></span><br><span class="line"><span class="number">00401044</span> PUSH <span class="number">402064</span><span class="comment">;Text -&quot;Ok,Ireally think that your HDis a CD-ROM! :p”</span></span><br><span class="line"><span class="number">00401049</span> PUSH <span class="number">0</span><span class="comment">;hOwner = NULL</span></span><br><span class="line"><span class="number">0040104</span>B CALL <span class="number">00401061</span><span class="comment">;MessageBoxA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;终止进程</span></span><br><span class="line"><span class="number">00401050</span> CALL <span class="number">0040105</span>B<span class="comment">;ExitProcess</span></span><br></pre></td></tr></table></figure><p>可以看到就是通过比较AX和SI的值，等于就跳转，只需要把JE修改为无条件跳转指令JMP就可以了</p><p><img src="/2021/07/16/%E5%88%86%E6%9E%90crackme1/4.PNG" alt="4"></p><p>得到最后的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-abex’crackme1&quot;&gt;&lt;a href=&quot;#一-abex’crackme1&quot; class=&quot;headerlink&quot; title=&quot;一.abex’crackme1&quot;&gt;&lt;/a&gt;一.abex’crackme1&lt;/h1&gt;&lt;p&gt;调试前先运行abex’crackme</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-CrackRTF</title>
    <link href="http://example.com/2021/07/15/BUU-CrackRTF/"/>
    <id>http://example.com/2021/07/15/BUU-CrackRTF/</id>
    <published>2021-07-15T03:01:18.000Z</published>
    <updated>2021-07-15T03:56:31.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUU-CrackRTF"><a href="#BUU-CrackRTF" class="headerlink" title="BUU-CrackRTF"></a>BUU-CrackRTF</h1><p>这道题太离谱了，很多没有见过的API，看不懂。</p><p><img src="/2021/07/15/BUU-CrackRTF/%E6%8D%95%E8%8E%B7.PNG" alt="捕获"></p><p>先查壳，发现是无壳的32位，丢进IDA,找到主函数</p><p><img src="/2021/07/15/BUU-CrackRTF/tempsnip.png" alt="tempsnip"></p><p>先输入了一段6个字符的字符串，再连上“@DBApp”,再进行加密，看一下加密函数</p><p><img src="/2021/07/15/BUU-CrackRTF/3.PNG" alt="3"></p><p>CryptCreateHash哈希加密，有了解过哈希的是可以知道，哈希是很多算法放在一起，然后随机抽一个算法来加密,这个0x8004u是什么看不懂，去查了一下winAPI文档才知道这个代表SHA1加密。</p><p>加密后与6E32D0943418C2C33385BC35A1470250DD8923A9对比，正确的话再进行。从前面的v4&lt;100000发现有范围限制，到1000000就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">s = <span class="string">&#x27;6E32D0943418C2C33385BC35A1470250DD8923A9&#x27;</span>.lower()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">1000000</span>):</span><br><span class="line">    a = <span class="built_in">str</span>(i)+<span class="string">&#x27;@DBApp&#x27;</span></span><br><span class="line">    m = hashlib.sha1()</span><br><span class="line">    m.update(a.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    sha1 = m.hexdigest()</span><br><span class="line">    <span class="keyword">if</span> sha1 == s:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="/2021/07/15/BUU-CrackRTF/4.PNG" alt="4"></p><p>解出是123321</p><p>接下来输入第二串密码</p><p>也是先连接上第一个的密码在进行加密，但加密方式有点不太一样</p><p><img src="/2021/07/15/BUU-CrackRTF/5.PNG" alt="5"></p><p>换成了32位的MD5加密，后面却什么信息也都没有给，没有范围怎么爆破，这怎么搞。看了WP后发现是在下面一个函数里面加密</p><p><img src="/2021/07/15/BUU-CrackRTF/6.PNG" alt="6"></p><p>这里用了FindResourceA( )函数，详细可以看<a href="https://blog.csdn.net/singleyellow/article/details/80308789">https://blog.csdn.net/singleyellow/article/details/80308789</a></p><p>要用到Resource Hacker打开会有一个AAA的，从里面取出数据来</p><p><img src="/2021/07/15/BUU-CrackRTF/7.PNG" alt="7"></p><p>下面还有一个函数</p><p><img src="/2021/07/15/BUU-CrackRTF/8.PNG" alt="8"></p><p>将之前的输入的与AAA里面的异或，因为要生成一个.rtf的文件，那肯定缺少不了文件头。 直接搜索.rtf的文件头~</p><p>最后把文件头的前六位与AAA里面的六位做逆向异或，得到输入的密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;&#123;\rtf1&quot;</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">0x05</span>,<span class="number">0x7D</span>,<span class="number">0x41</span>,<span class="number">0x15</span>,<span class="number">0x26</span>,<span class="number">0x01</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">x = <span class="built_in">ord</span>(s[i]) ^ a[i]</span><br><span class="line">flag += <span class="built_in">chr</span>(x)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>得到第二次密码：<code>~!3a@0</code></p><p><img src="/2021/07/15/BUU-CrackRTF/9.PNG" alt="9"></p><p>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BUU-CrackRTF&quot;&gt;&lt;a href=&quot;#BUU-CrackRTF&quot; class=&quot;headerlink&quot; title=&quot;BUU-CrackRTF&quot;&gt;&lt;/a&gt;BUU-CrackRTF&lt;/h1&gt;&lt;p&gt;这道题太离谱了，很多没有见过的API，看不懂。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>逆向分析Hello World！程序</title>
    <link href="http://example.com/2021/07/13/world/"/>
    <id>http://example.com/2021/07/13/world/</id>
    <published>2021-07-13T03:34:40.000Z</published>
    <updated>2021-07-13T12:52:08.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Hello-World-程序"><a href="#1-Hello-World-程序" class="headerlink" title="1.Hello World!程序"></a>1.Hello World!程序</h1><p>这个程序想必大家都是非常熟悉的，第一个接触的程序一个就是他了，这里就不多加解释，用Visual C++编写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tchar.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, TCHAR *argv[])</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, </span><br><span class="line">   <span class="string">L&quot;Hello World!&quot;</span>, </span><br><span class="line">   <span class="string">L&quot;www.reversecore.com&quot;</span>, </span><br><span class="line">   MB_OK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/13/world/25.PNG" alt="25"></p><h1 id="2-调试Hello-World-exe程序"><a href="#2-调试Hello-World-exe程序" class="headerlink" title="2.调试Hello World.exe程序"></a>2.调试Hello World.exe程序</h1><h2 id="调试目的"><a href="#调试目的" class="headerlink" title="调试目的"></a>调试目的</h2><p>通过调试Hello World.exe可执行文件，在转换得到的汇编语言中找到main()函数。</p><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>首先用OllyDbg调试工具打开Hello World.exe程序</p><p><img src="/2021/07/13/world/2.PNG" alt="2"></p><h2 id="入口点"><a href="#入口点" class="headerlink" title="入口点"></a>入口点</h2><p>调试器停止的地方即为Hello World.exe执行的初始地址，它是一段EP（入口）代码，最重要的就是call 和jmp两个指令。call指令的作用是调用40270C地址处的函数，再跳转至40104F地址处。</p><h2 id="跟踪40270C函数"><a href="#跟踪40270C函数" class="headerlink" title="跟踪40270C函数"></a>跟踪40270C函数</h2><p>在4011A0地址处F7进去40270C函数</p><p><img src="/2021/07/13/world/3.PNG" alt="3"></p><p>可以看到它并不是main函数，在注释的API被调用的函数可以看到。</p><h2 id="跟踪40104F跳转语句"><a href="#跟踪40104F跳转语句" class="headerlink" title="跟踪40104F跳转语句"></a>跟踪40104F跳转语句</h2><p><img src="/2021/07/13/world/5.PNG" alt="4"></p><p>看到这一段代码是非常复杂的，他们是Visual C++的启动函数。跟踪这些代码就可以找到我们需要寻找的main()函数。</p><p>接下来一步步调试，先进入到402524函数</p><p><img src="/2021/07/13/world/6.PNG" alt="6"></p><p>这个函数也没有main()函数的特征，并没有在代码中发现调用MessageBox()API的代码。直接Ctrl+F9跳到retn,F7回到之前的地址继续按相同的方法走，</p><p><img src="/2021/07/13/world/7.PNG" alt="7"></p><p><img src="/2021/07/13/world/8.PNG" alt="8"></p><p>这里走到了401144这个地方，跳转进401000函数，发现401000函数内部出现了调用MessageBox()API的代码，该API函数的参数为“<a href="http://www.reversecore.com”与“helloworld!”两个字符串.与源码的内容一样,这就是要找的main函数/">www.reversecore.com”与“Helloworld!”两个字符串。与源码的内容一样，这就是要找的main函数</a></p><p><img src="/2021/07/13/world/9.PNG" alt="9"></p><h2 id="大本营"><a href="#大本营" class="headerlink" title="大本营"></a>大本营</h2><p>每次重新运行调试器时，调试都会返同到EP处，并从此处开始新的调试，使用起来相当不方便。经验丰富的代码逆向分析专家需要在调试代码时设置某个重要的点(地址)，使调试能快速转到设置点上。在代码中设置好这样的点后，再次调试时，调试流能够经过这些指定的点，快速达到目标。这些在代码中设置的点就像在登山途中设置的营帐样，以登喜马拉雅山为例，登顶过程中需要设置多个营帐充当据点，如“大木营”一“前进营1”一“前进营2”-“最终突击营”一“峰顶”。同样，调试代码量非常巨大时，整个调试过程可能需要好几天时间，那么在相应位置上设置这些“据点”将非常方便调试。下面向大家介绍几种在代码中设置“据点”的方法，并学习如何快速转到这些“据点”。首先运行OllyDbg,打开HelloWorld.exe可执行文件并调试，将40104F地址设置为basecamp (大本营)。</p><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><p>​    1.Goto命令<br>请记住，我们要设置为“大本营”的地址为40104F。执行Go to(Ctrl+G)命令，打开一个Enterexpression to follow (输人跟踪表达式)对话框，如图2-11所示，在文本框中输人“40104F”，然后单击OK按钮。Enter expression to fllow</p><p><img src="/2021/07/13/world/10.PNG" alt="10"></p><p>输人地址单击OK按钮后，光标自动定位到40104F地址处，执行Execute till cursor(F4)命令，让调试流运行到该处，然后从40104F处开始调试代码就变得非常方便了。</p><p>​    2.设置断点<br>调试代码时，还可以设置BP ( Break Point,断点)(快捷键F2)让调试流转到“大本营”</p><p>​    3.注释</p><p><img src="/2021/07/13/world/11.PNG" alt="11"></p><p>​    4.标签</p><h2 id="快速查找指定代码的方法"><a href="#快速查找指定代码的方法" class="headerlink" title="快速查找指定代码的方法"></a>快速查找指定代码的方法</h2><h3 id="1代码执行法"><a href="#1代码执行法" class="headerlink" title="1代码执行法"></a>1代码执行法</h3><p>我们需要查找的是main)函数中调用MessageBox(函数的代码。在调试器中调试HelloWorld.exe ( Step Over(F8))时，main0函数的MessageBox(函数在某个时刻就会被调用执行，弹出消息对话框，显示“Hello World!”这条信息。以上就是代码执行法的基本原理，程序功能非常明确时,逐条执行指令来查找需要查找的位置。代码执行法仅适用于被调试的代码量不大、且程序功能明确的情况。倘若被调试的代码量很大且比较复杂时，此种方法就不再适用了。下面使用代码执行法来查找代码中的main0函数。从“大本营”( 40104F )开始，按F8键逐行执行命令,在某个时刻弹出消息对话框，显示”Hello World!”信息。按Ctrl+F2键再次载入待调试的可执行文件并重新调试，不断按F8键,某个时刻- -定会弹出消息对话框。弹出消息对话框时调用的函数即为main()函数。就是上面查找的方法。</p><h3 id="2-字符串检索法"><a href="#2-字符串检索法" class="headerlink" title="2.字符串检索法"></a>2.字符串检索法</h3><p>鼠标右键菜单- Search for - All referenced text strings</p><p>在程序中查找指定字符串的方法很多，这里向大家介绍OllyDbg中提供的字符串检索法。OllyDbg初次载入待调试的程序时，都会先经历-一个预分析过程。此过程中会查看进程内存，程序中引用的字符串和调用的API都会被摘录出来，整理到另外-一个列表中，这样的列表对调试是相当有用的。使用All referenced text strings命令会弹出一个窗口，其中列出了程序代码引用的字符串</p><p><img src="/2021/07/13/world/12.PNG" alt="12"></p><p>如图，地址401007处有个PUSH 004092A0的指令，通过该指令就可以到达字符串的位置。</p><h3 id="3-API检索法-1-在调用代码中设置断点"><a href="#3-API检索法-1-在调用代码中设置断点" class="headerlink" title="3 API检索法(1); 在调用代码中设置断点"></a>3 API检索法(1); 在调用代码中设置断点</h3><p>鼠标右键菜单- Search for - All intermodular calls<br>Windows编程中，若想向显示器显示内容，则需要使用Win 32 API向OS请求显示输出。换言之，应用程序向显示器画面输出内容时，需要在程序内部调用Win32 API。认真观察-一个程序的功能后,我们能够大致推测出它在运行时调用的Win32 API,若能进一步 查找到调用的Win32 API,则会为程序调试带来极大便利。以HelloWorld.exe为例， 它在运行时会弹出- -个消息窗口， 由此我们可以推断出该程序调用了user32.MessageBoxW0 API。<br><img src="/2021/07/13/world/13.PNG" alt="13"></p><p>可以看到MessageBoxW()的代码，该函数位于40100E地址处，它是user32.MessageBoxW()的API。</p><p>4.API检索法(2)：在API代码中设置断点</p><p>这种情况下，DLL代码库被加载到进程内存后,我们可以直接向DLL代码库添加断点。API是操作系统对用户应用程序提供的一系列函数， 它们实现于C:\Windowslsystems32文件夹中的dIl文件(如kermel32.dIl、user32.dl1、gdi32.dll、 advapi32.dI1、 ws2_ 32.dI等) 内部。简言之,我们编写的应用程序执行某种操作时(如各种I/O操作),必须使用OS提供的API向OS提出请求,然后与被调用API对应的系统DLL文件就会被加载到应用程序的进程内存。在OllyDbg菜单栏中依次选择View Memory菜单(快捷键Alt+M),打开内存映射窗口。如图所示，内存映射窗口中显示了- -部分HelloWorld.exe进程内存。在图底部的方框中可以看到，USER32库被加载到了内存。</p><p><img src="/2021/07/13/world/14.PNG" alt="14"></p><p>使用OllyDbg中的Name in all modules命令可以列出被加载的DLL文件中提供的所有API。使用Name in all modules命令打开All names窗口，单击Name栏目按名称排序，通过键盘敲出MessageBoxW后，光标会自动定位到MessageBoxW上。<br>USER32模块中有一个Export类型的MessageBoxW函数(不同系统环境下函数地址不同)。双击MessageBoxW函数后就会显示其代码，它实现于USER32.d1l库中，如图所示。</p><p><img src="/2021/07/13/world/world%5C16.PNG" alt="16"></p><p>观察MessageBoxW函数的地址空间可以发现,它与HelloWorld.exe使用的地址空间完全不同。在函数起始地址上按F2键，设置好断点后按F9继续执行.</p><p><img src="/2021/07/13/world/18.PNG" alt="18"></p><p>可以看到栈窗口中的信息和预测的一样，寄存器中的ESP的地址为19FF18</p><p><img src="/2021/07/13/world/17.PNG" alt="17"></p><p><img src="/2021/07/13/world/19.PNG" alt="19"></p><h1 id="3-利用“打补丁”修改字符串"><a href="#3-利用“打补丁”修改字符串" class="headerlink" title="3.利用“打补丁”修改字符串"></a>3.利用“打补丁”修改字符串</h1><p>先在我们之前找到的大本营处下断点，按F9运行程序，到大本营这</p><h2 id="修改字符串的方法"><a href="#修改字符串的方法" class="headerlink" title="修改字符串的方法"></a>修改字符串的方法</h2><h3 id="（1）直接修改字符串缓冲区"><a href="#（1）直接修改字符串缓冲区" class="headerlink" title="（1）直接修改字符串缓冲区"></a>（1）直接修改字符串缓冲区</h3><p>MessageBoxW函数的字符串参数”Hello World!” 保存在地址4092A0处的一段缓冲区中， 只要修改这段内容，就可以修改MessageBoxW 函数显示出的字符串。在Dump窗口中按CtrI+G快捷键执行Go to命令，在弹出窗口中输人4092A0进人字符串缓冲区。然后使用鼠标选中4092A0地址处的字符串，按Ctrl+E快捷键打开编辑窗口，</p><p><img src="/2021/07/13/world/20.PNG" alt="20"></p><p><img src="/2021/07/13/world/21.PNG" alt="21"></p><p>在返回去看断点的地方，已经被修改了</p><p><img src="/2021/07/13/world/22.PNG" alt="22"></p><p><img src="/2021/07/13/world/23.PNG" alt="23"></p><h3 id="（2）-在其他内存区域新建字符串并传递给消息函数"><a href="#（2）-在其他内存区域新建字符串并传递给消息函数" class="headerlink" title="（2）.在其他内存区域新建字符串并传递给消息函数"></a>（2）.在其他内存区域新建字符串并传递给消息函数</h3><p>401007地址处有- - 条PUSH 004092A0命令，它把4092A0地址处的“Hello World!”字符串以参数形式传递给MessageBoxW(函数。向MessageBox W0函数传递字符串参数时，传递的是字符串所在区域的首地址。如果改变了字符串地址，消息框就会显示变更后的字符串。在内存的某个区域新建一个长字符串, 并把新字符串的首地址传递给MessageBoxW0函数，可以认为传递的是完全不同的字符串地址。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Hello-World-程序&quot;&gt;&lt;a href=&quot;#1-Hello-World-程序&quot; class=&quot;headerlink&quot; title=&quot;1.Hello World!程序&quot;&gt;&lt;/a&gt;1.Hello World!程序&lt;/h1&gt;&lt;p&gt;这个程序想必大家都是非常熟悉</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>大小端存储</title>
    <link href="http://example.com/2021/07/10/%E5%A4%A7%E5%B0%8F%E7%AB%AF%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/2021/07/10/%E5%A4%A7%E5%B0%8F%E7%AB%AF%E5%AD%98%E5%82%A8/</id>
    <published>2021-07-10T12:07:05.000Z</published>
    <updated>2021-07-10T12:33:43.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、大端模式和小端模式的起源"><a href="#一、大端模式和小端模式的起源" class="headerlink" title="一、大端模式和小端模式的起源"></a>一、大端模式和小端模式的起源</h1><p>​    关于大端小端名词的由来，有一个有趣的故事，来自于Jonathan Swift的《格利佛游记》：Lilliput和Blefuscu这两个强国在过去的36个月中一直在苦战。战争的原因：大家都知道，吃鸡蛋的时候，原始的方法是打破鸡蛋较大的一端，可以那时的皇帝的祖父由于小时侯吃鸡蛋，按这种方法把手指弄破了，因此他的父亲，就下令，命令所有的子民吃鸡蛋的时候，必须先打破鸡蛋较小的一端，违令者重罚。然后老百姓对此法令极为反感，期间发生了多次叛乱，其中一个皇帝因此送命，另一个丢了王位，产生叛乱的原因就是另一个国家Blefuscu的国王大臣煽动起来的，叛乱平息后，就逃到这个帝国避难。据估计，先后几次有11000余人情愿死也不肯去打破鸡蛋较小的端吃鸡蛋。这个其实讽刺当时英国和法国之间持续的冲突。Danny Cohen一位网络协议的开创者，第一次使用这两个术语指代字节顺序，后来就被大家广泛接受。</p><h1 id="二、什么是大端和小端"><a href="#二、什么是大端和小端" class="headerlink" title="二、什么是大端和小端"></a>二、什么是大端和小端</h1><p>大端和小端是指数据在内存中的存储模式，它由 CPU 决定：</p><ol><li><p>大端模式（Big-endian）是指将数据的低位（比如 1234 中的 34 就是低位）放在内存的高地址上，而数据的高位（比如 1234 中的 12 就是高位）放在内存的低地址上。这种存储模式有点儿类似于把数据当作字符串顺序处理，地址由小到大增加，而数据从高位往低位存放。</p></li><li><p>小端模式（Little-endian）是指将数据的低位放在内存的低地址上，而数据的高位放在内存的高地址上。这种存储模式将地址的高低和数据的大小结合起来，高地址存放数值较大的部分，低地址存放数值较小的部分，这和我们的思维习惯是一致，比较容易理解。</p></li></ol><p>举一个例子，比如数字0x12 34 56 78</p><p>大端序</p><p><strong>低地址 ——————–&gt; 高地址</strong><br><strong>0x12  |  0x34  |  0x56  |  0x78</strong></p><p>小端序</p><p><strong>低地址 ——————–&gt; 高地址</strong><br><strong>0x78  |  0x56  |  0x34  |  0x12</strong></p><p><img src="/2021/07/10/%E5%A4%A7%E5%B0%8F%E7%AB%AF%E5%AD%98%E5%82%A8/1.PNG" alt="1"></p><p>在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器），另外，对于位数大于8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如果将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。例如一个16bit的short型x，在内存中的地址为0x0010，x的值为0x1122，那么0x11为高字节，0x22为低字节。对于大端模式，就将0x11放在低地址中，即0x0010中，0x22放在高地址中，即0x0011中。小端模式，刚好相反。我们常用的X86结构是小端模式，而KEIL C51则为大端模式。很多的ARM，DSP都为小端模式。有些ARM处理器还可以由硬件来选择是大端模式还是小端模式。</p><h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0x01234567</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>); i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, ((<span class="keyword">char</span> *)&amp;x)[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (((<span class="keyword">char</span> *)&amp;x)[<span class="number">0</span>] == <span class="number">0x67</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;little endian!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (((<span class="keyword">char</span> *)&amp;x)[<span class="number">0</span>] == <span class="number">0x01</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;big endian\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、大端模式和小端模式的起源&quot;&gt;&lt;a href=&quot;#一、大端模式和小端模式的起源&quot; class=&quot;headerlink&quot; title=&quot;一、大端模式和小端模式的起源&quot;&gt;&lt;/a&gt;一、大端模式和小端模式的起源&lt;/h1&gt;&lt;p&gt;​    关于大端小端名词的由来，有一个有趣</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-luck_guy</title>
    <link href="http://example.com/2021/07/08/BUU-luck-guy/"/>
    <id>http://example.com/2021/07/08/BUU-luck-guy/</id>
    <published>2021-07-08T01:45:43.000Z</published>
    <updated>2021-07-08T02:37:34.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="GXYCTF2019 luck_guy"></a>GXYCTF2019 luck_guy</h1><p>拿到文件，先file一下，是64位的文件，直接拖进IDA64里面，找到主函数</p><p><img src="/2021/07/08/BUU-luck-guy/1.PNG" alt="1"></p><p>可以看到patch_me是关键的函数，输入的flag都要放到里面去</p><p><img src="/2021/07/08/BUU-luck-guy/2.PNG" alt="2"></p><p>继续跟进get_flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  __int64 s; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( rand() % <span class="number">200</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;OK, it&#x27;s flag:&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x28</span>uLL);</span><br><span class="line">        <span class="built_in">strcat</span>((<span class="keyword">char</span> *)&amp;s, f1);</span><br><span class="line">        <span class="built_in">strcat</span>((<span class="keyword">char</span> *)&amp;s, &amp;f2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar not like you&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar want a girlfriend&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        s = <span class="number">0x7F666F6067756369</span>LL;</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(&amp;f2, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( j % <span class="number">2</span> == <span class="number">1</span> )</span><br><span class="line">            *(&amp;f2 + j) -= <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            --*(&amp;f2 + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到有一个for循环和switch,进行了5次循环.case1很明显是对flag的最后处理，将f1和f2合并得到flag，点进去可以查看到                **f1     db ‘GXY{do_not_’**，f2初始值为空，接着往下看，case2和case3都没有什么有用的消息。case4是对f2的定义，这里是小端存储，所以f2要倒过来。case5则是对f2的处理。</p><p>case的顺序应该是case4,case5,case1.</p><p>按照逻辑直接写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f1=<span class="string">&#x27;GXY&#123;do_not_&#x27;</span></span><br><span class="line">s0=<span class="string">&#x27;&lt;0x7F&gt;fo`guci&#x27;</span></span><br><span class="line">s=s0[::-<span class="number">1</span>]</span><br><span class="line">print(s)</span><br><span class="line">key=<span class="string">&quot;&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">        key+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i])-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i])-<span class="number">1</span>)</span><br><span class="line">        i=s[i]</span><br><span class="line">flag=f1+key</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><img src="/2021/07/08/BUU-luck-guy/hexo\source_posts\BUU-luck-guy\3.PNG" alt="3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GXYCTF2019-luck-guy&quot;&gt;&lt;a href=&quot;#GXYCTF2019-luck-guy&quot; class=&quot;headerlink&quot; title=&quot;GXYCTF2019 luck_guy&quot;&gt;&lt;/a&gt;GXYCTF2019 luck_guy&lt;/h1&gt;&lt;p&gt;拿到</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>花指令</title>
    <link href="http://example.com/2021/06/14/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2021/06/14/%E8%8A%B1%E6%8C%87%E4%BB%A4/</id>
    <published>2021-06-14T08:05:21.000Z</published>
    <updated>2021-06-14T08:20:11.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>花指令是，由<a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E8%80%85/514381">设计者</a>特别构思，希望使<a href="https://baike.baidu.com/item/%E5%8F%8D%E6%B1%87%E7%BC%96/10858476">反汇编</a>的时候出错，让破解者无法清楚正确地<a href="https://baike.baidu.com/item/%E5%8F%8D%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F">反汇编程序</a>的内容，迷失方向。经典的是，目标位置是另一条指令的中间，这样在反汇编的时候便会出现混乱。花指令有可能利用各种指令：<a href="https://baike.baidu.com/item/jmp/2149772">jmp</a>, call, ret的一些<a href="https://baike.baidu.com/item/%E5%A0%86%E6%A0%88/1682032">堆栈</a>技巧，位置运算，等等。</p><p>花指令的作用是对付静态分析，以下面一段程序说明一下花指令的原理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   _asm</span><br><span class="line">    &#123;</span><br><span class="line">            jmp l2</span><br><span class="line">        _EMIT <span class="number">0x1</span><span class="comment">//这里就是花指令</span></span><br><span class="line">        _EMIT <span class="number">0x2</span><span class="comment">//这里就是花指令</span></span><br><span class="line">        _EMIT <span class="number">0x3</span><span class="comment">//这里就是花指令</span></span><br><span class="line">        _EMIT <span class="number">0x4</span><span class="comment">//这里就是花指令</span></span><br><span class="line">l2:</span><br><span class="line">        mov eax,<span class="number">0x11111111</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  可以看到，程序直接跳转到标签l2了，在jmp指令和l2之间的就是花指令，花指令为什么能起作用呢？那是因为反编译器在反编译的时候不会像我们人一样去理解jmp和l2之间的指令是永远不会执行到的，所以在反编译的时候就把这段乱七八糟的代码作为正常的指令了，而这样的反编译会影响mov eax,0x11111111这个指令的正确识别，所以导致在OD中以上代码不会正确显示。</p><p>了解了原理我们就可以自如地设计花指令了，比如再加一段_EMIT 0x5等等。</p><p>花指令不光是能够用jmp指令来设计，还可以用call指令配合ret指令来进行设计，原理是这样的：我们知道call指令等于这样两条指令，一是把自身所在位置的下一条指令的地址压入堆栈，二是jmp到call的地址处，而ret指令可以理解为jmp到call指令压入堆栈的地址，因此，可以用call指令这样来写花指令：</p><p>1.call一个地址，在call下面随便写一点花指令，但是要注意一点与jmp版花指令不同的，我们要记得自己写的花指令占了多少个字节，比如，占了2字节，至于为什么要记得，往下看</p><p>2.在call里面，也就是函数里面，首先pop出压入的地址，然后把这个地址减去花指令占用的字节数，这里是2字节，再重新push进堆栈，然后就ret</p><p>这样，call结束以后执行的下一条指令就是我们想要去的位置了，也就是花指令下面的正常的指令了</p><p>其实用call来做的话起到的也就是jmp的作用，道理是一样的，只不过手法不同</p><p>这个call ret配合的方法是我分析aspack看到的，不知道还有没有其他的花指令的方法，有的话再加上：）</p><p>这里有个找花指令的小技巧，当发现jmp或者call的地址在OD中没显示的话，就把jmp或者call指令的下一个指令nop掉吧，肯定是花指令，如果还没有显示的话就继续nop下一条，直到显示的指令和执行的指令一致，所以说，去花指令是个体力活，哈哈</p><p>补充一点，如果这个call不跟进去的话，貌似程序就没办法调试了，不知道怎么回事，不清楚原因</p><p>  下边是一个用call ret实现花指令和跳转的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD p;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        call l1</span><br><span class="line">l1:</span><br><span class="line">        pop eax</span><br><span class="line">        mov p,eax<span class="comment">//确定当前程序段的位置</span></span><br><span class="line">        call f1</span><br><span class="line">        _EMIT <span class="number">0xEA</span><span class="comment">//花指令，此处永远不会执行到</span></span><br><span class="line">        jmp l2<span class="comment">//call结束以后执行到这里</span></span><br><span class="line">f1:<span class="comment">//这里用F8OD会终止调试，F7跟进的话就正常,why?</span></span><br><span class="line">        pop ebx</span><br><span class="line">        inc ebx</span><br><span class="line">        push ebx</span><br><span class="line">        mov eax,<span class="number">0x11111111</span></span><br><span class="line">        ret</span><br><span class="line">l2:</span><br><span class="line">        call f2<span class="comment">//用ret指令实现跳转</span></span><br><span class="line">        mov ebx,<span class="number">0x33333333</span><span class="comment">//这里永远不会执行到</span></span><br><span class="line">        jmp e<span class="comment">//这里永远不会执行到</span></span><br><span class="line">f2:</span><br><span class="line">        mov ebx,<span class="number">0x11111111</span></span><br><span class="line">        pop ebx<span class="comment">//弹出压栈的地址</span></span><br><span class="line">        mov ebx,offset e<span class="comment">//要跳转到的地址</span></span><br><span class="line">        push ebx<span class="comment">//压入要跳转到的地址</span></span><br><span class="line">        ret<span class="comment">//跳转</span></span><br><span class="line">e:</span><br><span class="line">        mov ebx,<span class="number">0x22222222</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;hex&lt;&lt;p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;花指令是，由&lt;a href=&quot;https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E8%80%8</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU-刮开有奖</title>
    <link href="http://example.com/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/"/>
    <id>http://example.com/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/</id>
    <published>2021-06-10T08:00:56.000Z</published>
    <updated>2021-06-10T08:47:54.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h1><p><img src="/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/%E6%8D%95%E8%8E%B7.PNG" alt="捕获"></p><p>查壳发现是一个32位无壳</p><p>进入WINMain主函数<img src="/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/1.PNG" alt="1"></p><p>关键点在于DialogFunc函数里面，进去查看</p><p><img src="/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/2.PNG" alt="2"></p><p>看一遍下来通过代码<strong>GetDlgItemTextA(hDlg, 1000, &amp;String, 0xFFFF);</strong><br>知道了String是我们输入的flag。通过代码**if ( strlen(&amp;String) == 8 )**，我们知道flag的长度应该是8。再从上往下慢慢分析，先给V7-V17赋值，进入函数sub_4010F0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_4010F0</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">4</span> * i;</span><br><span class="line">    v6 = *(_DWORD *)(<span class="number">4</span> * i + a1);</span><br><span class="line">    <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; *(_DWORD *)(a1 + <span class="number">4</span> * result) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++i;</span><br><span class="line">          *(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + <span class="number">4</span> * result);</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">while</span> ( *(_DWORD *)(a1 + <span class="number">4</span> * i) &lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = <span class="number">4</span> * i;</span><br><span class="line">          *(_DWORD *)(a1 + <span class="number">4</span> * result) = *(_DWORD *)(<span class="number">4</span> * i + a1);</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    *(_DWORD *)(a1 + <span class="number">4</span> * result) = v6;</span><br><span class="line">    sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">    result = a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是一个排序的函数，将前面赋值的十个数从小到大排序</p><p><img src="/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/4.PNG" alt="4"></p><p>点击查看V23</p><p><img src="/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/5.PNG" alt="5"></p><p>V23等于string[5],依次可以看出V24等等</p><p>*<em>v4 = (const char <em>)sub_401000(&amp;v26, strlen(&amp;v26));</em></em>，接下来继续看sub_401000</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BYTE *__cdecl <span class="title">sub_401000</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  _BYTE *v5; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *v8; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v10; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v12; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v13; <span class="comment">// esi</span></span><br><span class="line">  _BYTE *result; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *v15; <span class="comment">// [esp+Ch] [ebp-10h]</span></span><br><span class="line">  _BYTE *v16; <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+14h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+18h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = a2 / <span class="number">3</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 % <span class="number">3</span> &gt; <span class="number">0</span> )</span><br><span class="line">    ++v2;</span><br><span class="line">  v4 = <span class="number">4</span> * v2 + <span class="number">1</span>;</span><br><span class="line">  v5 = <span class="built_in">malloc</span>(v4);</span><br><span class="line">  v6 = v5;</span><br><span class="line">  v15 = v5;</span><br><span class="line">  <span class="keyword">if</span> ( !v5 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, v4);</span><br><span class="line">  v7 = a2;</span><br><span class="line">  v8 = v6;</span><br><span class="line">  v16 = v6;</span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = <span class="number">0</span>;</span><br><span class="line">      v10 = <span class="number">0</span>;</span><br><span class="line">      v18 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 &gt;= v7 )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        ++v10;</span><br><span class="line">        v9 = *(<span class="keyword">unsigned</span> __int8 *)(v3++ + a1) | (v9 &lt;&lt; <span class="number">8</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v10 &lt; <span class="number">3</span> );</span><br><span class="line">      v11 = v9 &lt;&lt; <span class="number">8</span> * (<span class="number">3</span> - v10);</span><br><span class="line">      v12 = <span class="number">0</span>;</span><br><span class="line">      v17 = v3;</span><br><span class="line">      v13 = <span class="number">18</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v10 &gt;= v12 )</span><br><span class="line">        &#123;</span><br><span class="line">          *((_BYTE *)&amp;v18 + v12) = (v11 &gt;&gt; v13) &amp; <span class="number">0x3F</span>;</span><br><span class="line">          v8 = v16;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          *((_BYTE *)&amp;v18 + v12) = <span class="number">64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *v8++ = byte_407830[*((<span class="keyword">char</span> *)&amp;v18 + v12)];</span><br><span class="line">        v13 -= <span class="number">6</span>;</span><br><span class="line">        ++v12;</span><br><span class="line">        v16 = v8;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v13 &gt; <span class="number">-6</span> );</span><br><span class="line">      v3 = v17;</span><br><span class="line">      <span class="keyword">if</span> ( v17 &gt;= a2 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v7 = a2;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 = v15;</span><br><span class="line">  &#125;</span><br><span class="line">  result = v6;</span><br><span class="line">  *v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/7.PNG" alt="7"></p><p>看到这个就知道是熟悉的base64加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( String == v7 + <span class="number">34</span>                       <span class="comment">// sub_4010F0函数后的第一位等于51+34=85--&gt;&#x27;U&#x27;</span></span><br><span class="line">       &amp;&amp; <span class="built_in">string</span>[<span class="number">1</span>] == v11                   <span class="comment">// 第2位，等于v13,即sub_4010F0函数返回值的第5位值--&gt;&#x27;J&#x27; </span></span><br><span class="line">       &amp;&amp; <span class="number">4</span> * <span class="built_in">string</span>[<span class="number">2</span>] - <span class="number">141</span> == <span class="number">3</span> * v9</span><br><span class="line">       &amp;&amp; <span class="built_in">string</span>[<span class="number">3</span>] / <span class="number">4</span> == <span class="number">2</span> * (v14 / <span class="number">9</span>)</span><br><span class="line">       &amp;&amp; !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;ak1w&quot;</span>)</span><br><span class="line">       &amp;&amp; !<span class="built_in">strcmp</span>(v5, <span class="string">&quot;V1Ax&quot;</span>) )</span><br></pre></td></tr></table></figure><p>看最后的一段代码</p><p>然后通过python脚本解密ak1w和V1Ax</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">str1 = <span class="string">&#x27;ak1w&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;V1Ax&#x27;</span></span><br><span class="line">flag1 = base64.b64decode(str1)</span><br><span class="line">flag2 = base64.b64decode(str2)</span><br><span class="line">print(flag1)</span><br><span class="line">print(flag2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到 jMp和WP1</p><p>上面第三行和第四行代码是比较 4*’x-141==3 *69 算出来x=87，是W</p><p>所以WP1在前面，flag就可以组合起来了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刮开有奖&quot;&gt;&lt;a href=&quot;#刮开有奖&quot; class=&quot;headerlink&quot; title=&quot;刮开有奖&quot;&gt;&lt;/a&gt;刮开有奖&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2021/06/10/BUU-%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2021 DASCTF X BUUOJ 五月大联动</title>
    <link href="http://example.com/2021/06/05/5yuedald/"/>
    <id>http://example.com/2021/06/05/5yuedald/</id>
    <published>2021-06-05T14:24:11.000Z</published>
    <updated>2021-06-05T15:35:27.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PaperPlease"><a href="#PaperPlease" class="headerlink" title="PaperPlease"></a>PaperPlease</h2><p>先查壳，发现没有，用IDA打开，比较简单，直接看main函数</p><p><img src="/2021/06/05/5yuedald/1.PNG" alt="1"></p><p>先比较了一下前面几位输入的是不是和DASCTF{ }一样，然后调用了一下这个巨长的函数，打开看一下</p><p><img src="/2021/06/05/5yuedald/2.PNG" alt="2"></p><p>可以看出是和一段数据进行了异或操作,off_4010点进去看看</p><p><img src="/2021/06/05/5yuedald/3.PNG" alt="3"></p><p>可以看到一串数据，思路清晰了，直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="string">&quot;5c715207e3abed7dfb7c8ea9c82d0e29&quot;</span></span><br><span class="line"></span><br><span class="line">t = [<span class="number">0x56</span>,<span class="number">0x5</span>,<span class="number">0x53</span>,<span class="number">0x52</span>,<span class="number">0x4</span>,<span class="number">0x3</span>,<span class="number">0x53</span>,<span class="number">0x54</span>,<span class="number">0x4</span>,<span class="number">0x0B</span>,<span class="number">0x53</span>,<span class="number">0x51</span>,<span class="number">0x6</span>,<span class="number">0x6</span>,<span class="number">0x0F</span>,<span class="number">0x55</span>,<span class="number">0x5</span>,<span class="number">0x5B</span>,<span class="number">0x3</span>,<span class="number">0x56</span>,<span class="number">0x0E</span>,<span class="number">0x7</span>,<span class="number">0x57</span>,<span class="number">0x0E</span>,<span class="number">0x1</span>,<span class="number">0x0D</span>,<span class="number">0x56</span>,<span class="number">0x0</span>,<span class="number">0x4</span>,<span class="number">0x6</span>,<span class="number">0x0A</span>,<span class="number">0x5D</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(r)):</span><br><span class="line">      flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(r[i])^t[i])</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><img src="/2021/06/05/5yuedald/4.PNG" alt="4"></p><p>最后在加上DASCTF{ }就可以了</p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>该程序逻辑其实也十分清晰，就是一道迷宫题，如下图所示，2代表前进七步，8代表后退七步，6代表前进一步，4代表后退一步。每前进一步就和amp数组里的值进行比较，为1则继续前进，不为1则退出，直到走到”#”的位置</p><p><img src="/2021/06/05/5yuedald/5.PNG" alt="5"></p><p><img src="/2021/06/05/5yuedald/6.PNG" alt="6"></p><p>找到了数据才顺藤摸瓜找到函数</p><p>看着这个数出来的是错的，看了大佬讲的才知道32位的程序每一步是4个字节，而IDAHEX显示的是单字节，要调整成四字节的才可以看出，把原来的数据类型改成unsigned,8列，四字节</p><p><img src="/2021/06/05/5yuedald/43.PNG" alt="43"></p><p>计算一下就可以推导出结果</p><p><strong>2622668662224422666</strong><img src="/2021/06/05/5yuedald/67.PNG" alt="67"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PaperPlease&quot;&gt;&lt;a href=&quot;#PaperPlease&quot; class=&quot;headerlink&quot; title=&quot;PaperPlease&quot;&gt;&lt;/a&gt;PaperPlease&lt;/h2&gt;&lt;p&gt;先查壳，发现没有，用IDA打开，比较简单，直接看main函数&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ESP定理</title>
    <link href="http://example.com/2021/06/01/ESP%E5%AE%9A%E7%90%86/"/>
    <id>http://example.com/2021/06/01/ESP%E5%AE%9A%E7%90%86/</id>
    <published>2021-06-01T14:07:58.000Z</published>
    <updated>2021-06-01T14:09:54.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESP定律"><a href="#ESP定律" class="headerlink" title="ESP定律"></a>ESP定律</h1><h2 id="一-准备知识"><a href="#一-准备知识" class="headerlink" title="一.准备知识"></a>一.准备知识</h2><p>在我们开始讨论ESP定律之前，我先给你讲解一下一些简单的汇编知识。<br>1.call<br>这个命令是访问子程序的一个汇编基本指令。也许你说，这个我早就知道了！别急请继续看完。call真正的意义是什么呢？我们可以这样来理解： </p><p>向堆栈中压入下一行程序的地址；<br>JMP到call的子程序地址处。<br>例如：<br>00401029.E8 DA240A00 call 004A3508<br>0040102E.5A          pop edx<br>在执行了00401029以后，程序会将0040102E压入堆栈，然后JMP到004A3508地址处！ </p><p>2.RETN<br>与call对应的就是RETN了。对于RETN我们可以这样来理解：<br>将当前的ESP中指向的地址出栈；<br>JMP到这个地址。<br>这个就完成了一次调用子程序的过程。在这里关键的地方是：如果我们要返回父程序，则当我们在堆栈中进行堆栈的操作的时候，一定要保证在RETN这条指令之前，ESP指向的是我们压入栈中的地址。这也就是著名的“堆栈平衡”原理！ </p><p>3.狭义ESP定律<br>ESP定律的原理就是“堆栈平衡”原理。<br>让我们来到程序的入口处看看吧！<br>1.这个是加了ASPACK壳的入口时各个寄存器的值！<br>EAX 00000000<br>ECX 0012FFB0<br>EDX 7FFE0304  //堆栈值<br>EBX 7FFDF000  //堆栈值<br>ESP 0012FFC4<br>EBP 0012FFF0<br>ESI 77F57D70 ntdll.77F57D70<br>EDI 77F944A8 ntdll.77F944A8<br>EIP 0040D000 ASPACK.<ModuleEntryPoint><br>2.这个是ASPACK壳JMP到OEP后的寄存器的值！<br>EAX 004010CC ASPACK.004010CC<br>ECX 0012FFB0<br>EDX 7FFE0304  //堆栈值<br>EBX 7FFDF000  //堆栈值<br>ESP 0012FFC4<br>EBP 0012FFF0<br>ESI 77F57D70 ntdll.77F57D70<br>EDI 77F944A8 ntdll.77F944A8<br>EIP 004010CC ASPACK.004010CC<br>呵呵~是不是除了EIP不同以外，eax保存当前OEP值，其他都一模一样啊！<br>为什么会这样呢？我们来看看 </ModuleEntryPoint></p><p>0040D000 A&gt;  60               pushad  //注意这里ESP=0012FFC4<br>0040D001     E8 00000000      call ASPACK.0040D006  //ESP=0012FFA4 </p><p>PUSHAD就是把所有寄存器压栈！我们在到壳的最后看看： </p><p>0040D558     61               popad  //ESP=0012FFA4<br>0040D559     75 08            jnz short ASPACK.0040D563 //注意这里ESP=0012FFC4 </p><p>也就是说当我们对ESP的0012FFA4下硬件访问断点之后。当程序要通过堆栈访问这些值<br>，从而恢复原来寄存器的值，准备跳向苦苦寻觅的OEP的时候，OD帮助我们中断下来。 </p><p>小结：我们可以把壳假设为一个子程序，当壳把代码解压前和解压后，他必须要做的是遵循堆栈平衡的原理。 </p><p>因为大家对ESP理解各有异同，但是，大同小异！一般理解可以为：<br>1、在命令行下断hr esp-4（此时的ESP就是OD载入后当前显示的值）<br>2、hr ESP(关键标志下一行代码所指示的ESP值(单步通过))</p><h3 id="1-ESP定律的原理是什么？"><a href="#1-ESP定律的原理是什么？" class="headerlink" title="1.ESP定律的原理是什么？"></a>1.ESP定律的原理是什么？</h3><p>堆栈平衡原理。 </p><h3 id="2-ESP定律的适用范围是什么？"><a href="#2-ESP定律的适用范围是什么？" class="headerlink" title="2.ESP定律的适用范围是什么？"></a>2.ESP定律的适用范围是什么？</h3><p>几乎全部的压缩壳，部分加密壳。只要是在JMP到OEP后，ESP=0012FFC4的壳，理论上我们都可以使用。但是在何时下断点避开校验，何时下断OD才能断下来，这还需要多多总结和多多积累。 </p><h3 id="3-是不是只能下断12FFA4的访问断点？"><a href="#3-是不是只能下断12FFA4的访问断点？" class="headerlink" title="3.是不是只能下断12FFA4的访问断点？"></a>3.是不是只能下断12FFA4的访问断点？</h3><p>当然不是，那只是ESP定律的一个体现，我们运用的是ESP定律的原理，而不应该是他的具体数值，不能说12FFA4，或者12FFC0就是ESP定律，他们只是ESP定律的一个应用罢了！ </p><p>内存断点<br>   1、要解决的问题是：<br>   1.什么是内存断点？<br>   2.如何在寻找OEP时使用内存断点。 </p><h3 id="4、内存断点寻找OEP的原理"><a href="#4、内存断点寻找OEP的原理" class="headerlink" title="4、内存断点寻找OEP的原理"></a>4、内存断点寻找OEP的原理</h3><p>i. 首先，在OD中内存断点和普通断点（F2下断）是有本质区别的。 </p><p>内存断点等效于命令bpm，他的中断要用到DR0-DR7的调试寄存器，也就是说OD通过这些DR0-DR7的调试寄存器来判断是否断下普通断点（F2下断）等效于bpx，他是在所执行的代码的当前地址的一个字节修改为CC（int3）。当程序运行到int3的时候就会产生一个异常，而这个异常将交给OD处理，把这个异常给EIP-1以后，就正好停在了需要的中断的地方（这个根据系统不同会不一样），同时OD在把上面的int3修改回原来的代码。<br>内存断点分为：内存访问断点，内存写入断点。<br>我们知道，在程序运行的时候会有3种基本的状态产生：读取–&gt;写入–&gt;执行。 </p><p>004AE242   A1 00104000  mov eax,dword ptr ds:[004AE24C]  //004AE24C处的内存读取<br>004AE247   A3 00104000  mov dword ptr ds:[004AE24C],eax  //004AE24C处的内存写入<br>004AE24C   83C0 01      add eax,1                       //004AE24C处的内存执行 </p><p>  1.当对004AE24C下内存访问断点的时候，可以中断在004AE242也可以中断在004AE247。<br>  2.当对004AE24C下内存写入断点的时候，只能中断在004AE247。<br>   3．当执行004AE24C的时候，只能中断在004AE24C </p><p>到这里你可能不明白了，为什么内存访问断点能中断在004AE247这一句对004AE24C的写入，而且还能中断在004AE24C的执行呢？其实很简单，我们只要仔细体会一下“内存访问”这四个字的含义遍可以知道，当我们对004AE24C进行读取的时候需要“访问”他吧，当我对004AE24C进行写入的时候也需要“访问”他吧！！当然我们要执行内存地址004AE24C的代码的时候也是还是要“访问”他的！ </p><p>  所以我们不难得出下面的结论：<br>  1.内存写入中断的地方，一定是也可以用内存访问中断。<br>  2.内存执行的地方，也可以用内存访问中断。 </p><p>如果这时你认为，那么内存写入岂不是没用了。呵呵~那我要告诉你当然不是，如果你想快速的准确的定位到004AE247这一行的时候，那么他就大有作用了！ </p><p> 总结一下：内存断点不修改原代码，不会像普通断点那样因为修改代码被程序校验而导致中断失败；对于区段的访问只是区域大了一点，其原理和上面分析的三行代码是一样的。 </p><p>  ii.如何使用内存断点来寻找OEP呢？<br>  要回答这个问题首先要回答这一个问题：壳是如何解压代码的？ </p><p>正如我们知道的，壳如果要把原来加密或压缩的代码运行起来就必须要解压和解密原来的代码。而这一个过程我们难道不能将他看做是对代码段（code段）的写入吗？好了，解压完毕了。我们要从壳代码的区段JMP到原来的代码段的时候，难道不正是对代码段（code段）的执行吗？ </p><p>理清了上面的关系就好办了，那么如果载入OD后，我们直接对code段下内存访问断点的时候，一定会中断在壳对code段的写入的代码的上面，就像上面的004AE247的这一行。而如果当他把code段的代码全部解压解密完毕了以后，JMP到OEP的时候，我们是不是还可以停在OEP的代码上面呢？而且每按下F9都会中断，因为这时code段在执行中哦！ </p><p>而如果你还要继续问我为什么一定要到那个地方才可以下断呢？我难道不可以一开始就下断吗？ </p><p>正入我上面所说的，如果你在前面下断很可能壳对code段还没解压完毕呢，这时如果你不停的按F9，你将会看到OD的下方不断的在提示你，“对401000写入中断”“对401002写入中断”“对401004写入中断”…….如果你不介意按F9到他把正个code段写完的话，我除了同情你的“F9”以外，没什么其他的意见！ </p><p>  那么我们就没有别更快一点的办法了吗？<br>  有的！那就是我们呼之欲出的两次内存断点办法。<br>  怎么理解两次内存断点呢？ </p><p>让我来做一个假设吧，假设我是一个壳的作者。一个EXE文件的有code段，data段，rsrc段…..依次排列在你的内存空间中，那么我会怎么解码呢？呵呵~我比较笨一点，我会先将code段解码，然后再将data段解压，接着是rsrc段……那么你不难发现，只要你在data断或者rsrc段下内存访问断点，那么中断的时候code段就已经解压完毕了。这时我们再对code段下内存访问断点，不就可以到达OEP了吗？ </p><p>  这里注意上面虽然下了两次内存访问断点，但是本质是不一样的，目的也是不一样的。 </p><p> 1.对data段下内存访问断点而中断是因为内存写入中断，目的是断在对对data段的解压时，这时壳要对data段写数据，但是code段已经解压 完毕。<br> 2.对code段下内存访问断点而中断是因为内存执行中断，目的当然就是寻找OEP了。 </p><p> 总结一下：如果我们知道壳在什么地方对code段解压完毕我们就可以使用内存断点，找到OEP。如果不知道，那么我们就依靠2次内存断点去找，如果还不行就用多次内存断点。总之明白了原理在多次的内存断点其实都一样。从这个过程中我们了解的是壳在对区段解码的顺序！ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ESP定律&quot;&gt;&lt;a href=&quot;#ESP定律&quot; class=&quot;headerlink&quot; title=&quot;ESP定律&quot;&gt;&lt;/a&gt;ESP定律&lt;/h1&gt;&lt;h2 id=&quot;一-准备知识&quot;&gt;&lt;a href=&quot;#一-准备知识&quot; class=&quot;headerlink&quot; title=&quot;一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU新年快乐</title>
    <link href="http://example.com/2021/06/01/BUU%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <id>http://example.com/2021/06/01/BUU%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</id>
    <published>2021-06-01T13:57:59.000Z</published>
    <updated>2021-06-01T14:06:38.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h1><p>打开IDA一看怎么就两个函数，有问题</p><p>查一下壳，有一个UPX壳</p><p><img src="/2021/06/01/BUU%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/ke.PNG" alt="ke"></p><p>可以用工具直接脱壳，这里用一下OD手动脱壳,采用ESP定律的方法找OEP</p><p><img src="/2021/06/01/BUU%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/r.PNG" alt="r"></p><p>打开往上找直接看到了POPAX</p><p>直接在jmp新年快乐处下断点，F9运行到这里，F8就跳转到OEP</p><p><img src="/2021/06/01/BUU%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/4.PNG" alt="4"></p><p>直接右键用OD自带的脱壳</p><p>得到一个新的程序</p><p>打开直接查看main函数</p><p><img src="/2021/06/01/BUU%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/12.PNG" alt="12"></p><p>是一个简单的比较</p><p>flag就是：<strong>flag{HappyNewYear!}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新年快乐&quot;&gt;&lt;a href=&quot;#新年快乐&quot; class=&quot;headerlink&quot; title=&quot;新年快乐&quot;&gt;&lt;/a&gt;新年快乐&lt;/h1&gt;&lt;p&gt;打开IDA一看怎么就两个函数，有问题&lt;/p&gt;
&lt;p&gt;查一下壳，有一个UPX壳&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ISCC2021-RE2</title>
    <link href="http://example.com/2021/05/29/ISCC2021-RE2/"/>
    <id>http://example.com/2021/05/29/ISCC2021-RE2/</id>
    <published>2021-05-29T13:04:29.000Z</published>
    <updated>2021-05-29T13:54:35.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>题目提示分析，直接打开IDA分析</p><p>shift+F12查看字符串，找到flag的句子</p><p><img src="/2021/05/29/ISCC2021-RE2/zid.PNG" alt="zid"></p><p>找到主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Str[<span class="number">3</span>]; <span class="comment">// [esp+11h] [ebp-97h] BYREF</span></span><br><span class="line">  _BYTE v5[<span class="number">57</span>]; <span class="comment">// [esp+14h] [ebp-94h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+4Dh] [ebp-5Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">64</span>]; <span class="comment">// [esp+51h] [ebp-57h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">7</span>]; <span class="comment">// [esp+91h] [ebp-17h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+98h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+9Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">4</span> * (((Str - v5 + <span class="number">64</span>) &amp; <span class="number">0xFFFFFFFC</span>) &gt;&gt; <span class="number">2</span>));</span><br><span class="line">  Str[<span class="number">0</span>] = <span class="number">67</span>;</span><br><span class="line">  Str[<span class="number">1</span>] = <span class="number">-33</span>;</span><br><span class="line">  Str[<span class="number">2</span>] = <span class="number">20</span>;</span><br><span class="line">  v5[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">  v5[<span class="number">1</span>] = <span class="number">13</span>;</span><br><span class="line">  v5[<span class="number">2</span>] = <span class="number">44</span>;</span><br><span class="line">  v5[<span class="number">3</span>] = <span class="number">9</span>;</span><br><span class="line">  v5[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">  v5[<span class="number">5</span>] = <span class="number">23</span>;</span><br><span class="line">  v5[<span class="number">6</span>] = <span class="number">23</span>;</span><br><span class="line">  v5[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">  v5[<span class="number">8</span>] = <span class="number">-4</span>;</span><br><span class="line">  v5[<span class="number">9</span>] = <span class="number">43</span>;</span><br><span class="line">  v5[<span class="number">10</span>] = <span class="number">-6</span>;</span><br><span class="line">  v5[<span class="number">11</span>] = <span class="number">20</span>;</span><br><span class="line">  v5[<span class="number">12</span>] = <span class="number">23</span>;</span><br><span class="line">  v5[<span class="number">13</span>] = <span class="number">-7</span>;</span><br><span class="line">  v5[<span class="number">14</span>] = <span class="number">37</span>;</span><br><span class="line">  v5[<span class="number">15</span>] = <span class="number">-11</span>;</span><br><span class="line">  v5[<span class="number">16</span>] = <span class="number">34</span>;</span><br><span class="line">  v5[<span class="number">17</span>] = <span class="number">61</span>;</span><br><span class="line">  v5[<span class="number">18</span>] = <span class="number">-50</span>;</span><br><span class="line">  v5[<span class="number">19</span>] = <span class="number">24</span>;</span><br><span class="line">  v5[<span class="number">20</span>] = <span class="number">22</span>;</span><br><span class="line">  v5[<span class="number">21</span>] = <span class="number">10</span>;</span><br><span class="line">  qmemcpy(v8, <span class="string">&quot;REVERSE&quot;</span>, <span class="keyword">sizeof</span>(v8));</span><br><span class="line">  v9 = <span class="built_in">strlen</span>(Str);              </span><br><span class="line">  <span class="built_in">printf</span>(Format);                        </span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v7);                              <span class="comment">//输入flag</span></span><br><span class="line">  mix(v7, v8, v9);                             <span class="comment">//经过mix混淆</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v9; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v7[i] != Str[i] )                     <span class="comment">//与明文比较</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(Buffer);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(aFlag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入mix查看</p><p><img src="/2021/05/29/ISCC2021-RE2/mix.PNG" alt="mix"></p><p>第一个for先全部减去64，因为‘A’的ASCII 码为65，这里可以理解为获取在字母表中位置</p><p>第二个for当前值=当前值与下一值得差</p><p>第三个for判断k是不是小于7，str取余</p><p>第四个for将str作为密匙循环自加</p><p>第五个for 中间对称互换</p><p>最后利用str作为判断依据</p><p>用7.5的IDA找不到str，很神奇，用7.0的可以</p><p><img src="/2021/05/29/ISCC2021-RE2/%E6%8D%95%E8%8E%B7.PNG" alt="捕获"></p><p>91-97是str密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">a =[<span class="number">67</span>,-<span class="number">33</span>,<span class="number">20</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">44</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">8</span>,-<span class="number">4</span>,<span class="number">43</span>,-<span class="number">6</span>,<span class="number">20</span>,<span class="number">23</span>,-<span class="number">7</span>,<span class="number">37</span>,-<span class="number">11</span>,<span class="number">34</span>,<span class="number">61</span>,-<span class="number">50</span>,<span class="number">24</span>,<span class="number">22</span>,<span class="number">10</span>]</span><br><span class="line"><span class="built_in">str</span> = [<span class="number">82</span>,<span class="number">69</span>,<span class="number">86</span>,<span class="number">69</span>,<span class="number">82</span>,<span class="number">83</span>,<span class="number">69</span>]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line"><span class="built_in">str</span>[k] %= <span class="number">64</span></span><br><span class="line"><span class="comment">#加密用的密匙都是取余后的，所以先取余操作</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>[n%<span class="number">7</span>] &amp; <span class="number">1</span>:</span><br><span class="line">a[n] -= <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a[n] -= <span class="number">1</span></span><br><span class="line"><span class="comment">#先逆加一和加二</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)//<span class="number">2</span>):</span><br><span class="line">x = a[m]</span><br><span class="line">a[m] = a[<span class="built_in">len</span>(a)-<span class="number">1</span>-m]</span><br><span class="line">a[<span class="built_in">len</span>(a)-<span class="number">1</span>-m] = x</span><br><span class="line"><span class="comment">#对称互换</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">a[l] -= <span class="built_in">str</span>[l%<span class="number">7</span>]</span><br><span class="line"><span class="comment">#逆自加，既自减</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">a[j] += a[j+<span class="number">1</span>]</span><br><span class="line"><span class="comment">#这一步需要从后往前，因为最后一个字符是不变的</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">a[i] += <span class="number">64</span></span><br><span class="line"><span class="comment">#加回64</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#列表形式输出（ASCII码形式）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">a[i] = <span class="built_in">chr</span>(a[i])</span><br><span class="line"><span class="comment">#转为字符</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(a)<span class="comment">#串成串</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[73, 83, 67, 67, 123, 82, 69, 86, 69, 82, 83, 69, 95, 73, 83, 95, 78, 79,</span></span><br><span class="line"><span class="string">84, 95, 72, 65, 82, 68, 125]</span></span><br><span class="line"><span class="string">ISCC&#123;REVERSE_IS_NOT_HARD&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h1&gt;&lt;p&gt;题目提示分析，直接打开IDA分析&lt;/p&gt;
&lt;p&gt;shift+F12查看字符串，找到flag的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ISCC2021-re</title>
    <link href="http://example.com/2021/05/27/iscc-re1/"/>
    <id>http://example.com/2021/05/27/iscc-re1/</id>
    <published>2021-05-27T11:26:28.000Z</published>
    <updated>2021-05-27T11:43:37.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Garden"><a href="#Garden" class="headerlink" title="Garden"></a>Garden</h1><p>下载下来，题目给了一个pyc文件，很明显要反编译成py文件，python2的可以用下uncompyle2转换，这里是python3的，用在线工具就可以<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></p><p>反编译的结果如下</p><p><img src="/2021/05/27/iscc-re1/23.PNG" alt="23"></p><p><img src="/2021/05/27/iscc-re1/8.PNG" alt="8"></p><p>第八行def了check函数，第32行调用此函数，函数先判断了flag的长度是不是等于f的长度，然后就是异或<strong>a^b^123&lt;=&gt;a=b^c</strong></p><p>python中的chr和 ord 用法</p><p>ord()取字符对应ascii码,chr()返回ascii码对应字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="string">&#x27;2(88\x006\x1a\x10\x10\x1aIKIJ+\x1a\x10\x10\x1a\x06&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^<span class="number">123</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><img src="/2021/05/27/iscc-re1/2.PNG" alt="2"></p><p>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Garden&quot;&gt;&lt;a href=&quot;#Garden&quot; class=&quot;headerlink&quot; title=&quot;Garden&quot;&gt;&lt;/a&gt;Garden&lt;/h1&gt;&lt;p&gt;下载下来，题目给了一个pyc文件，很明显要反编译成py文件，python2的可以用下uncompyle2转换</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RC4加密算法原理与实现</title>
    <link href="http://example.com/2021/05/20/RC4/"/>
    <id>http://example.com/2021/05/20/RC4/</id>
    <published>2021-05-20T12:29:22.000Z</published>
    <updated>2021-05-24T15:16:43.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RC4-的算法原理"><a href="#RC4-的算法原理" class="headerlink" title="RC4 的算法原理"></a>RC4 的算法原理</h1><p>RC4算法的特点是算法简单，运行速度快，而且密钥长度是可变的，可变范围为1-256字节(8-2048比特)，在如今技术支持的前提下，当密钥长度为128比特时，用暴力法搜索密钥已经不太可行，所以可以预见 RC4的密钥范围任然可以在今后相当长的时间里抵御暴力搜索密钥的攻击。实际上，如今也没有找到对于128bit密钥长度的RC4加密算法的有效攻击方法。</p><p><img src="https://img-blog.csdnimg.cn/20210301143758983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ptaWxr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>RC4算法有4个关键的变量</p><p>密钥流：RC4 算法的关键是根据明文和密钥生成相应的密钥流，密钥流的长度和明文的长度是对应的，也就是说明文的长度是 500 字节，那么密钥流也是 500 字节。当然，加密生成的密文也是 500 字节，因为密文第 i 字节 = 明文第 i 字节 ^ 密钥流第 i 字节；</p><p>状态向量 S：长度为 256Byte，S[0],S[1]…S[255]。每个单元都是一个 Byte，算法运行的任何时候，S 都包括 0-255 的 8Bit 的排列组合，只不过值的位置发生了变换；</p><p>临时向量 T：长度也为 256Byte，每个单元也是一个 Byte。如果密钥的长度是 256Byte，就直接把密钥的值赋给 T，否则，轮转地将密钥的每个 Byte 赋给 T；</p><p>密钥 K：长度为 1-256Byte，注意密钥的长度（keylen）与明文长度、密钥流的长度没有必然关系，通常密钥的长度为 16Byte（128Bit）。</p><h2 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h2><p><img src="/2021/05/20/RC4/007juUiNly1gqp6buze02j30px0hmq9w.jpg" alt="img"></p><h3 id="1-初始-S-和-T"><a href="#1-初始-S-和-T" class="headerlink" title="1.初始 S 和 T"></a>1.初始 S 和 T</h3><p>先初始化状态向量 S（256 个字节，用来作为密钥流生成的种子 1）：按照升序，给每个字节赋值 0,1,2,3,4,5,6…,254,255。<br>再初始化临时向量 T（初始密钥 K，由用户输入）：长度任意，如果输入长度小于 256Byte，则进行轮转，直到填满。例如：输入密钥的是 1,2,3,4,5，那么填入的是 1,2,3,4,5,1,2,3,4,5,1,2,3,4,5…。由上述轮转过程得到 256 个字节的临时向量 T（用来作为密钥流生成的种子 2）</p><h3 id="2-初始排列S"><a href="#2-初始排列S" class="headerlink" title="2.初始排列S"></a>2.初始排列S</h3><p>开始对状态向量 S 进行置换操作（用来打乱初始种子 1），按照下列规则进行，从第零个字节开始，执行 256 次，保证每个字节都得到处理这样处理后的状态向量 S 几乎是带有一定的随机性了。</p><h3 id="3-产生密钥流"><a href="#3-产生密钥流" class="headerlink" title="3.产生密钥流"></a>3.产生密钥流</h3><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h3 id="c语言实现"><a href="#c语言实现" class="headerlink" title="c语言实现"></a>c语言实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> longULONG;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化算法（KSA）函数</span></span><br><span class="line"><span class="comment"> * 参数 1: 一个 256 长度的 char 型数组，定义为: unsigned char sBox[256];</span></span><br><span class="line"><span class="comment"> * 参数 2: 密钥，其内容可以随便定义：char key[256];</span></span><br><span class="line"><span class="comment"> * 参数 3: 密钥的长度，Len = strlen(key);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* s, <span class="keyword">unsigned</span> <span class="keyword">char</span>* key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">// 交换 s[i] 和 s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 伪随机子密码生成算法（PRGA）函数完成加、解密。</span></span><br><span class="line"><span class="comment"> * 过程中，密钥的主要功能是将 S 搅乱，i 确保 S 的每个元素都得到处理，j 保证 S 的搅乱是随机的。</span></span><br><span class="line"><span class="comment"> * 由此，不同的 S 在经过 PRGA 处理后可以得到不同的子密钥序列，将 S 和明文进行 xor 运算，得到密文，解密过程也完全相同。</span></span><br><span class="line"><span class="comment"> * 参数 1：是上边 rc4_init 函数中，被搅乱的 S;</span></span><br><span class="line"><span class="comment"> * 参数 2：是需要加密的 Data 数据;</span></span><br><span class="line"><span class="comment"> * 参数 3：是 Data 的长度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* s, <span class="keyword">unsigned</span> <span class="keyword">char</span>* Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">// 交换 s[x] 和 s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;, s2[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;   <span class="comment">// S</span></span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">256</span>] = &#123; <span class="string">&quot;justfortest&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> pData[<span class="number">512</span>] = <span class="string">&quot;这是一个用来加密的数据 Data&quot;</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(pData);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n&quot;</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key=%s, length=%zu\n\n&quot;</span>, key, <span class="built_in">strlen</span>(key));</span><br><span class="line"></span><br><span class="line">    rc4_init(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)key, <span class="built_in">strlen</span>(key));   <span class="comment">// 已经完成了初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;完成对 S[i] 的初始化，如下：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, s[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; (i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)                          <span class="comment">// 用 s2[i] 暂时保留经过初始化的 s[i]，很重要！</span></span><br><span class="line">    &#123;</span><br><span class="line">        s2[i] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经初始化，现在加密: \n\n&quot;</span>);</span><br><span class="line">    rc4_crypt(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);        <span class="comment">// 加密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经加密，现在解密: \n\n&quot;</span>);</span><br><span class="line">    rc4_crypt(s2, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);       <span class="comment">// 解密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RC4的Python实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">S_box</span>(<span class="params">R</span>):</span>  <span class="comment"># S盒</span></span><br><span class="line">    S = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="comment">#S盒打乱顺序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + K[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_K</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="comment">#将字符串转换为ASCII码</span></span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">bytes</span>(key, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment">#print(&#x27;密钥的ASCII码:&#x27;, temp)</span></span><br><span class="line">    len_key = <span class="built_in">len</span>(temp)</span><br><span class="line">    <span class="comment">#填充密钥</span></span><br><span class="line">    K = [temp[i % len_key] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    <span class="keyword">return</span> K</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据密文长度生成密钥流</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_box</span>(<span class="params">S, length</span>):</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    keys = []</span><br><span class="line">    length = <span class="built_in">int</span>(length)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        t = (S[j] + S[i]) % <span class="number">256</span></span><br><span class="line">        k = S[t]</span><br><span class="line">        keys.append(k)</span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    choose = <span class="built_in">input</span>(<span class="string">&#x27;加密输入1，解密输入2，退出输入3：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        key = <span class="built_in">input</span>(<span class="string">&#x27;请输入密钥:&#x27;</span>)</span><br><span class="line">        K = gen_K(key)</span><br><span class="line">        S = S_box(K)</span><br><span class="line">        <span class="comment"># print(&#x27;S:&#x27;,S)</span></span><br><span class="line">        message = <span class="built_in">input</span>(<span class="string">&#x27;输入明文:&#x27;</span>)</span><br><span class="line">        secret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        keys = key_box(S, <span class="built_in">len</span>(message))</span><br><span class="line">        print(<span class="string">&quot;十进制密钥流：&quot;</span>,keys)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message)):</span><br><span class="line">            secret = secret + <span class="string">&#x27;%02x&#x27;</span> % (keys[i] ^ <span class="built_in">ord</span>(message[i]))</span><br><span class="line">        print(<span class="string">&#x27;加密后十六进制密文为:&#x27;</span>, secret)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        key = <span class="built_in">input</span>(<span class="string">&#x27;请输入密钥:&#x27;</span>)</span><br><span class="line">        K = gen_K(key)</span><br><span class="line">        S = S_box(K)</span><br><span class="line">        <span class="comment"># print(&#x27;S:&#x27;,S)</span></span><br><span class="line">        secret = <span class="built_in">input</span>(<span class="string">&#x27;请输入密文:&#x27;</span>)</span><br><span class="line">        message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        keys = key_box(S, <span class="built_in">len</span>(secret) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(secret) / <span class="number">2</span>)):</span><br><span class="line">            message = message + <span class="built_in">chr</span>(<span class="built_in">int</span>(secret[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>) ^ keys[i])</span><br><span class="line">            secret = secret[<span class="number">2</span>:]</span><br><span class="line">        print(<span class="string">&#x27;解密后明文为:&#x27;</span>, message)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RC4-的算法原理&quot;&gt;&lt;a href=&quot;#RC4-的算法原理&quot; class=&quot;headerlink&quot; title=&quot;RC4 的算法原理&quot;&gt;&lt;/a&gt;RC4 的算法原理&lt;/h1&gt;&lt;p&gt;RC4算法的特点是算法简单，运行速度快，而且密钥长度是可变的，可变范围为1-256字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2021CISCN-glass</title>
    <link href="http://example.com/2021/05/18/glass/"/>
    <id>http://example.com/2021/05/18/glass/</id>
    <published>2021-05-18T13:08:23.000Z</published>
    <updated>2021-05-24T15:21:20.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GLASS"><a href="#GLASS" class="headerlink" title="GLASS"></a>GLASS</h1><p>360的出题被人称为让师傅们有经历了次高考</p><p>看到题目是一个apk文件</p><p>jeb打开，找到checkflag的函数，是native</p><p><img src="/2021/05/18/glass/007juUiNly1gqmwxkpwadj30js0ght96.jpg" alt="img"></p><p>但是没有想到上面引入了native-lib，看了别人的writeup后才知道，核心函数在lib.so里面，把apk文件改成zip就可以得到libnative-lib.so</p><p>看到另一种找到主函数的方法</p><p>将apk改为.zip<br>解压反编译classes.dex    使用dex2jar反编译</p><p><img src="/2021/05/18/glass/007juUiNly1gqmwxkuibpj30yu0iqmy6.jpg" alt="img"></p><p>接下来IDA打开lib.so</p><p>找到checkflag这个函数</p><p><img src="/2021/05/18/glass/007juUiNly1gqmwxkvwzuj30np0b374n.jpg" alt="img"></p><p>分别打开sub_FFCC   sub_1088  sub_10D4</p><p><img src="/2021/05/18/glass/007juUiNly1gqmwxlahshj30fu0fkq3b.jpg" alt="img"></p><p><img src="/2021/05/18/glass/007juUiNly1gqmwxktp0oj30he0ffglz.jpg" alt="img"></p><p><img src="/2021/05/18/glass/007juUiNly1gqmwxkv1j1j30mk0d4mxh.jpg" alt="img"></p><p>sub_1088中看到了256的循环，想起来是不是RC4算法</p><p>sub_FFC初始化，sub_1088 RC4加密  sub_10D4是个异或加密函数</p><p>直接上脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">key2 = [<span class="number">163</span>,  <span class="number">26</span>, <span class="number">227</span>, <span class="number">105</span>,  <span class="number">47</span>, <span class="number">187</span>,  <span class="number">26</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">194</span>,</span><br><span class="line">        <span class="number">173</span>, <span class="number">173</span>, <span class="number">158</span>, <span class="number">150</span>,   <span class="number">5</span>,   <span class="number">2</span>,  <span class="number">31</span>, <span class="number">142</span>,  <span class="number">54</span>,  <span class="number">79</span>,</span><br><span class="line">        <span class="number">225</span>, <span class="number">235</span>, <span class="number">175</span>, <span class="number">240</span>, <span class="number">234</span>, <span class="number">196</span>, <span class="number">168</span>,  <span class="number">45</span>,  <span class="number">66</span>, <span class="number">199</span>,</span><br><span class="line">        <span class="number">110</span>,  <span class="number">63</span>, <span class="number">176</span>, <span class="number">211</span>, <span class="number">204</span>, <span class="number">120</span>, <span class="number">249</span>, <span class="number">152</span>,  <span class="number">63</span>]</span><br><span class="line">key3 = [<span class="number">146</span>, <span class="number">40</span>, <span class="number">208</span>, <span class="number">93</span>, <span class="number">26</span>, <span class="number">141</span>, <span class="number">45</span>, <span class="number">188</span>, <span class="number">84</span>, <span class="number">240</span>, <span class="number">158</span>, <span class="number">153</span>, <span class="number">171</span>, <span class="number">160</span>, <span class="number">50</span>, <span class="number">58</span>, <span class="number">46</span>, <span class="number">188</span>, <span class="number">5</span>,</span><br><span class="line">        <span class="number">123</span>, <span class="number">212</span>, <span class="number">221</span>, <span class="number">152</span>, <span class="number">200</span>, <span class="number">219</span>, <span class="number">246</span>, <span class="number">155</span>, <span class="number">25</span>, <span class="number">119</span>, <span class="number">241</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">129</span>, <span class="number">225</span>, <span class="number">255</span>, <span class="number">76</span>, <span class="number">204</span>, <span class="number">174</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key2)):</span><br><span class="line">        j = i % <span class="number">8</span></span><br><span class="line">        fla = key2[i] ^ <span class="built_in">ord</span>(key[j])</span><br><span class="line">        key2[i] = fla</span><br><span class="line">print(key2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">39</span>, <span class="number">3</span>):</span><br><span class="line">    key3[i + <span class="number">1</span>] ^= key3[i]</span><br><span class="line">    key3[i + <span class="number">2</span>] ^= key3[i + <span class="number">1</span>]</span><br><span class="line">    key3[i] ^= key3[i + <span class="number">2</span>]</span><br><span class="line"> </span><br><span class="line">print(key3)</span><br><span class="line"> </span><br><span class="line">c = key3</span><br><span class="line"><span class="comment">#[248, 186, 106, 151, 71, 202, 232, 145, 197, 7, 110, 247, 146, 11, 57, 146, 20, 168, 175, 126, 170, 80, 69, 141, 109, 45, 182, 134, 110, 159, 134, 94, 223, 179, 30, 82, 166, 98, 106]</span></span><br><span class="line"> </span><br><span class="line">t = []</span><br><span class="line">key = <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">ch = <span class="string">&#x27;&#x27;</span></span><br><span class="line">j = <span class="number">0</span>  <span class="comment"># 初始化</span></span><br><span class="line">s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  <span class="comment"># 创建有序列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + s[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">i = <span class="number">0</span>  <span class="comment"># 初始化</span></span><br><span class="line">j = <span class="number">0</span>  <span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> c:</span><br><span class="line">    i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">    x = (s[i] + (s[j] % <span class="number">256</span>)) % <span class="number">256</span></span><br><span class="line">    ch += <span class="built_in">chr</span>(r ^ s[x])</span><br><span class="line">print(ch)</span><br><span class="line"><span class="comment"># CISCN&#123;6654d84617f627c88846c172e0f4d46c&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/05/18/glass/007juUiNly1gqmy3bv7owj30xt042wem.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GLASS&quot;&gt;&lt;a href=&quot;#GLASS&quot; class=&quot;headerlink&quot; title=&quot;GLASS&quot;&gt;&lt;/a&gt;GLASS&lt;/h1&gt;&lt;p&gt;360的出题被人称为让师傅们有经历了次高考&lt;/p&gt;
&lt;p&gt;看到题目是一个apk文件&lt;/p&gt;
&lt;p&gt;jeb打开，找到c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>攻防世界re2</title>
    <link href="http://example.com/2021/05/04/re2/"/>
    <id>http://example.com/2021/05/04/re2/</id>
    <published>2021-05-04T08:21:38.000Z</published>
    <updated>2021-05-24T15:25:48.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>双击点开，让我输入flag</p><p><img src="/2021/05/04/re2/1565360175669.png" alt="1565360175669"></p><p>IDA直接看</p><p><img src="https://wx3.sinaimg.cn/mw1024/007juUiNly1gq6gxuh031j30nd0i80tq.jpg" alt="img"></p><p>F5</p><p><img src="https://wx4.sinaimg.cn/mw1024/007juUiNly1gq6gxuge37j30iq0gaaak.jpg" alt="img"></p><p>看到 <strong>strcmp()</strong> 函数，输入的是v9，和v5比较，所以数据就应该在v5里面，再看第10行，把<strong>xmmword_413E34</strong>的值赋给v5，所以双击<strong>xmmword_413E34</strong>看它的数据。把<strong>qword_413E44</strong>和<strong>xmmword_413E34</strong>的数据拼起来</p><p><img src="https://wx4.sinaimg.cn/mw1024/007juUiNly1gq6gxujeoxj30p80itmyk.jpg" alt="img"></p><p>按A直接得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;re1&quot;&gt;&lt;a href=&quot;#re1&quot; class=&quot;headerlink&quot; title=&quot;re1&quot;&gt;&lt;/a&gt;re1&lt;/h2&gt;&lt;p&gt;双击点开，让我输入flag&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/04/re2/1565360175669.png&quot; </summary>
      
    
    
    
    
  </entry>
  
</feed>
